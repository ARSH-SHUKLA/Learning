// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (527a5593).
//
// p:\ml-native\orders\orders_frontend\code\pvorderschedulemanager\src\main\cpp\testrelease\pvcarecoordcom.tli
//
// Wrapper implementations for type library PVCARECOORDCOM.dll
// compiler-generated file created 03/15/22 at 16:43:55 - DO NOT EDIT!


//
// interface IProVideObject wrapper method implementations
//

#pragma implementation_key(1)
inline _variant_t IProVideObject::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2)
inline VARIANT_BOOL IProVideObject::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline int IProVideObject::CompareObjects ( IUnknown * pObject ) {
    int _result = 0;
    HRESULT _hr = raw_CompareObjects(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4)
inline VARIANT_BOOL IProVideObject::LockObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LockObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5)
inline HRESULT IProVideObject::UnlockObject ( ) {
    HRESULT _hr = raw_UnlockObject();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6)
inline HRESULT IProVideObject::ConnectTo ( IUnknown * pUnk, _GUID * iid, unsigned long * pdw ) {
    HRESULT _hr = raw_ConnectTo(pUnk, iid, pdw);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7)
inline HRESULT IProVideObject::DisconnectFrom ( _GUID * iid, unsigned long dwVal ) {
    HRESULT _hr = raw_DisconnectFrom(iid, dwVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOrderSentence wrapper method implementations
//

#pragma implementation_key(8)
inline double IOrderSentence::GetOrderSentenceId ( ) {
    double _result = 0;
    HRESULT _hr = get_OrderSentenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(9)
inline void IOrderSentence::PutOrderSentenceId ( double pVal ) {
    HRESULT _hr = put_OrderSentenceId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(10)
inline _bstr_t IOrderSentence::GetOrderSentenceDisplayLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrderSentenceDisplayLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(11)
inline void IOrderSentence::PutOrderSentenceDisplayLine ( _bstr_t pVal ) {
    HRESULT _hr = put_OrderSentenceDisplayLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(12)
inline long IOrderSentence::GetSequence ( ) {
    long _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(13)
inline void IOrderSentence::PutSequence ( long pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(14)
inline _variant_t IOrderSentence::GetValue ( long ldetSeq, DETAIL_TYPE eDetType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(ldetSeq, eDetType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(15)
inline void IOrderSentence::PutValue ( long ldetSeq, DETAIL_TYPE eDetType, const _variant_t & pVal ) {
    HRESULT _hr = put_Value(ldetSeq, eDetType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(16)
inline long IOrderSentence::GetDetailCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DetailCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(17)
inline HRESULT IOrderSentence::Copy ( struct IOrderSentence * pOrdSent ) {
    HRESULT _hr = raw_Copy(pOrdSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(18)
inline long IOrderSentence::IsEqual ( struct IOrderSentence * pOrdSent ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pOrdSent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(19)
inline _bstr_t IOrderSentence::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(20)
inline void IOrderSentence::PutComment ( _bstr_t pVal ) {
    HRESULT _hr = put_Comment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(21)
inline double IOrderSentence::GetCommentTextId ( ) {
    double _result = 0;
    HRESULT _hr = get_CommentTextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline void IOrderSentence::PutCommentTextId ( double pVal ) {
    HRESULT _hr = put_CommentTextId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline HRESULT IOrderSentence::ClearDetails ( ) {
    HRESULT _hr = raw_ClearDetails();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(24)
inline HRESULT IOrderSentence::ToolCopy ( struct IOrderSentence * pOrdSent ) {
    HRESULT _hr = raw_ToolCopy(pOrdSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(25)
inline double IOrderSentence::GetParentSynonymId ( ) {
    double _result = 0;
    HRESULT _hr = get_ParentSynonymId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline void IOrderSentence::PutParentSynonymId ( double pVal ) {
    HRESULT _hr = put_ParentSynonymId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(27)
inline _bstr_t IOrderSentence::GetRxTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RxTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(28)
inline void IOrderSentence::PutRxTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_RxTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline long IOrderSentence::GetNormDoseUnitInd ( ) {
    long _result = 0;
    HRESULT _hr = get_NormDoseUnitInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline void IOrderSentence::PutNormDoseUnitInd ( long pVal ) {
    HRESULT _hr = put_NormDoseUnitInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(31)
inline long IOrderSentence::LookupSeqByMeanId ( double dMeanId ) {
    long _result = 0;
    HRESULT _hr = raw_LookupSeqByMeanId(dMeanId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(32)
inline long IOrderSentence::HasNormalizedDoseUnit ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasNormalizedDoseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline HRESULT IOrderSentence::CopyCoreOrderDetails ( struct IOrderSentence * pOrdSent ) {
    HRESULT _hr = raw_CopyCoreOrderDetails(pOrdSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(34)
inline HRESULT IOrderSentence::CopyCoreMedOrderDetails ( struct IOrderSentence * pOrdSent ) {
    HRESULT _hr = raw_CopyCoreMedOrderDetails(pOrdSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(35)
inline HRESULT IOrderSentence::CopyCoreIVOrderDetails ( struct IOrderSentence * pOrdSent ) {
    HRESULT _hr = raw_CopyCoreIVOrderDetails(pOrdSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(36)
inline long IOrderSentence::IsCoreDetailEqual ( struct IOrderSentence * pOrdSent ) {
    long _result = 0;
    HRESULT _hr = raw_IsCoreDetailEqual(pOrdSent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline HRESULT IOrderSentence::AddReplaceValue ( long lOrderDetailMeaning, DETAIL_TYPE eDetType, const _variant_t & newVal ) {
    HRESULT _hr = raw_AddReplaceValue(lOrderDetailMeaning, eDetType, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(38)
inline EPlanOrderSentenceType IOrderSentence::GetPlanOrderSentenceType ( ) {
    EPlanOrderSentenceType _result;
    HRESULT _hr = get_PlanOrderSentenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline void IOrderSentence::PutPlanOrderSentenceType ( EPlanOrderSentenceType pVal ) {
    HRESULT _hr = put_PlanOrderSentenceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline long IOrderSentence::AddOrderSentenceFilter ( LONG_PTR pOrdSentFilter ) {
    long _result = 0;
    HRESULT _hr = raw_AddOrderSentenceFilter(pOrdSentFilter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline long IOrderSentence::GetOrderSentenceFilterCnt ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetOrderSentenceFilterCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline HRESULT IOrderSentence::GetOrderSentenceFilterAt ( int iIndex, LONG_PTR lVal ) {
    HRESULT _hr = raw_GetOrderSentenceFilterAt(iIndex, lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(43)
inline _bstr_t IOrderSentence::GetOrderSentenceFilterDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrderSentenceFilterDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(44)
inline void IOrderSentence::PutOrderSentenceFilterDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_OrderSentenceFilterDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline long IOrderSentence::GetApplicableToPatientInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ApplicableToPatientInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void IOrderSentence::PutApplicableToPatientInd ( long pVal ) {
    HRESULT _hr = put_ApplicableToPatientInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline HRESULT IOrderSentence::ClearFilters ( ) {
    HRESULT _hr = raw_ClearFilters();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(48)
inline long IOrderSentence::GetSavedToDatabase ( ) {
    long _result = 0;
    HRESULT _hr = get_SavedToDatabase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void IOrderSentence::PutSavedToDatabase ( long pVal ) {
    HRESULT _hr = put_SavedToDatabase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline HRESULT IOrderSentence::GetOrderDetailsVector ( LONG_PTR lOrderDetailsVector ) {
    HRESULT _hr = raw_GetOrderDetailsVector(lOrderDetailsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGroup wrapper method implementations
//

#pragma implementation_key(51)
inline double IGroup::GetGroupId ( ) {
    double _result = 0;
    HRESULT _hr = get_GroupId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline void IGroup::PutGroupId ( double pVal ) {
    HRESULT _hr = put_GroupId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline _bstr_t IGroup::GetGroupTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(54)
inline void IGroup::PutGroupTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_GroupTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline long IGroup::MemberCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_MemberCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline IDispatchPtr IGroup::GetMemberDispAt ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MemberDispAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(57)
inline void IGroup::PutMemberDispAt ( int Index, IDispatch * ppDisp ) {
    HRESULT _hr = put_MemberDispAt(Index, ppDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline long IGroup::GetMemberSeqAt ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_MemberSeqAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(59)
inline void IGroup::PutMemberSeqAt ( int Index, long pVal ) {
    HRESULT _hr = put_MemberSeqAt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(60)
inline _variant_t IGroup::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(61)
inline int IGroup::AddMember ( ) {
    int _result = 0;
    HRESULT _hr = raw_AddMember(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline double IGroup::GetActGroupId ( ) {
    double _result = 0;
    HRESULT _hr = get_ActGroupId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline void IGroup::PutActGroupId ( double pVal ) {
    HRESULT _hr = put_ActGroupId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(64)
inline HRESULT IGroup::RemoveAllMembers ( ) {
    HRESULT _hr = raw_RemoveAllMembers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(65)
inline HRESULT IGroup::Copy ( struct IGroup * pGroup ) {
    HRESULT _hr = raw_Copy(pGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(66)
inline long IGroup::IsEqual ( struct IGroup * pGroup ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline HRESULT IGroup::RemoveMemberAt ( int Index ) {
    HRESULT _hr = raw_RemoveMemberAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(68)
inline _bstr_t IGroup::GetCPGroupDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CPGroupDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void IGroup::PutCPGroupDesc ( _bstr_t pVal ) {
    HRESULT _hr = put_CPGroupDesc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(70)
inline double IGroup::GetCPGroupSynonymId ( ) {
    double _result = 0;
    HRESULT _hr = get_CPGroupSynonymId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline void IGroup::PutCPGroupSynonymId ( double pVal ) {
    HRESULT _hr = put_CPGroupSynonymId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline HRESULT IGroup::RemoveMember ( IDispatch * pDisp ) {
    HRESULT _hr = raw_RemoveMember(pDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(73)
inline HRESULT IGroup::AddMemberOrderSent ( IDispatch * pDisp ) {
    HRESULT _hr = raw_AddMemberOrderSent(pDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(74)
inline LONG_PTR IGroup::GetMemberOrderSentCnt ( ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetMemberOrderSentCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline _bstr_t IGroup::GetMemberOrderSentDispAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMemberOrderSentDispAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(76)
inline long IGroup::GetMemberIncludedAt ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_MemberIncludedAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline void IGroup::PutMemberIncludedAt ( int Index, long pVal ) {
    HRESULT _hr = put_MemberIncludedAt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline _bstr_t IGroup::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(79)
inline void IGroup::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline long IGroup::GetMemberUpdtCntAt ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_MemberUpdtCntAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline void IGroup::PutMemberUpdtCntAt ( int Index, long pVal ) {
    HRESULT _hr = put_MemberUpdtCntAt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline ACTION_TYPE IGroup::GetMemberActionTypeAt ( int Index ) {
    ACTION_TYPE _result;
    HRESULT _hr = get_MemberActionTypeAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void IGroup::PutMemberActionTypeAt ( int Index, ACTION_TYPE pVal ) {
    HRESULT _hr = put_MemberActionTypeAt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline long IGroup::GetMemberIncludedCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MemberIncludedCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline long IGroup::GetMemberAnchorIndAt ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_MemberAnchorIndAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void IGroup::PutMemberAnchorIndAt ( int Index, long pVal ) {
    HRESULT _hr = put_MemberAnchorIndAt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline EComponentLinkingRuleType IGroup::GetLinkingRuleType ( ) {
    EComponentLinkingRuleType _result;
    HRESULT _hr = get_LinkingRuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(88)
inline void IGroup::PutLinkingRuleType ( EComponentLinkingRuleType pVal ) {
    HRESULT _hr = put_LinkingRuleType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(89)
inline long IGroup::GetLinkingRuleQuantity ( ) {
    long _result = 0;
    HRESULT _hr = get_LinkingRuleQuantity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(90)
inline void IGroup::PutLinkingRuleQuantity ( long pVal ) {
    HRESULT _hr = put_LinkingRuleQuantity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline HRESULT IGroup::AddAction ( LONG_PTR lAction ) {
    HRESULT _hr = raw_AddAction(lAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(92)
inline HRESULT IGroup::GetComponentGroupActions ( LONG_PTR lCompGroupActionsVector ) {
    HRESULT _hr = raw_GetComponentGroupActions(lCompGroupActionsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(93)
inline HRESULT IGroup::GetLinkedCompGroupOverrideReason ( double * pOverrideReasonCd, LONG_PTR lOverrideReasonFreetext ) {
    HRESULT _hr = raw_GetLinkedCompGroupOverrideReason(pOverrideReasonCd, lOverrideReasonFreetext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(94)
inline HRESULT IGroup::SetLinkedCompGroupOverrideReason ( double dOverrideReasonCd, LONG_PTR lOverrideReasonFreetext ) {
    HRESULT _hr = raw_SetLinkedCompGroupOverrideReason(dOverrideReasonCd, lOverrideReasonFreetext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(95)
inline long IGroup::IsAnchoredLinkedComponentGroup ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsAnchoredLinkedComponentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(96)
inline EComponentGroupOverrideReasonSetting IGroup::GetOverrideReasonSetting ( ) {
    EComponentGroupOverrideReasonSetting _result;
    HRESULT _hr = get_OverrideReasonSetting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline void IGroup::PutOverrideReasonSetting ( EComponentGroupOverrideReasonSetting pVal ) {
    HRESULT _hr = put_OverrideReasonSetting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline IDispatchPtr IGroup::GetLinkedComponentGroupAnchor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetLinkedComponentGroupAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(99)
inline HRESULT IGroup::DeleteLastAction ( ) {
    HRESULT _hr = raw_DeleteLastAction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(100)
inline HRESULT IGroup::DeleteAllActions ( ) {
    HRESULT _hr = raw_DeleteAllActions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(101)
inline HRESULT IGroup::ResequenceMembersFromGroup ( int iRemovedIndex ) {
    HRESULT _hr = raw_ResequenceMembersFromGroup(iRemovedIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IComponent wrapper method implementations
//

#pragma implementation_key(102)
inline double IComponent::GetComponentId ( ) {
    double _result = 0;
    HRESULT _hr = get_ComponentId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void IComponent::PutComponentId ( double pVal ) {
    HRESULT _hr = put_ComponentId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline double IComponent::GetClinicalCatCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ClinicalCatCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline void IComponent::PutClinicalCatCd ( double pVal ) {
    HRESULT _hr = put_ClinicalCatCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline double IComponent::GetClinicalSubCatCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ClinicalSubCatCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void IComponent::PutClinicalSubCatCd ( double pVal ) {
    HRESULT _hr = put_ClinicalSubCatCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline double IComponent::GetComponentTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ComponentTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline void IComponent::PutComponentTypeCd ( double pVal ) {
    HRESULT _hr = put_ComponentTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline double IComponent::GetSynonymId ( ) {
    double _result = 0;
    HRESULT _hr = get_SynonymId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline void IComponent::PutSynonymId ( double pVal ) {
    HRESULT _hr = put_SynonymId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline double IComponent::GetCatalogCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CatalogCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void IComponent::PutCatalogCd ( double pVal ) {
    HRESULT _hr = put_CatalogCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(114)
inline double IComponent::GetOeFormatId ( ) {
    double _result = 0;
    HRESULT _hr = get_OeFormatId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(115)
inline void IComponent::PutOeFormatId ( double pVal ) {
    HRESULT _hr = put_OeFormatId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(116)
inline long IComponent::GetSequence ( ) {
    long _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void IComponent::PutSequence ( long pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline long IComponent::GetLinkToPhase ( ) {
    long _result = 0;
    HRESULT _hr = get_LinkToPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline void IComponent::PutLinkToPhase ( long pVal ) {
    HRESULT _hr = put_LinkToPhase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline long IComponent::GetRequired ( ) {
    long _result = 0;
    HRESULT _hr = get_Required(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline void IComponent::PutRequired ( long pVal ) {
    HRESULT _hr = put_Required(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline long IComponent::GetIncluded ( ) {
    long _result = 0;
    HRESULT _hr = get_Included(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline void IComponent::PutIncluded ( long pVal ) {
    HRESULT _hr = put_Included(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline _bstr_t IComponent::GetComponentTypeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentTypeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(125)
inline void IComponent::PutComponentTypeDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ComponentTypeDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline _bstr_t IComponent::GetMnemonic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mnemonic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(127)
inline void IComponent::PutMnemonic ( _bstr_t pVal ) {
    HRESULT _hr = put_Mnemonic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline IUnknownPtr IComponent::GetSentenceCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_SentenceCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(129)
inline HRESULT IComponent::AddOrderSentence ( IDispatch * lpOrderSent ) {
    HRESULT _hr = raw_AddOrderSentence(lpOrderSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(130)
inline double IComponent::GetOCSClinCatCd ( ) {
    double _result = 0;
    HRESULT _hr = get_OCSClinCatCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void IComponent::PutOCSClinCatCd ( double pVal ) {
    HRESULT _hr = put_OCSClinCatCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline double IComponent::GetCatalogTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CatalogTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void IComponent::PutCatalogTypeCd ( double pVal ) {
    HRESULT _hr = put_CatalogTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline double IComponent::GetActivityTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ActivityTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void IComponent::PutActivityTypeCd ( double pVal ) {
    HRESULT _hr = put_ActivityTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline long IComponent::GetPersistentInd ( ) {
    long _result = 0;
    HRESULT _hr = get_PersistentInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline void IComponent::PutPersistentInd ( long pVal ) {
    HRESULT _hr = put_PersistentInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline _bstr_t IComponent::GetNoteText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoteText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(139)
inline void IComponent::PutNoteText ( _bstr_t pVal ) {
    HRESULT _hr = put_NoteText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline ACTION_TYPE IComponent::GetActionType ( ) {
    ACTION_TYPE _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline void IComponent::PutActionType ( ACTION_TYPE pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(142)
inline long IComponent::GetOrderSentModified ( ) {
    long _result = 0;
    HRESULT _hr = get_OrderSentModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(143)
inline void IComponent::PutOrderSentModified ( long pVal ) {
    HRESULT _hr = put_OrderSentModified(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(144)
inline _bstr_t IComponent::GetComponentTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(145)
inline void IComponent::PutComponentTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ComponentTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(146)
inline double IComponent::GetNoteId ( ) {
    double _result = 0;
    HRESULT _hr = get_NoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(147)
inline void IComponent::PutNoteId ( double pVal ) {
    HRESULT _hr = put_NoteId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(148)
inline long IComponent::GetNoteUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_NoteUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void IComponent::PutNoteUpdtCnt ( long pVal ) {
    HRESULT _hr = put_NoteUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline long IComponent::GetUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline void IComponent::PutUpdtCnt ( long pVal ) {
    HRESULT _hr = put_UpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(152)
inline double IComponent::GetActCompId ( ) {
    double _result = 0;
    HRESULT _hr = get_ActCompId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline void IComponent::PutActCompId ( double pVal ) {
    HRESULT _hr = put_ActCompId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(154)
inline double IComponent::GetParentEntId ( ) {
    double _result = 0;
    HRESULT _hr = get_ParentEntId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline void IComponent::PutParentEntId ( double pVal ) {
    HRESULT _hr = put_ParentEntId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline _bstr_t IComponent::GetParentEntName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentEntName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(157)
inline void IComponent::PutParentEntName ( _bstr_t pVal ) {
    HRESULT _hr = put_ParentEntName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline long IComponent::GetInitiated ( ) {
    long _result = 0;
    HRESULT _hr = get_Initiated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void IComponent::PutInitiated ( long pVal ) {
    HRESULT _hr = put_Initiated(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline double IComponent::GetOrdSentId ( ) {
    double _result = 0;
    HRESULT _hr = get_OrdSentId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void IComponent::PutOrdSentId ( double pVal ) {
    HRESULT _hr = put_OrdSentId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline long IComponent::GetActUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_ActUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void IComponent::PutActUpdtCnt ( long pVal ) {
    HRESULT _hr = put_ActUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline double IComponent::GetCompStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CompStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void IComponent::PutCompStatusCd ( double pVal ) {
    HRESULT _hr = put_CompStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline long IComponent::GetOrderSentenceExist ( ) {
    long _result = 0;
    HRESULT _hr = get_OrderSentenceExist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void IComponent::PutOrderSentenceExist ( long pVal ) {
    HRESULT _hr = put_OrderSentenceExist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline HRESULT IComponent::RemoveOrderSentence ( struct IOrderSentence * pIOrderSentence ) {
    HRESULT _hr = raw_RemoveOrderSentence(pIOrderSentence);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(169)
inline HRESULT IComponent::MoveOrderSentence ( struct IOrderSentence * pIOrderSent, VARIANT_BOOL vbMoveUp ) {
    HRESULT _hr = raw_MoveOrderSentence(pIOrderSent, vbMoveUp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline long IComponent::GetIsLastComponent ( ) {
    long _result = 0;
    HRESULT _hr = get_IsLastComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void IComponent::PutIsLastComponent ( long pVal ) {
    HRESULT _hr = put_IsLastComponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline long IComponent::GetRxMask ( ) {
    long _result = 0;
    HRESULT _hr = get_RxMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void IComponent::PutRxMask ( long pVal ) {
    HRESULT _hr = put_RxMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline LONG_PTR IComponent::GetPvOrderObj ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_PvOrderObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline void IComponent::PutPvOrderObj ( LONG_PTR pVal ) {
    HRESULT _hr = put_PvOrderObj(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline HRESULT IComponent::Copy ( struct IComponent * pComponent ) {
    HRESULT _hr = raw_Copy(pComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(177)
inline long IComponent::IsEqual ( struct IComponent * pComponent ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pComponent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline _variant_t IComponent::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(179)
inline double IComponent::GetRefParentEntId ( ) {
    double _result = 0;
    HRESULT _hr = get_RefParentEntId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void IComponent::PutRefParentEntId ( double pVal ) {
    HRESULT _hr = put_RefParentEntId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline _bstr_t IComponent::GetRefParentEntName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefParentEntName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(182)
inline void IComponent::PutRefParentEntName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefParentEntName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline _bstr_t IComponent::GetClinicalCatDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinicalCatDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(184)
inline void IComponent::PutClinicalCatDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ClinicalCatDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(185)
inline _bstr_t IComponent::GetClinicalCatMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinicalCatMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(186)
inline void IComponent::PutClinicalCatMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ClinicalCatMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(187)
inline _bstr_t IComponent::GetClinicalSubCatDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinicalSubCatDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(188)
inline void IComponent::PutClinicalSubCatDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ClinicalSubCatDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(189)
inline _bstr_t IComponent::GetClinicalSubCatMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinicalSubCatMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(190)
inline void IComponent::PutClinicalSubCatMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ClinicalSubCatMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(191)
inline _bstr_t IComponent::GetOCSClinCatDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OCSClinCatDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(192)
inline void IComponent::PutOCSClinCatDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_OCSClinCatDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(193)
inline _bstr_t IComponent::GetOCSClinCatMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OCSClinCatMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(194)
inline void IComponent::PutOCSClinCatMean ( _bstr_t pVal ) {
    HRESULT _hr = put_OCSClinCatMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(195)
inline _bstr_t IComponent::GetCatalogDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CatalogDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(196)
inline void IComponent::PutCatalogDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_CatalogDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline _bstr_t IComponent::GetCatalogMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CatalogMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(198)
inline void IComponent::PutCatalogMean ( _bstr_t pVal ) {
    HRESULT _hr = put_CatalogMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(199)
inline _bstr_t IComponent::GetCatalogTypeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CatalogTypeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(200)
inline void IComponent::PutCatalogTypeDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_CatalogTypeDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(201)
inline _bstr_t IComponent::GetCatalogTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CatalogTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(202)
inline void IComponent::PutCatalogTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_CatalogTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(203)
inline _bstr_t IComponent::GetActivityTypeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityTypeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(204)
inline void IComponent::PutActivityTypeDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ActivityTypeDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline _bstr_t IComponent::GetActivityTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(206)
inline void IComponent::PutActivityTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ActivityTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline _bstr_t IComponent::GetCompStatusDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompStatusDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(208)
inline void IComponent::PutCompStatusDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_CompStatusDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline _bstr_t IComponent::GetCompStatusMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompStatusMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(210)
inline void IComponent::PutCompStatusMean ( _bstr_t pVal ) {
    HRESULT _hr = put_CompStatusMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(211)
inline _bstr_t IComponent::GetOrderSentDisplayAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrderSentDisplayAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(212)
inline double IComponent::GetOrderSentenceIdAt ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_OrderSentenceIdAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline long IComponent::GetOrderSentLoaded ( ) {
    long _result = 0;
    HRESULT _hr = get_OrderSentLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline void IComponent::PutOrderSentLoaded ( long pVal ) {
    HRESULT _hr = put_OrderSentLoaded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(215)
inline long IComponent::GetExistingOrdSentCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_ExistingOrdSentCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline HRESULT IComponent::AddExistingOrderSent ( double dOrdSentId, _bstr_t sSentDisplay ) {
    HRESULT _hr = raw_AddExistingOrderSent(dOrdSentId, sSentDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(217)
inline long IComponent::GetCatalogInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CatalogInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline void IComponent::PutCatalogInd ( long pVal ) {
    HRESULT _hr = put_CatalogInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(219)
inline IDispatchPtr IComponent::GetDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Dispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(220)
inline void IComponent::PutDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_Dispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(221)
inline long IComponent::GetDurationQty ( ) {
    long _result = 0;
    HRESULT _hr = get_DurationQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(222)
inline void IComponent::PutDurationQty ( long pVal ) {
    HRESULT _hr = put_DurationQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(223)
inline double IComponent::GetDurationUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DurationUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(224)
inline void IComponent::PutDurationUnitCd ( double pVal ) {
    HRESULT _hr = put_DurationUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(225)
inline _bstr_t IComponent::GetDurationUnitDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DurationUnitDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(226)
inline void IComponent::PutDurationUnitDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_DurationUnitDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(227)
inline _bstr_t IComponent::GetDurationUnitMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DurationUnitMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(228)
inline void IComponent::PutDurationUnitMean ( _bstr_t pVal ) {
    HRESULT _hr = put_DurationUnitMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline _bstr_t IComponent::GetOutcomeRangeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOutcomeRangeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(230)
inline long IComponent::GetIsFirstComponent ( ) {
    long _result = 0;
    HRESULT _hr = get_IsFirstComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline void IComponent::PutIsFirstComponent ( long pVal ) {
    HRESULT _hr = put_IsFirstComponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(232)
inline long IComponent::GetTZInd ( ) {
    long _result = 0;
    HRESULT _hr = get_TZInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline void IComponent::PutTZInd ( long pVal ) {
    HRESULT _hr = put_TZInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline double IComponent::GetTZOffsetQty ( ) {
    double _result = 0;
    HRESULT _hr = get_TZOffsetQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline void IComponent::PutTZOffsetQty ( double pVal ) {
    HRESULT _hr = put_TZOffsetQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline double IComponent::GetTZOffsetUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_TZOffsetUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline void IComponent::PutTZOffsetUnitCd ( double pVal ) {
    HRESULT _hr = put_TZOffsetUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline _bstr_t IComponent::GetTZOffsetUnitDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TZOffsetUnitDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(239)
inline void IComponent::PutTZOffsetUnitDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_TZOffsetUnitDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline _bstr_t IComponent::GetTZOffsetUnitMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TZOffsetUnitMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(241)
inline void IComponent::PutTZOffsetUnitMean ( _bstr_t pVal ) {
    HRESULT _hr = put_TZOffsetUnitMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(242)
inline _bstr_t IComponent::GetTZMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TZMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(243)
inline void IComponent::PutTZMean ( _bstr_t pVal ) {
    HRESULT _hr = put_TZMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(244)
inline long IComponent::GetTZActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_TZActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline void IComponent::PutTZActiveInd ( long pVal ) {
    HRESULT _hr = put_TZActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(246)
inline IDispatchPtr IComponent::GetIngredientCollection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_IngredientCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(247)
inline HRESULT IComponent::AddIngredient ( IDispatch * lpIngredient ) {
    HRESULT _hr = raw_AddIngredient(lpIngredient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(248)
inline short IComponent::GetOrderableTypeFlag ( ) {
    short _result = 0;
    HRESULT _hr = get_OrderableTypeFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void IComponent::PutOrderableTypeFlag ( short pVal ) {
    HRESULT _hr = put_OrderableTypeFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline IDispatchPtr IComponent::GetParentDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ParentDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(251)
inline void IComponent::PutParentDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_ParentDispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline double IComponent::GetPathwayId ( ) {
    double _result = 0;
    HRESULT _hr = get_PathwayId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void IComponent::PutPathwayId ( double pVal ) {
    HRESULT _hr = put_PathwayId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline long IComponent::GetCleanupOrderInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CleanupOrderInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void IComponent::PutCleanupOrderInd ( long pVal ) {
    HRESULT _hr = put_CleanupOrderInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline long IComponent::GetOutcomeNote ( ) {
    long _result = 0;
    HRESULT _hr = get_OutcomeNote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void IComponent::PutOutcomeNote ( long pVal ) {
    HRESULT _hr = put_OutcomeNote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline _bstr_t IComponent::GetCompLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(259)
inline void IComponent::PutCompLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_CompLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline long IComponent::GetParentActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ParentActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void IComponent::PutParentActiveInd ( long pVal ) {
    HRESULT _hr = put_ParentActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline long IComponent::IsComponentAvailable ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline long IComponent::GetFacilityInd ( ) {
    long _result = 0;
    HRESULT _hr = get_FacilityInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline void IComponent::PutFacilityInd ( long pVal ) {
    HRESULT _hr = put_FacilityInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline _bstr_t IComponent::GetOutcomeTargetDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOutcomeTargetDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(266)
inline IDispatchPtr IComponent::GetGroupCollection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetGroupCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(267)
inline HRESULT IComponent::AddGroup ( struct IGroup * pIGroup ) {
    HRESULT _hr = raw_AddGroup(pIGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(268)
inline int IComponent::GetGroupCount ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetGroupCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline HRESULT IComponent::RemoveGroup ( struct IGroup * pGroup ) {
    HRESULT _hr = raw_RemoveGroup(pGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(270)
inline long IComponent::GetAllFacilityAccessInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AllFacilityAccessInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void IComponent::PutAllFacilityAccessInd ( long pVal ) {
    HRESULT _hr = put_AllFacilityAccessInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline _variant_t IComponent::GetFacilityAccessList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FacilityAccessList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(273)
inline void IComponent::PutFacilityAccessList ( const _variant_t & pVal ) {
    HRESULT _hr = put_FacilityAccessList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(274)
inline long IComponent::GetFacilityAccessListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FacilityAccessListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline double IComponent::GetStartOffsetUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_StartOffsetUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void IComponent::PutStartOffsetUnitCd ( double pVal ) {
    HRESULT _hr = put_StartOffsetUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline _bstr_t IComponent::GetStartOffsetUnitMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartOffsetUnitMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(278)
inline void IComponent::PutStartOffsetUnitMean ( _bstr_t pVal ) {
    HRESULT _hr = put_StartOffsetUnitMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(279)
inline _bstr_t IComponent::GetStartOffsetUnitDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartOffsetUnitDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(280)
inline void IComponent::PutStartOffsetUnitDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_StartOffsetUnitDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline double IComponent::GetStartOffsetQty ( ) {
    double _result = 0;
    HRESULT _hr = get_StartOffsetQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void IComponent::PutStartOffsetQty ( double pVal ) {
    HRESULT _hr = put_StartOffsetQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline long IComponent::ValidateStartOffsetWithPhase ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateStartOffsetWithPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline long IComponent::ValidateStartOffsetQuantity ( double dOffsetQty, long bTZ ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateStartOffsetQuantity(dOffsetQty, bTZ, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline long IComponent::ValidateStartOffsetUnit ( double dCodeVal, long bTZ ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateStartOffsetUnit(dCodeVal, bTZ, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline long IComponent::GetImported ( ) {
    long _result = 0;
    HRESULT _hr = get_Imported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void IComponent::PutImported ( long pVal ) {
    HRESULT _hr = put_Imported(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline long IComponent::HasOrderTimedPriority ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasOrderTimedPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline long IComponent::HasOrderOffsetPriority ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasOrderOffsetPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline _bstr_t IComponent::GetOrderOffsetPriorityValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOrderOffsetPriorityValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(291)
inline _bstr_t IComponent::GetXMLOrderDetail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XMLOrderDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(292)
inline void IComponent::PutXMLOrderDetail ( _bstr_t pVal ) {
    HRESULT _hr = put_XMLOrderDetail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline long IComponent::GetOrderDetailModifyInd ( ) {
    long _result = 0;
    HRESULT _hr = get_OrderDetailModifyInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void IComponent::PutOrderDetailModifyInd ( long pVal ) {
    HRESULT _hr = put_OrderDetailModifyInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline double IComponent::GetLongBlobId ( ) {
    double _result = 0;
    HRESULT _hr = get_LongBlobId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline void IComponent::PutLongBlobId ( double pVal ) {
    HRESULT _hr = put_LongBlobId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline long IComponent::GetRemoveBlobInd ( ) {
    long _result = 0;
    HRESULT _hr = get_RemoveBlobInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void IComponent::PutRemoveBlobInd ( long pVal ) {
    HRESULT _hr = put_RemoveBlobInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline _bstr_t IComponent::GetSubPhaseDisplayDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubPhaseDisplayDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline void IComponent::PutSubPhaseDisplayDesc ( _bstr_t pVal ) {
    HRESULT _hr = put_SubPhaseDisplayDesc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline _bstr_t IComponent::GetSubPhaseDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubPhaseDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(302)
inline void IComponent::PutSubPhaseDesc ( _bstr_t pVal ) {
    HRESULT _hr = put_SubPhaseDesc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline IDispatchPtr IComponent::GetSubphaseDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SubphaseDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(304)
inline void IComponent::PutSubphaseDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_SubphaseDispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline double IComponent::GetParentPlanCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetParentPlanCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline double IComponent::GetCPGroupNbr ( ) {
    double _result = 0;
    HRESULT _hr = get_CPGroupNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline void IComponent::PutCPGroupNbr ( double pVal ) {
    HRESULT _hr = put_CPGroupNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(308)
inline _bstr_t IComponent::GetCPGroupDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CPGroupDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(309)
inline void IComponent::PutCPGroupDesc ( _bstr_t pVal ) {
    HRESULT _hr = put_CPGroupDesc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(310)
inline long IComponent::GetIsCPGroupMember ( ) {
    long _result = 0;
    HRESULT _hr = get_IsCPGroupMember(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline long IComponent::GetChemoInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ChemoInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void IComponent::PutChemoInd ( long pVal ) {
    HRESULT _hr = put_ChemoInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline long IComponent::GetChemoRelatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ChemoRelatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void IComponent::PutChemoRelatedInd ( long pVal ) {
    HRESULT _hr = put_ChemoRelatedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline long IComponent::GetCrossPhaseGroupInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CrossPhaseGroupInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void IComponent::PutCrossPhaseGroupInd ( long pVal ) {
    HRESULT _hr = put_CrossPhaseGroupInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline IGroupPtr IComponent::GetCPGroupPtr ( ) {
    struct IGroup * _result = 0;
    HRESULT _hr = raw_GetCPGroupPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupPtr(_result, false);
}

#pragma implementation_key(318)
inline long IComponent::GetInclExclChangeInd ( ) {
    long _result = 0;
    HRESULT _hr = get_InclExclChangeInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void IComponent::PutInclExclChangeInd ( long pVal ) {
    HRESULT _hr = put_InclExclChangeInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline long IComponent::GetDxPropagationNeeded ( ) {
    long _result = 0;
    HRESULT _hr = get_DxPropagationNeeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline void IComponent::PutDxPropagationNeeded ( long pVal ) {
    HRESULT _hr = put_DxPropagationNeeded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline long IComponent::GetProActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ProActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void IComponent::PutProActiveInd ( long pVal ) {
    HRESULT _hr = put_ProActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline _bstr_t IComponent::GetHnaOrderMnemonic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HnaOrderMnemonic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(325)
inline void IComponent::PutHnaOrderMnemonic ( _bstr_t pVal ) {
    HRESULT _hr = put_HnaOrderMnemonic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(326)
inline _bstr_t IComponent::GetCKI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CKI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(327)
inline void IComponent::PutCKI ( _bstr_t pVal ) {
    HRESULT _hr = put_CKI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline long IComponent::GetRefTextMask ( ) {
    long _result = 0;
    HRESULT _hr = get_RefTextMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(329)
inline void IComponent::PutRefTextMask ( long pVal ) {
    HRESULT _hr = put_RefTextMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline long IComponent::IsCompCPPropagationAvail ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsCompCPPropagationAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline long IComponent::IsGroupCPPropagationAvail ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsGroupCPPropagationAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline long IComponent::IsProActiveEvaluationAllowed ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsProActiveEvaluationAllowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline PLAN_REF_TEXT IComponent::GetReferenceTextAvailable ( ) {
    PLAN_REF_TEXT _result;
    HRESULT _hr = get_ReferenceTextAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(334)
inline void IComponent::PutReferenceTextAvailable ( PLAN_REF_TEXT pVal ) {
    HRESULT _hr = put_ReferenceTextAvailable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline long IComponent::HasNormalizedDoseUnit ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasNormalizedDoseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline long IComponent::HasResolvedNormalizedDoseUnit ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasResolvedNormalizedDoseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline HRESULT IComponent::RemoveIngredientCollection ( ) {
    HRESULT _hr = raw_RemoveIngredientCollection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(338)
inline _bstr_t IComponent::GetDisplayMnemonic ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDisplayMnemonic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(339)
inline long IComponent::GetHighAlertAvail ( ) {
    long _result = 0;
    HRESULT _hr = get_HighAlertAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void IComponent::PutHighAlertAvail ( long pVal ) {
    HRESULT _hr = put_HighAlertAvail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline long IComponent::GetAutoDisplayHighAlert ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoDisplayHighAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(342)
inline void IComponent::PutAutoDisplayHighAlert ( long pVal ) {
    HRESULT _hr = put_AutoDisplayHighAlert(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline _bstr_t IComponent::GetHighAlertText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HighAlertText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(344)
inline void IComponent::PutHighAlertText ( _bstr_t pVal ) {
    HRESULT _hr = put_HighAlertText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline IDispatchPtr IComponent::GetSourceOrderStartDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SourceOrderStartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(346)
inline void IComponent::PutSourceOrderStartDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_SourceOrderStartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline long IComponent::GetIsCopyForward ( ) {
    long _result = 0;
    HRESULT _hr = get_IsCopyForward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline void IComponent::PutIsCopyForward ( long pVal ) {
    HRESULT _hr = put_IsCopyForward(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline IDispatchPtr IComponent::GetCopyForwardOrdSent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CopyForwardOrdSent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(350)
inline void IComponent::PutCopyForwardOrdSent ( IDispatch * ppVal ) {
    HRESULT _hr = put_CopyForwardOrdSent(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline double IComponent::GetDoseInformationHistoryBlobId ( ) {
    double _result = 0;
    HRESULT _hr = get_DoseInformationHistoryBlobId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(352)
inline void IComponent::PutDoseInformationHistoryBlobId ( double pVal ) {
    HRESULT _hr = put_DoseInformationHistoryBlobId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(353)
inline _bstr_t IComponent::GetDoseInformationHistory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DoseInformationHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(354)
inline void IComponent::PutDoseInformationHistory ( _bstr_t pVal ) {
    HRESULT _hr = put_DoseInformationHistory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(355)
inline long IComponent::HasRoutingInfo ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasRoutingInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(356)
inline long IComponent::IsCopyForwardCompCPGPropagationAvail ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsCopyForwardCompCPGPropagationAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline LONG_PTR IComponent::GetXMLOrderDetailPtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetXMLOrderDetailPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline LONG_PTR IComponent::GetDoseInformationHistoryPtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetDoseInformationHistoryPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline long IComponent::GetSkipped ( ) {
    long _result = 0;
    HRESULT _hr = get_Skipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline void IComponent::PutSkipped ( long pVal ) {
    HRESULT _hr = put_Skipped(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(361)
inline IDispatchPtr IComponent::GetUserRequestedStartDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UserRequestedStartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(362)
inline void IComponent::PutUserRequestedStartDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UserRequestedStartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(363)
inline _bstr_t IComponent::GetSystemRequestedStartString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SystemRequestedStartString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(364)
inline void IComponent::PutSystemRequestedStartString ( _bstr_t pVal ) {
    HRESULT _hr = put_SystemRequestedStartString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(365)
inline long IComponent::IsTaperComponent ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsTaperComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline long IComponent::GetDefaultOrderSentenceInd ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultOrderSentenceInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline void IComponent::PutDefaultOrderSentenceInd ( long pVal ) {
    HRESULT _hr = put_DefaultOrderSentenceInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline EMissingRequiredDetails IComponent::GetMissingRequiredDetails ( ) {
    EMissingRequiredDetails _result;
    HRESULT _hr = get_MissingRequiredDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline void IComponent::PutMissingRequiredDetails ( EMissingRequiredDetails pVal ) {
    HRESULT _hr = put_MissingRequiredDetails(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(370)
inline LONG_PTR IComponent::GetOrderProposal ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_OrderProposal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline void IComponent::PutOrderProposal ( LONG_PTR pVal ) {
    HRESULT _hr = put_OrderProposal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(372)
inline long IComponent::HasBeenModified ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasBeenModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(373)
inline double IComponent::GetOldProposalId ( ) {
    double _result = 0;
    HRESULT _hr = get_OldProposalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void IComponent::PutOldProposalId ( double pVal ) {
    HRESULT _hr = put_OldProposalId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline long IComponent::GetInactivateBlobInd ( ) {
    long _result = 0;
    HRESULT _hr = get_InactivateBlobInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void IComponent::PutInactivateBlobInd ( long pVal ) {
    HRESULT _hr = put_InactivateBlobInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline HRESULT IComponent::EvaluateMissingRequiredDetails ( ) {
    HRESULT _hr = raw_EvaluateMissingRequiredDetails();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(378)
inline double IComponent::GetOrderId ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetOrderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline IDispatchPtr IComponent::GetUpdtDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UpdtDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(380)
inline void IComponent::PutUpdtDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UpdtDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline long IComponent::GetSchedulableInd ( ) {
    long _result = 0;
    HRESULT _hr = get_SchedulableInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void IComponent::PutSchedulableInd ( long pVal ) {
    HRESULT _hr = put_SchedulableInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline long IComponent::CalculateAnchorComponentStartDateTime ( IDispatch * * pAnchorComponentStartDateTime ) {
    long _result = 0;
    HRESULT _hr = raw_CalculateAnchorComponentStartDateTime(pAnchorComponentStartDateTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline long IComponent::CanUnlockStartDateTime ( ) {
    long _result = 0;
    HRESULT _hr = raw_CanUnlockStartDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(385)
inline long IComponent::GetIntermittentInd ( ) {
    long _result = 0;
    HRESULT _hr = get_IntermittentInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(386)
inline void IComponent::PutIntermittentInd ( long pVal ) {
    HRESULT _hr = put_IntermittentInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline long IComponent::GetExcludeOnReset ( ) {
    long _result = 0;
    HRESULT _hr = get_ExcludeOnReset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void IComponent::PutExcludeOnReset ( long pVal ) {
    HRESULT _hr = put_ExcludeOnReset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(389)
inline long IComponent::GetTolerance ( ) {
    long _result = 0;
    HRESULT _hr = get_Tolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline void IComponent::PutTolerance ( long pVal ) {
    HRESULT _hr = put_Tolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(391)
inline double IComponent::GetToleranceUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ToleranceUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void IComponent::PutToleranceUnitCd ( double pVal ) {
    HRESULT _hr = put_ToleranceUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline _bstr_t IComponent::GetDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(394)
inline double IComponent::GetProtocolComponentGroupNbr ( ) {
    double _result = 0;
    HRESULT _hr = get_ProtocolComponentGroupNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void IComponent::PutProtocolComponentGroupNbr ( double pVal ) {
    HRESULT _hr = put_ProtocolComponentGroupNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline long IComponent::GetHasExplodedChildren ( ) {
    long _result = 0;
    HRESULT _hr = get_HasExplodedChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void IComponent::PutHasExplodedChildren ( long pVal ) {
    HRESULT _hr = put_HasExplodedChildren(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline long IComponent::GetRejectProtocolReviewInd ( ) {
    long _result = 0;
    HRESULT _hr = get_RejectProtocolReviewInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void IComponent::PutRejectProtocolReviewInd ( long pVal ) {
    HRESULT _hr = put_RejectProtocolReviewInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline IDispatchPtr IComponent::GetComponentGroupComponentDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ComponentGroupComponentDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(401)
inline IDispatchPtr IComponent::GetComponentGroupDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ComponentGroupDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(402)
inline long IComponent::IsComponentGroupMember ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentGroupMember(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline long IComponent::GetIncludedInComponentGroup ( ) {
    long _result = 0;
    HRESULT _hr = get_IncludedInComponentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void IComponent::PutIncludedInComponentGroup ( long pVal ) {
    HRESULT _hr = put_IncludedInComponentGroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline int IComponent::GetComponentGroupMemberIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_ComponentGroupMemberIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline void IComponent::PutComponentGroupMemberIndex ( int pVal ) {
    HRESULT _hr = put_ComponentGroupMemberIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline long IComponent::GetHasExcludedComponent ( ) {
    long _result = 0;
    HRESULT _hr = get_HasExcludedComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline void IComponent::PutHasExcludedComponent ( long pVal ) {
    HRESULT _hr = put_HasExcludedComponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(409)
inline _bstr_t IComponent::GetDefaultOrderSentenceRxTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDefaultOrderSentenceRxTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(410)
inline long IComponent::GetForceExpand ( ) {
    long _result = 0;
    HRESULT _hr = get_ForceExpand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void IComponent::PutForceExpand ( long pVal ) {
    HRESULT _hr = put_ForceExpand(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline long IComponent::GetForceDisplay ( ) {
    long _result = 0;
    HRESULT _hr = get_ForceDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void IComponent::PutForceDisplay ( long pVal ) {
    HRESULT _hr = put_ForceDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline _bstr_t IComponent::GetUUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(415)
inline void IComponent::PutUUID ( _bstr_t pVal ) {
    HRESULT _hr = put_UUID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline HRESULT IComponent::AddFacilityToAccessList ( double dFacilityCd ) {
    HRESULT _hr = raw_AddFacilityToAccessList(dFacilityCd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(417)
inline double IComponent::GetAlternateSelectionCategoryId ( ) {
    double _result = 0;
    HRESULT _hr = get_AlternateSelectionCategoryId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(418)
inline void IComponent::PutAlternateSelectionCategoryId ( double pVal ) {
    HRESULT _hr = put_AlternateSelectionCategoryId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(419)
inline HRESULT IComponent::PutCanUnlockStartDateTimeCached ( long newVal ) {
    HRESULT _hr = raw_PutCanUnlockStartDateTimeCached(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(420)
inline long IComponent::GetNoteRowBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_NoteRowBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline void IComponent::PutNoteRowBackgroundColor ( long pVal ) {
    HRESULT _hr = put_NoteRowBackgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline long IComponent::GetNoteRowTextColor ( ) {
    long _result = 0;
    HRESULT _hr = get_NoteRowTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(423)
inline void IComponent::PutNoteRowTextColor ( long pVal ) {
    HRESULT _hr = put_NoteRowTextColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(424)
inline HRESULT IComponent::ApplyComponentModification ( LONG_PTR lComponentModification ) {
    HRESULT _hr = raw_ApplyComponentModification(lComponentModification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(425)
inline long IComponent::IsComponentTimeZeroAcrossTreatmentPeriodsInComponentModifications ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentTimeZeroAcrossTreatmentPeriodsInComponentModifications(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline long IComponent::GetLinkedToPhaseStartDateTime ( ) {
    long _result = 0;
    HRESULT _hr = get_LinkedToPhaseStartDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline void IComponent::PutLinkedToPhaseStartDateTime ( long pVal ) {
    HRESULT _hr = put_LinkedToPhaseStartDateTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline long IComponent::HasComponentOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasComponentOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline short IComponent::GetLockTargetDoseFlag ( ) {
    short _result = 0;
    HRESULT _hr = get_LockTargetDoseFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline void IComponent::PutLockTargetDoseFlag ( short pVal ) {
    HRESULT _hr = put_LockTargetDoseFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(431)
inline long IComponent::IsTimeZero ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsTimeZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline long IComponent::HasTimeZeroOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasTimeZeroOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline long IComponent::IsTimeZeroLinked ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsTimeZeroLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline long IComponent::IsLinkedComponentGroupMember ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsLinkedComponentGroupMember(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline long IComponent::IsAnchorComponent ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsAnchorComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(436)
inline IDispatchPtr IComponent::GetGroupsByTypeMean ( _bstr_t bstrTypeMean ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetGroupsByTypeMean(bstrTypeMean, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(437)
inline long IComponent::IsDoTComponent ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsDoTComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline _bstr_t IComponent::GetPlainNoteText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlainNoteText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(439)
inline long IComponent::IsHTMLNote ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsHTMLNote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline long IComponent::HasPriorityDefaultStartTimeOffsetAsNow ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasPriorityDefaultStartTimeOffsetAsNow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline _bstr_t IComponent::GetOrderSentFilterDisplayAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrderSentFilterDisplayAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(442)
inline HRESULT IComponent::AddExistingOrderSentence ( double dOrdSentId, _bstr_t sSentDisplay, _bstr_t sSentFilterDisplay ) {
    HRESULT _hr = raw_AddExistingOrderSentence(dOrdSentId, sSentDisplay, sSentFilterDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(443)
inline double IComponent::GetLastAddedOrderId ( ) {
    double _result = 0;
    HRESULT _hr = get_LastAddedOrderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline void IComponent::PutLastAddedOrderId ( double pVal ) {
    HRESULT _hr = put_LastAddedOrderId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(445)
inline void IComponent::PutIsCancelDCPendingOnProtocol ( long pVal ) {
    HRESULT _hr = put_IsCancelDCPendingOnProtocol(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(446)
inline long IComponent::GetIsCancelDCPendingOnProtocol ( ) {
    long _result = 0;
    HRESULT _hr = get_IsCancelDCPendingOnProtocol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline long IComponent::GetIsLinkedToPrecomponentOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_IsLinkedToPrecomponentOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(448)
inline void IComponent::PutIsLinkedToPrecomponentOrder ( long pVal ) {
    HRESULT _hr = put_IsLinkedToPrecomponentOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(449)
inline long IComponent::IsDiagnosisAssociationSupressed ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsDiagnosisAssociationSupressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(450)
inline double IComponent::GetOriginatingEncounterId ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginatingEncounterId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void IComponent::PutOriginatingEncounterId ( double pVal ) {
    HRESULT _hr = put_OriginatingEncounterId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline long IComponent::GetModifiedTZRelationInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ModifiedTZRelationInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline void IComponent::PutModifiedTZRelationInd ( long pVal ) {
    HRESULT _hr = put_ModifiedTZRelationInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline HRESULT IComponent::LoadDoseInformationHistory ( ) {
    HRESULT _hr = raw_LoadDoseInformationHistory();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(455)
inline long IComponent::DetermineValidIVSequenceOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_DetermineValidIVSequenceOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline EComponentDiscontinueTypeFlag IComponent::GetDiscontinueTypeFlag ( ) {
    EComponentDiscontinueTypeFlag _result;
    HRESULT _hr = get_DiscontinueTypeFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void IComponent::PutDiscontinueTypeFlag ( EComponentDiscontinueTypeFlag pVal ) {
    HRESULT _hr = put_DiscontinueTypeFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline long IComponent::GetIsExcludeFromCopyForward ( ) {
    long _result = 0;
    HRESULT _hr = get_IsExcludeFromCopyForward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline void IComponent::PutIsExcludeFromCopyForward ( long pVal ) {
    HRESULT _hr = put_IsExcludeFromCopyForward(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline long IComponent::GetExternalActivate ( ) {
    long _result = 0;
    HRESULT _hr = get_ExternalActivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void IComponent::PutExternalActivate ( long pVal ) {
    HRESULT _hr = put_ExternalActivate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline LONG_PTR IComponent::GetAuthorizationDetails ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_AuthorizationDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void IComponent::PutAuthorizationDetails ( LONG_PTR pVal ) {
    HRESULT _hr = put_AuthorizationDetails(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline HRESULT IComponent::UpdateDefaultComponentOrderSentence ( ) {
    HRESULT _hr = raw_UpdateDefaultComponentOrderSentence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(465)
inline double IComponent::GetPersonId ( ) {
    double _result = 0;
    HRESULT _hr = get_PersonId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(466)
inline void IComponent::PutPersonId ( double pVal ) {
    HRESULT _hr = put_PersonId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(467)
inline HRESULT IComponent::ResetRedactedComponentDetails ( ) {
    HRESULT _hr = raw_ResetRedactedComponentDetails();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(468)
inline long IComponent::IsComponentRestricted ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentRestricted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline long IComponent::HasRestrictedDoTOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasRestrictedDoTOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(470)
inline HRESULT IComponent::SetHasRestrictedDoTOrder ( long pVal ) {
    HRESULT _hr = raw_SetHasRestrictedDoTOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPlanAction wrapper method implementations
//

#pragma implementation_key(471)
inline short IPlanAction::GetActionSequence ( ) {
    short _result = 0;
    HRESULT _hr = get_ActionSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(472)
inline void IPlanAction::PutActionSequence ( short pVal ) {
    HRESULT _hr = put_ActionSequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(473)
inline double IPlanAction::GetActionCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline void IPlanAction::PutActionCd ( double pVal ) {
    HRESULT _hr = put_ActionCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(475)
inline _bstr_t IPlanAction::GetActionDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(476)
inline void IPlanAction::PutActionDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline double IPlanAction::GetPlanStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline void IPlanAction::PutPlanStatusCd ( double pVal ) {
    HRESULT _hr = put_PlanStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline _bstr_t IPlanAction::GetPlanStatusDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanStatusDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(480)
inline void IPlanAction::PutPlanStatusDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanStatusDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline DATE IPlanAction::GetActionDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ActionDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void IPlanAction::PutActionDtTm ( DATE pVal ) {
    HRESULT _hr = put_ActionDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline _bstr_t IPlanAction::GetActionPrsnlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionPrsnlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(484)
inline void IPlanAction::PutActionPrsnlName ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionPrsnlName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline HRESULT IPlanAction::Copy ( struct IPlanAction * pPlanAction ) {
    HRESULT _hr = raw_Copy(pPlanAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(486)
inline double IPlanAction::GetCommunicationTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CommunicationTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline void IPlanAction::PutCommunicationTypeCd ( double pVal ) {
    HRESULT _hr = put_CommunicationTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(488)
inline _bstr_t IPlanAction::GetProviderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(489)
inline void IPlanAction::PutProviderName ( _bstr_t pVal ) {
    HRESULT _hr = put_ProviderName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(490)
inline double IPlanAction::GetProviderId ( ) {
    double _result = 0;
    HRESULT _hr = get_ProviderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(491)
inline void IPlanAction::PutProviderId ( double pVal ) {
    HRESULT _hr = put_ProviderId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline _bstr_t IPlanAction::GetCommunicationTypeDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommunicationTypeDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(493)
inline void IPlanAction::PutCommunicationTypeDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_CommunicationTypeDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline _bstr_t IPlanAction::GetActionMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(495)
inline void IPlanAction::PutActionMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline IDispatchPtr IPlanAction::GetUTCActionDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCActionDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(497)
inline void IPlanAction::PutUTCActionDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCActionDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline _bstr_t IPlanAction::GetActionComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(499)
inline void IPlanAction::PutActionComment ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline double IPlanAction::GetActionPrsnlId ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionPrsnlId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(501)
inline void IPlanAction::PutActionPrsnlId ( double pVal ) {
    HRESULT _hr = put_ActionPrsnlId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline long IPlanAction::GetActionPrsnlPhysInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActionPrsnlPhysInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline void IPlanAction::PutActionPrsnlPhysInd ( long pVal ) {
    HRESULT _hr = put_ActionPrsnlPhysInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(504)
inline double IPlanAction::GetActionReasonCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionReasonCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline void IPlanAction::PutActionReasonCd ( double pVal ) {
    HRESULT _hr = put_ActionReasonCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline _bstr_t IPlanAction::GetActionReasonDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionReasonDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(507)
inline void IPlanAction::PutActionReasonDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionReasonDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(508)
inline HRESULT IPlanAction::GetPathwayNotifications ( LONG_PTR larrPathwayNotifications ) {
    HRESULT _hr = raw_GetPathwayNotifications(larrPathwayNotifications);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(509)
inline HRESULT IPlanAction::PutPathwayNotifications ( LONG_PTR larrPathwayNotifications ) {
    HRESULT _hr = raw_PutPathwayNotifications(larrPathwayNotifications);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IReview wrapper method implementations
//

#pragma implementation_key(510)
inline IDispatchPtr IReview::GetReviewDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ReviewDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(511)
inline void IReview::PutReviewDtTm ( IDispatch * ppReviewDtTm ) {
    HRESULT _hr = put_ReviewDtTm(ppReviewDtTm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline void IReview::PutSignedStatus ( EPowerPlanReviewStatus pSignedStatus ) {
    HRESULT _hr = put_SignedStatus(pSignedStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline EPowerPlanReviewStatus IReview::GetSignedStatus ( ) {
    EPowerPlanReviewStatus _result;
    HRESULT _hr = get_SignedStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void IReview::PutPendingStatus ( EPowerPlanReviewStatus pPendingStatus ) {
    HRESULT _hr = put_PendingStatus(pPendingStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline EPowerPlanReviewStatus IReview::GetPendingStatus ( ) {
    EPowerPlanReviewStatus _result;
    HRESULT _hr = get_PendingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline void IReview::PutType ( EPowerPlanReviewType pType ) {
    HRESULT _hr = put_Type(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline EPowerPlanReviewType IReview::GetType ( ) {
    EPowerPlanReviewType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline HRESULT IReview::Copy ( struct IReview * pReview ) {
    HRESULT _hr = raw_Copy(pReview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(519)
inline long IReview::IsEqual ( struct IReview * pIReview ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pIReview, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void IReview::PutToPersonnelId ( double pToPersonnelId ) {
    HRESULT _hr = put_ToPersonnelId(pToPersonnelId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline double IReview::GetToPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_ToPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline void IReview::PutToPersonnelName ( _bstr_t pToPersonnelName ) {
    HRESULT _hr = put_ToPersonnelName(pToPersonnelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline _bstr_t IReview::GetToPersonnelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToPersonnelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(524)
inline void IReview::PutToPoolId ( double pToPoolId ) {
    HRESULT _hr = put_ToPoolId(pToPoolId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline double IReview::GetToPoolId ( ) {
    double _result = 0;
    HRESULT _hr = get_ToPoolId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(526)
inline void IReview::PutToPoolName ( _bstr_t pToPoolName ) {
    HRESULT _hr = put_ToPoolName(pToPoolName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline _bstr_t IReview::GetToPoolName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToPoolName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(528)
inline void IReview::PutFromPersonnelId ( double pFromPersonnelId ) {
    HRESULT _hr = put_FromPersonnelId(pFromPersonnelId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(529)
inline double IReview::GetFromPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_FromPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(530)
inline void IReview::PutFromPersonnelName ( _bstr_t pFromPersonnelName ) {
    HRESULT _hr = put_FromPersonnelName(pFromPersonnelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(531)
inline _bstr_t IReview::GetFromPersonnelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromPersonnelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(532)
inline void IReview::PutReasonCd ( double pReasonCd ) {
    HRESULT _hr = put_ReasonCd(pReasonCd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline double IReview::GetReasonCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ReasonCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void IReview::PutReasonComment ( _bstr_t pReasonComment ) {
    HRESULT _hr = put_ReasonComment(pReasonComment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(535)
inline _bstr_t IReview::GetReasonComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReasonComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(536)
inline void IReview::PutActionPersonnelId ( double pActionPersonnelId ) {
    HRESULT _hr = put_ActionPersonnelId(pActionPersonnelId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline double IReview::GetActionPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void IReview::PutActionPersonnelName ( _bstr_t pActionPersonnelName ) {
    HRESULT _hr = put_ActionPersonnelName(pActionPersonnelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline _bstr_t IReview::GetActionPersonnelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionPersonnelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPhase wrapper method implementations
//

#pragma implementation_key(540)
inline double IPhase::GetPlanCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void IPhase::PutPlanCatalogId ( double pVal ) {
    HRESULT _hr = put_PlanCatalogId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline double IPhase::GetDurationUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DurationUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void IPhase::PutDurationUnitCd ( double pVal ) {
    HRESULT _hr = put_DurationUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline long IPhase::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void IPhase::PutDuration ( long pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(546)
inline _bstr_t IPhase::GetDurationDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DurationDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(547)
inline void IPhase::PutDurationDesc ( _bstr_t pVal ) {
    HRESULT _hr = put_DurationDesc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(548)
inline _bstr_t IPhase::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(549)
inline void IPhase::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline long IPhase::GetSequence ( ) {
    long _result = 0;
    HRESULT _hr = get_Sequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline void IPhase::PutSequence ( long pVal ) {
    HRESULT _hr = put_Sequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(552)
inline IUnknownPtr IPhase::GetComponentCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ComponentCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(553)
inline HRESULT IPhase::AddComponent ( IDispatch * lpComponent ) {
    HRESULT _hr = raw_AddComponent(lpComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(554)
inline _variant_t IPhase::GetPreceedPhases ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreceedPhases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(555)
inline void IPhase::PutPreceedPhases ( const _variant_t & pVal ) {
    HRESULT _hr = put_PreceedPhases(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline _variant_t IPhase::GetSucceedPhases ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SucceedPhases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(557)
inline void IPhase::PutSucceedPhases ( const _variant_t & pVal ) {
    HRESULT _hr = put_SucceedPhases(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline long IPhase::GetFirstPhase ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(559)
inline void IPhase::PutFirstPhase ( long pVal ) {
    HRESULT _hr = put_FirstPhase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline ACTION_TYPE IPhase::GetActionType ( ) {
    ACTION_TYPE _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline void IPhase::PutActionType ( ACTION_TYPE pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline long IPhase::GetUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline void IPhase::PutUpdtCnt ( long pVal ) {
    HRESULT _hr = put_UpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline double IPhase::GetPersonId ( ) {
    double _result = 0;
    HRESULT _hr = get_PersonId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(565)
inline void IPhase::PutPersonId ( double pVal ) {
    HRESULT _hr = put_PersonId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline double IPhase::GetEncntrId ( ) {
    double _result = 0;
    HRESULT _hr = get_EncntrId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline void IPhase::PutEncntrId ( double pVal ) {
    HRESULT _hr = put_EncntrId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline double IPhase::GetPlanId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void IPhase::PutPlanId ( double pVal ) {
    HRESULT _hr = put_PlanId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline double IPhase::GetPlanStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline void IPhase::PutPlanStatusCd ( double pVal ) {
    HRESULT _hr = put_PlanStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline HRESULT IPhase::Resequence ( struct IComponent * pComponent, VARIANT_BOOL bMoveUp ) {
    HRESULT _hr = raw_Resequence(pComponent, bMoveUp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(573)
inline HRESULT IPhase::RemoveComponent ( struct IComponent * pComponent ) {
    HRESULT _hr = raw_RemoveComponent(pComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(574)
inline long IPhase::GetInitiated ( ) {
    long _result = 0;
    HRESULT _hr = get_Initiated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void IPhase::PutInitiated ( long pVal ) {
    HRESULT _hr = put_Initiated(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline DATE IPhase::GetStartDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void IPhase::PutStartDtTm ( DATE pVal ) {
    HRESULT _hr = put_StartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline DATE IPhase::GetCalcEndDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CalcEndDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void IPhase::PutCalcEndDtTm ( DATE pVal ) {
    HRESULT _hr = put_CalcEndDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline long IPhase::GetActUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_ActUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void IPhase::PutActUpdtCnt ( long pVal ) {
    HRESULT _hr = put_ActUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline double IPhase::GetCalcPlanStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CalcPlanStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void IPhase::PutCalcPlanStatusCd ( double pVal ) {
    HRESULT _hr = put_CalcPlanStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline IUnknownPtr IPhase::get_RemovedComponentCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_get_RemovedComponentCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(585)
inline HRESULT IPhase::AddRemovedComponent ( IDispatch * lpComponent ) {
    HRESULT _hr = raw_AddRemovedComponent(lpComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(586)
inline HRESULT IPhase::MoveClinSubCategory ( double dSourceCd, double dDestCd, double dClinicalCatCd ) {
    HRESULT _hr = raw_MoveClinSubCategory(dSourceCd, dDestCd, dClinicalCatCd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(587)
inline HRESULT IPhase::Copy ( struct IPhase * pPhase ) {
    HRESULT _hr = raw_Copy(pPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(588)
inline long IPhase::IsEqual ( struct IPhase * pPhase ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pPhase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline _variant_t IPhase::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(590)
inline IComponentPtr IPhase::FindOrderComponent ( LONG_PTR hPvOrderObj ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindOrderComponent(hPvOrderObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(591)
inline PLAN_TYPE IPhase::GetPhaseType ( ) {
    PLAN_TYPE _result;
    HRESULT _hr = get_PhaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline void IPhase::PutPhaseType ( PLAN_TYPE pVal ) {
    HRESULT _hr = put_PhaseType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline _bstr_t IPhase::GetPlanStatusDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanStatusDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(594)
inline void IPhase::PutPlanStatusDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanStatusDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline _bstr_t IPhase::GetPlanStatusMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanStatusMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(596)
inline void IPhase::PutPlanStatusMean ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanStatusMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline _bstr_t IPhase::GetCalcPlanStatusDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcPlanStatusDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(598)
inline void IPhase::PutCalcPlanStatusDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcPlanStatusDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline _bstr_t IPhase::GetCalcPlanStatusMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalcPlanStatusMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(600)
inline void IPhase::PutCalcPlanStatusMean ( _bstr_t pVal ) {
    HRESULT _hr = put_CalcPlanStatusMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline _bstr_t IPhase::GetDurationUnitMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DurationUnitMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(602)
inline void IPhase::PutDurationUnitMean ( _bstr_t pVal ) {
    HRESULT _hr = put_DurationUnitMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(603)
inline HRESULT IPhase::AddPlanAction ( struct IPlanAction * pPlanAction ) {
    HRESULT _hr = raw_AddPlanAction(pPlanAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(604)
inline IUnknownPtr IPhase::GetActionCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ActionCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(605)
inline long IPhase::AreComponentsInitiated ( ) {
    long _result = 0;
    HRESULT _hr = raw_AreComponentsInitiated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline long IPhase::IsComponentInPhase ( struct IComponent * pComponent ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentInPhase(pComponent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline HRESULT IPhase::RemoveAllPlanActions ( ) {
    HRESULT _hr = raw_RemoveAllPlanActions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(608)
inline long IPhase::GetCatalogInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CatalogInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void IPhase::PutCatalogInd ( long pVal ) {
    HRESULT _hr = put_CatalogInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline HRESULT IPhase::CalculateEndDtTm ( ) {
    HRESULT _hr = raw_CalculateEndDtTm();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(611)
inline _bstr_t IPhase::GetPhaseStatusDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPhaseStatusDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(612)
inline double IPhase::GetDisplayMethodCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayMethodCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void IPhase::PutDisplayMethodCd ( double pVal ) {
    HRESULT _hr = put_DisplayMethodCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline DATE IPhase::GetOrderDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_OrderDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline void IPhase::PutOrderDtTm ( DATE pVal ) {
    HRESULT _hr = put_OrderDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline _bstr_t IPhase::GetDisplayMethodDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayMethodDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(617)
inline void IPhase::PutDisplayMethodDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayMethodDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline _bstr_t IPhase::GetDisplayMethodMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayMethodMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(619)
inline void IPhase::PutDisplayMethodMean ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayMethodMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline _variant_t IPhase::GetRemovedReltns ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RemovedReltns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(621)
inline void IPhase::PutRemovedReltns ( const _variant_t & pVal ) {
    HRESULT _hr = put_RemovedReltns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline long IPhase::GetReplicatedOriginal ( ) {
    long _result = 0;
    HRESULT _hr = get_ReplicatedOriginal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void IPhase::PutReplicatedOriginal ( long pVal ) {
    HRESULT _hr = put_ReplicatedOriginal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline long IPhase::GetReplicatedCopy ( ) {
    long _result = 0;
    HRESULT _hr = get_ReplicatedCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(625)
inline void IPhase::PutReplicatedCopy ( long pVal ) {
    HRESULT _hr = put_ReplicatedCopy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline HRESULT IPhase::ResetRemovedReltns ( ) {
    HRESULT _hr = raw_ResetRemovedReltns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(627)
inline long IPhase::GetTZExistInd ( ) {
    long _result = 0;
    HRESULT _hr = get_TZExistInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(628)
inline void IPhase::PutTZExistInd ( long pVal ) {
    HRESULT _hr = put_TZExistInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(629)
inline long IPhase::HasOffset ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline HRESULT IPhase::ClearTZLRelationship ( ) {
    HRESULT _hr = raw_ClearTZLRelationship();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(631)
inline IComponentPtr IPhase::FindTZComponent ( ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindTZComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(632)
inline short IPhase::GetCompRUpdated ( ) {
    short _result = 0;
    HRESULT _hr = get_CompRUpdated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline void IPhase::PutCompRUpdated ( short pVal ) {
    HRESULT _hr = put_CompRUpdated(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline IComponentPtr IPhase::GetEarliestOffsetComponent ( ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_GetEarliestOffsetComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(635)
inline IComponentPtr IPhase::FindOrderComponentById ( double orderId ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindOrderComponentById(orderId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(636)
inline IComponentPtr IPhase::FindComponentById ( double compId ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindComponentById(compId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(637)
inline IDispatchPtr IPhase::GetParentDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ParentDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(638)
inline void IPhase::PutParentDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_ParentDispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline long IPhase::GetActOutcomesExistInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActOutcomesExistInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline void IPhase::PutActOutcomesExistInd ( long pVal ) {
    HRESULT _hr = put_ActOutcomesExistInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline double IPhase::GetRefOwnerPersonId ( ) {
    double _result = 0;
    HRESULT _hr = get_RefOwnerPersonId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline void IPhase::PutRefOwnerPersonId ( double pVal ) {
    HRESULT _hr = put_RefOwnerPersonId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(643)
inline _bstr_t IPhase::GetRefOwnerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefOwnerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(644)
inline void IPhase::PutRefOwnerName ( _bstr_t pVal ) {
    HRESULT _hr = put_RefOwnerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline DATE IPhase::GetCalcTimeZeroDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CalcTimeZeroDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline void IPhase::PutCalcTimeZeroDtTm ( DATE pVal ) {
    HRESULT _hr = put_CalcTimeZeroDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline IDispatchPtr IPhase::GetGroupCollection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetGroupCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(648)
inline HRESULT IPhase::AddGroup ( struct IGroup * pIGroup ) {
    HRESULT _hr = raw_AddGroup(pIGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(649)
inline int IPhase::GetGroupCount ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetGroupCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(650)
inline short IPhase::GetGroupUpdtFlag ( ) {
    short _result = 0;
    HRESULT _hr = get_GroupUpdtFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void IPhase::PutGroupUpdtFlag ( short pVal ) {
    HRESULT _hr = put_GroupUpdtFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline long IPhase::GetStartedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_StartedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline void IPhase::PutStartedInd ( long pVal ) {
    HRESULT _hr = put_StartedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline long IPhase::GetStartOffsetExistInd ( ) {
    long _result = 0;
    HRESULT _hr = get_StartOffsetExistInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline void IPhase::PutStartOffsetExistInd ( long pVal ) {
    HRESULT _hr = put_StartOffsetExistInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(656)
inline COMP_LOADING_STATUS IPhase::GetComponentLoaded ( ) {
    COMP_LOADING_STATUS _result;
    HRESULT _hr = get_ComponentLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline void IPhase::PutComponentLoaded ( COMP_LOADING_STATUS pVal ) {
    HRESULT _hr = put_ComponentLoaded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(658)
inline long IPhase::GetOrderMatched ( ) {
    long _result = 0;
    HRESULT _hr = get_OrderMatched(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline void IPhase::PutOrderMatched ( long pVal ) {
    HRESULT _hr = put_OrderMatched(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline double IPhase::GetDCReasonCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DCReasonCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void IPhase::PutDCReasonCd ( double pVal ) {
    HRESULT _hr = put_DCReasonCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline long IPhase::GetSubPhaseExistInd ( ) {
    long _result = 0;
    HRESULT _hr = get_SubPhaseExistInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void IPhase::PutSubPhaseExistInd ( long pVal ) {
    HRESULT _hr = put_SubPhaseExistInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline _variant_t IPhase::GetSubPhases ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubPhases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(665)
inline void IPhase::PutSubPhases ( const _variant_t & pVal ) {
    HRESULT _hr = put_SubPhases(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline HRESULT IPhase::RemoveSubPhase ( double dVal ) {
    HRESULT _hr = raw_RemoveSubPhase(dVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(667)
inline long IPhase::IsDuplicateSubPhase ( double dVal ) {
    long _result = 0;
    HRESULT _hr = raw_IsDuplicateSubPhase(dVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(668)
inline _bstr_t IPhase::GetLastActionPrsnlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastActionPrsnlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(669)
inline void IPhase::PutLastActionPrsnlName ( _bstr_t pVal ) {
    HRESULT _hr = put_LastActionPrsnlName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline DATE IPhase::GetLastActionDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastActionDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void IPhase::PutLastActionDtTm ( DATE pVal ) {
    HRESULT _hr = put_LastActionDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline IDispatchPtr IPhase::GetSubphaseCompDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SubphaseCompDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(673)
inline void IPhase::PutSubphaseCompDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_SubphaseCompDispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline long IPhase::GetNewSubPhaseExists ( ) {
    long _result = 0;
    HRESULT _hr = get_NewSubPhaseExists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void IPhase::PutNewSubPhaseExists ( long pVal ) {
    HRESULT _hr = put_NewSubPhaseExists(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline _bstr_t IPhase::GetParentPhaseDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentPhaseDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(677)
inline void IPhase::PutParentPhaseDesc ( _bstr_t pVal ) {
    HRESULT _hr = put_ParentPhaseDesc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline long IPhase::GetHideFlexedCompInd ( ) {
    long _result = 0;
    HRESULT _hr = get_HideFlexedCompInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void IPhase::PutHideFlexedCompInd ( long pVal ) {
    HRESULT _hr = put_HideFlexedCompInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline long IPhase::GetNomenReltnCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNomenReltnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline _bstr_t IPhase::GetDiagnosisDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDiagnosisDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(682)
inline long IPhase::IsADuplicateDiagnosis ( _bstr_t conceptCKI, double nomId ) {
    long _result = 0;
    HRESULT _hr = raw_IsADuplicateDiagnosis(conceptCKI, nomId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline HRESULT IPhase::GetDiagnosisBySeq ( long lSeq, LONG_PTR lVal ) {
    HRESULT _hr = raw_GetDiagnosisBySeq(lSeq, lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(684)
inline HRESULT IPhase::GetDiagnosisByDiagId ( double diagId, LONG_PTR lVal ) {
    HRESULT _hr = raw_GetDiagnosisByDiagId(diagId, lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(685)
inline HRESULT IPhase::AddDiagnosis ( LONG_PTR pVal ) {
    HRESULT _hr = raw_AddDiagnosis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(686)
inline HRESULT IPhase::UpdateDiagnosis ( LONG_PTR pVal ) {
    HRESULT _hr = raw_UpdateDiagnosis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(687)
inline HRESULT IPhase::RemoveDiagnosis ( LONG_PTR pVal ) {
    HRESULT _hr = raw_RemoveDiagnosis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(688)
inline long IPhase::GetRemovedNomenReltnCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetRemovedNomenReltnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline HRESULT IPhase::GetRemovedDiagnosisAt ( int Index, LONG_PTR pVal ) {
    HRESULT _hr = raw_GetRemovedDiagnosisAt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(690)
inline long IPhase::GetChemoInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ChemoInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void IPhase::PutChemoInd ( long pVal ) {
    HRESULT _hr = put_ChemoInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline long IPhase::GetChemoRelatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ChemoRelatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void IPhase::PutChemoRelatedInd ( long pVal ) {
    HRESULT _hr = put_ChemoRelatedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline HRESULT IPhase::SetSubPhaseCompChemoRelatedInd ( long bInd ) {
    HRESULT _hr = raw_SetSubPhaseCompChemoRelatedInd(bInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(695)
inline HRESULT IPhase::SetSubPhaseCompCPGInd ( long bInd ) {
    HRESULT _hr = raw_SetSubPhaseCompCPGInd(bInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(696)
inline HRESULT IPhase::RemoveCPGComponentLinks ( ) {
    HRESULT _hr = raw_RemoveCPGComponentLinks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(697)
inline long IPhase::GetFacilityAccessInd ( ) {
    long _result = 0;
    HRESULT _hr = get_FacilityAccessInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline void IPhase::PutFacilityAccessInd ( long pVal ) {
    HRESULT _hr = put_FacilityAccessInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline long IPhase::GetProActiveOutcomeExistInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ProActiveOutcomeExistInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void IPhase::PutProActiveOutcomeExistInd ( long pVal ) {
    HRESULT _hr = put_ProActiveOutcomeExistInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline double IPhase::GetTaperGroupOrderId ( ) {
    double _result = 0;
    HRESULT _hr = get_TaperGroupOrderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline void IPhase::PutTaperGroupOrderId ( double pVal ) {
    HRESULT _hr = put_TaperGroupOrderId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(703)
inline long IPhase::IsPhasePlanned ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhasePlanned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(704)
inline int IPhase::GetSubphaseNormalizedDoseStatus ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetSubphaseNormalizedDoseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline IDispatchPtr IPhase::GetUTCOrderDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCOrderDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(706)
inline void IPhase::PutUTCOrderDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCOrderDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline IDispatchPtr IPhase::GetUTCStartDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCStartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(708)
inline void IPhase::PutUTCStartDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCStartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline IDispatchPtr IPhase::GetUTCCalcEndDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCCalcEndDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(710)
inline void IPhase::PutUTCCalcEndDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCCalcEndDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline IDispatchPtr IPhase::GetUTCLastActionDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCLastActionDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(712)
inline void IPhase::PutUTCLastActionDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCLastActionDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline IDispatchPtr IPhase::GetUTCCalcTimeZeroDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCCalcTimeZeroDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(714)
inline void IPhase::PutUTCCalcTimeZeroDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCCalcTimeZeroDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(715)
inline long IPhase::GetHighAlertAvail ( ) {
    long _result = 0;
    HRESULT _hr = get_HighAlertAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline void IPhase::PutHighAlertAvail ( long pVal ) {
    HRESULT _hr = put_HighAlertAvail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline long IPhase::GetAutoDisplayHighAlert ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoDisplayHighAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline void IPhase::PutAutoDisplayHighAlert ( long pVal ) {
    HRESULT _hr = put_AutoDisplayHighAlert(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(719)
inline HRESULT IPhase::RemovePhaseDiagnoses ( ) {
    HRESULT _hr = raw_RemovePhaseDiagnoses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(720)
inline HRESULT IPhase::FixDiagnosisSequence ( ) {
    HRESULT _hr = raw_FixDiagnosisSequence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(721)
inline long IPhase::GetCopyForwardOriginal ( ) {
    long _result = 0;
    HRESULT _hr = get_CopyForwardOriginal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline void IPhase::PutCopyForwardOriginal ( long pVal ) {
    HRESULT _hr = put_CopyForwardOriginal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(723)
inline long IPhase::GetCopyForwardCopy ( ) {
    long _result = 0;
    HRESULT _hr = get_CopyForwardCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline void IPhase::PutCopyForwardCopy ( long pVal ) {
    HRESULT _hr = put_CopyForwardCopy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline HRESULT IPhase::ClearAllSubPhases ( ) {
    HRESULT _hr = raw_ClearAllSubPhases();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(726)
inline long IPhase::GetIncluded ( ) {
    long _result = 0;
    HRESULT _hr = get_Included(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(727)
inline void IPhase::PutIncluded ( long pVal ) {
    HRESULT _hr = put_Included(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(728)
inline long IPhase::AreComponentsSkipped ( ) {
    long _result = 0;
    HRESULT _hr = raw_AreComponentsSkipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(729)
inline HRESULT IPhase::AddOrderStartDtTmException ( struct IComponent * pComponent ) {
    HRESULT _hr = raw_AddOrderStartDtTmException(pComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(730)
inline IUnknownPtr IPhase::GetOrderStartDtTmExceptionCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_OrderStartDtTmExceptionCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(731)
inline long IPhase::GetAutoInitiateInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoInitiateInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void IPhase::PutAutoInitiateInd ( long pVal ) {
    HRESULT _hr = put_AutoInitiateInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline IPhasePtr IPhase::GetParentPhase ( ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetParentPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(734)
inline long IPhase::GetAutoInitiateIndForPhaseAndSubPhase ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetAutoInitiateIndForPhaseAndSubPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline long IPhase::GetComponentCountWithFilters ( COMPONENT_COUNT_FLAG eFlag ) {
    long _result = 0;
    HRESULT _hr = raw_GetComponentCountWithFilters(eFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline long IPhase::GetCheckAlertsOnPlanning ( ) {
    long _result = 0;
    HRESULT _hr = get_CheckAlertsOnPlanning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline void IPhase::PutCheckAlertsOnPlanning ( long pVal ) {
    HRESULT _hr = put_CheckAlertsOnPlanning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline long IPhase::GetCheckAlertsOnUpdates ( ) {
    long _result = 0;
    HRESULT _hr = get_CheckAlertsOnUpdates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline void IPhase::PutCheckAlertsOnUpdates ( long pVal ) {
    HRESULT _hr = put_CheckAlertsOnUpdates(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline _bstr_t IPhase::GetAlertsLastCheckedDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlertsLastCheckedDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(741)
inline void IPhase::PutAlertsLastCheckedDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_AlertsLastCheckedDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(742)
inline long IPhase::HasModifiedSubphase ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasModifiedSubphase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline HRESULT IPhase::ResequenceComponents ( ) {
    HRESULT _hr = raw_ResequenceComponents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(744)
inline long IPhase::GetOffsetQty ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void IPhase::PutOffsetQty ( long pVal ) {
    HRESULT _hr = put_OffsetQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline double IPhase::GetOffsetUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline void IPhase::PutOffsetUnitCd ( double pVal ) {
    HRESULT _hr = put_OffsetUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(748)
inline double IPhase::GetOffsetAnchorPhaseId ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetAnchorPhaseId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline void IPhase::PutOffsetAnchorPhaseId ( double pVal ) {
    HRESULT _hr = put_OffsetAnchorPhaseId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(750)
inline HRESULT IPhase::AddOffsetAnchoredPhase ( double newVal ) {
    HRESULT _hr = raw_AddOffsetAnchoredPhase(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(751)
inline HRESULT IPhase::RemoveOffsetAnchoredPhase ( double oldVal ) {
    HRESULT _hr = raw_RemoveOffsetAnchoredPhase(oldVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(752)
inline HRESULT IPhase::ClearOffsetAnchoredPhases ( ) {
    HRESULT _hr = raw_ClearOffsetAnchoredPhases();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(753)
inline HRESULT IPhase::GetOffsetAnchoredPhases ( LONG_PTR lAnchoredPhases ) {
    HRESULT _hr = raw_GetOffsetAnchoredPhases(lAnchoredPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(754)
inline double IPhase::GetDefaultActionInpatientNowCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultActionInpatientNowCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline void IPhase::PutDefaultActionInpatientNowCd ( double pVal ) {
    HRESULT _hr = put_DefaultActionInpatientNowCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline double IPhase::GetDefaultActionInpatientFutureCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultActionInpatientFutureCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void IPhase::PutDefaultActionInpatientFutureCd ( double pVal ) {
    HRESULT _hr = put_DefaultActionInpatientFutureCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline double IPhase::GetDefaultActionOutpatientNowCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultActionOutpatientNowCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline void IPhase::PutDefaultActionOutpatientNowCd ( double pVal ) {
    HRESULT _hr = put_DefaultActionOutpatientNowCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(760)
inline double IPhase::GetDefaultActionOutpatientFutureCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultActionOutpatientFutureCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void IPhase::PutDefaultActionOutpatientFutureCd ( double pVal ) {
    HRESULT _hr = put_DefaultActionOutpatientFutureCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline long IPhase::GetOptionalInd ( ) {
    long _result = 0;
    HRESULT _hr = get_OptionalInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void IPhase::PutOptionalInd ( long pVal ) {
    HRESULT _hr = put_OptionalInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline double IPhase::GetScheduledFacilityCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ScheduledFacilityCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void IPhase::PutScheduledFacilityCd ( double pVal ) {
    HRESULT _hr = put_ScheduledFacilityCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline double IPhase::GetScheduledNursingUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ScheduledNursingUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void IPhase::PutScheduledNursingUnitCd ( double pVal ) {
    HRESULT _hr = put_ScheduledNursingUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline long IPhase::GetAllowFuturePhaseInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AllowFuturePhaseInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void IPhase::PutAllowFuturePhaseInd ( long pVal ) {
    HRESULT _hr = put_AllowFuturePhaseInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline long IPhase::GetStartDateTimeEstimatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_StartDateTimeEstimatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void IPhase::PutStartDateTimeEstimatedInd ( long pDateTimeEstimatedInd ) {
    HRESULT _hr = put_StartDateTimeEstimatedInd(pDateTimeEstimatedInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline long IPhase::GetEndDateTimeEstimatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_EndDateTimeEstimatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void IPhase::PutEndDateTimeEstimatedInd ( long pEndDateTimeEstimatedInd ) {
    HRESULT _hr = put_EndDateTimeEstimatedInd(pEndDateTimeEstimatedInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline long IPhase::GetOrderNowInd ( ) {
    long _result = 0;
    HRESULT _hr = get_OrderNowInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline void IPhase::PutOrderNowInd ( long pOrderNowInd ) {
    HRESULT _hr = put_OrderNowInd(pOrderNowInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline long IPhase::GetFutureInitiateInd ( ) {
    long _result = 0;
    HRESULT _hr = get_FutureInitiateInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline void IPhase::PutFutureInitiateInd ( long pFutureInitiateInd ) {
    HRESULT _hr = put_FutureInitiateInd(pFutureInitiateInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline long IPhase::IsAutoInitiateAvailable ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsAutoInitiateAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline long IPhase::GetInactivateOffsetInd ( ) {
    long _result = 0;
    HRESULT _hr = get_InactivateOffsetInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline void IPhase::PutInactivateOffsetInd ( long pInactivateOffsetInd ) {
    HRESULT _hr = put_InactivateOffsetInd(pInactivateOffsetInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline long IPhase::AreAllComponentsExcluded ( ) {
    long _result = 0;
    HRESULT _hr = raw_AreAllComponentsExcluded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline long IPhase::GetActivateInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActivateInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline void IPhase::PutActivateInd ( long pActivateInd ) {
    HRESULT _hr = put_ActivateInd(pActivateInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline long IPhase::CanUnlockStartDateTime ( ) {
    long _result = 0;
    HRESULT _hr = raw_CanUnlockStartDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(785)
inline double IPhase::GetSucceedPhaseId ( ) {
    double _result = 0;
    HRESULT _hr = get_SucceedPhaseId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(786)
inline void IPhase::PutSucceedPhaseId ( double pSucceedKeyId ) {
    HRESULT _hr = put_SucceedPhaseId(pSucceedKeyId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline double IPhase::GetPrecedePhaseId ( ) {
    double _result = 0;
    HRESULT _hr = get_PrecedePhaseId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void IPhase::PutPrecedePhaseId ( double pPrecedeKeyId ) {
    HRESULT _hr = put_PrecedePhaseId(pPrecedeKeyId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline long IPhase::GetStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline HRESULT IPhase::GetSubPhasesVector ( LONG_PTR lSubphasesVector ) {
    HRESULT _hr = raw_GetSubPhasesVector(lSubphasesVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(791)
inline HRESULT IPhase::PutSubPhasesVector ( LONG_PTR lSubphasesVector ) {
    HRESULT _hr = raw_PutSubPhasesVector(lSubphasesVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(792)
inline HRESULT IPhase::AddPendingAction ( struct IPlanAction * pPlanAction ) {
    HRESULT _hr = raw_AddPendingAction(pPlanAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(793)
inline INT_PTRX IPhase::GetPendingActionSize ( ) {
    INT_PTRX _result;
    HRESULT _hr = raw_GetPendingActionSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline IPlanActionPtr IPhase::GetPendingActionAt ( INT_PTRX iIndex ) {
    struct IPlanAction * _result = 0;
    HRESULT _hr = raw_GetPendingActionAt(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanActionPtr(_result, false);
}

#pragma implementation_key(795)
inline HRESULT IPhase::AddTreatmentPeriod ( long lPeriodNumber, double dKey ) {
    HRESULT _hr = raw_AddTreatmentPeriod(lPeriodNumber, dKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(796)
inline double IPhase::GetTreatmentPeriod ( long lPeriodNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetTreatmentPeriod(lPeriodNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline HRESULT IPhase::RemoveTreatmentPeriod ( long lPeriodNumber ) {
    HRESULT _hr = raw_RemoveTreatmentPeriod(lPeriodNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(798)
inline HRESULT IPhase::GetTreatmentPeriods ( LONG_PTR lTreatmentPeriodsVector ) {
    HRESULT _hr = raw_GetTreatmentPeriods(lTreatmentPeriodsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(799)
inline HRESULT IPhase::RemoveTreatmentSchedule ( ) {
    HRESULT _hr = raw_RemoveTreatmentSchedule();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(800)
inline HRESULT IPhase::AddTreatmentLinkedComponent ( double dComponentId ) {
    HRESULT _hr = raw_AddTreatmentLinkedComponent(dComponentId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(801)
inline long IPhase::IsComponentLinkedToTreatment ( double dComponentId ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentLinkedToTreatment(dComponentId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline HRESULT IPhase::RemoveTreatmentLinkedComponent ( double dComponentId ) {
    HRESULT _hr = raw_RemoveTreatmentLinkedComponent(dComponentId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(803)
inline HRESULT IPhase::GetTreatmentLinkedComponents ( LONG_PTR lTreatmentLinkedComponentsVector ) {
    HRESULT _hr = raw_GetTreatmentLinkedComponents(lTreatmentLinkedComponentsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(804)
inline _bstr_t IPhase::GetTreatmentPeriodCustomLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TreatmentPeriodCustomLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(805)
inline void IPhase::PutTreatmentPeriodCustomLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_TreatmentPeriodCustomLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline long IPhase::HasTreatmentSchedule ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasTreatmentSchedule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline _bstr_t IPhase::BuildTreatmentScheduleDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BuildTreatmentScheduleDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(808)
inline _bstr_t IPhase::BuildComponentTreatmentScheduleDisplay ( double dComponentId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BuildComponentTreatmentScheduleDisplay(dComponentId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(809)
inline long IPhase::GetTreatmentPeriodNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_TreatmentPeriodNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline void IPhase::PutTreatmentPeriodNumber ( long pVal ) {
    HRESULT _hr = put_TreatmentPeriodNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(811)
inline double IPhase::GetProtocolPhaseId ( ) {
    double _result = 0;
    HRESULT _hr = get_ProtocolPhaseId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(812)
inline void IPhase::PutProtocolPhaseId ( double pVal ) {
    HRESULT _hr = put_ProtocolPhaseId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline IComponentPtr IPhase::FindComponentByProtocolGroupNbr ( double dProtocolGroupNbr ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindComponentByProtocolGroupNbr(dProtocolGroupNbr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(814)
inline long IPhase::GetGroupedPhasesNotLoaded ( ) {
    long _result = 0;
    HRESULT _hr = get_GroupedPhasesNotLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline void IPhase::PutGroupedPhasesNotLoaded ( long pVal ) {
    HRESULT _hr = put_GroupedPhasesNotLoaded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline IDispatchPtr IPhase::GetOffsetTimeSpan ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetOffsetTimeSpan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(817)
inline long IPhase::GetReviewRoutingInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ReviewRoutingInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline void IPhase::PutReviewRoutingInd ( long pVal ) {
    HRESULT _hr = put_ReviewRoutingInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline PROTOCOL_REVIEW_STATUS_FLAG IPhase::GetCurrentReviewStatusFlag ( ) {
    PROTOCOL_REVIEW_STATUS_FLAG _result;
    HRESULT _hr = get_CurrentReviewStatusFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline void IPhase::PutCurrentReviewStatusFlag ( PROTOCOL_REVIEW_STATUS_FLAG pVal ) {
    HRESULT _hr = put_CurrentReviewStatusFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(821)
inline PROTOCOL_REVIEW_STATUS_FLAG IPhase::GetPendingReviewStatusFlag ( ) {
    PROTOCOL_REVIEW_STATUS_FLAG _result;
    HRESULT _hr = get_PendingReviewStatusFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline void IPhase::PutPendingReviewStatusFlag ( PROTOCOL_REVIEW_STATUS_FLAG pVal ) {
    HRESULT _hr = put_PendingReviewStatusFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(823)
inline double IPhase::GetReviewReasonCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ReviewReasonCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline void IPhase::PutReviewReasonCd ( double pVal ) {
    HRESULT _hr = put_ReviewReasonCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(825)
inline _bstr_t IPhase::GetReviewComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReviewComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(826)
inline void IPhase::PutReviewComment ( _bstr_t pVal ) {
    HRESULT _hr = put_ReviewComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(827)
inline long IPhase::GetIsProtocolReviewDirty ( ) {
    long _result = 0;
    HRESULT _hr = get_IsProtocolReviewDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline void IPhase::PutIsProtocolReviewDirty ( long pVal ) {
    HRESULT _hr = put_IsProtocolReviewDirty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(829)
inline long IPhase::IsProtocolRoutingForReview ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsProtocolRoutingForReview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline _bstr_t IPhase::GetReviewRejectPrsnlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReviewRejectPrsnlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(831)
inline void IPhase::PutReviewRejectPrsnlName ( _bstr_t pVal ) {
    HRESULT _hr = put_ReviewRejectPrsnlName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(832)
inline long IPhase::IsPendingProtocolReview ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPendingProtocolReview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline double IPhase::GetRequestPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_RequestPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline void IPhase::PutRequestPersonnelId ( double pVal ) {
    HRESULT _hr = put_RequestPersonnelId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline double IPhase::GetToPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_ToPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(836)
inline void IPhase::PutToPersonnelId ( double pVal ) {
    HRESULT _hr = put_ToPersonnelId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(837)
inline _bstr_t IPhase::GetRequestNameFullFormatted ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestNameFullFormatted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(838)
inline void IPhase::PutRequestNameFullFormatted ( _bstr_t pVal ) {
    HRESULT _hr = put_RequestNameFullFormatted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(839)
inline _bstr_t IPhase::GetToNameFullFormatted ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToNameFullFormatted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(840)
inline void IPhase::PutToNameFullFormatted ( _bstr_t pVal ) {
    HRESULT _hr = put_ToNameFullFormatted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline IDispatchPtr IPhase::GetUTCReviewDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCReviewDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(842)
inline void IPhase::PutUTCReviewDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCReviewDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(843)
inline IDispatchPtr IPhase::GetParentPhaseDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ParentPhaseDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(844)
inline void IPhase::PutParentPhaseDispatch ( IDispatch * pPhase ) {
    HRESULT _hr = put_ParentPhaseDispatch(pPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline _bstr_t IPhase::GetTreatmentPeriodLabels ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTreatmentPeriodLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(846)
inline double IPhase::GetPathwayClassCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PathwayClassCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline void IPhase::PutPathwayClassCd ( double pVal ) {
    HRESULT _hr = put_PathwayClassCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(848)
inline long IPhase::HasComopnentInCPG ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasComopnentInCPG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(849)
inline HRESULT IPhase::InsertComponentAt ( IDispatch * lpComponent, long lIndex ) {
    HRESULT _hr = raw_InsertComponentAt(lpComponent, lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(850)
inline ESubPhaseStyle IPhase::GetSubPhaseStyle ( ) {
    ESubPhaseStyle _result;
    HRESULT _hr = get_SubPhaseStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(851)
inline void IPhase::PutSubPhaseStyle ( ESubPhaseStyle pVal ) {
    HRESULT _hr = put_SubPhaseStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline long IPhase::IsPhaseLinkedToComfirmedAppointment ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseLinkedToComfirmedAppointment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline double IPhase::GetPathwayGroupId ( ) {
    double _result = 0;
    HRESULT _hr = get_PathwayGroupId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void IPhase::PutPathwayGroupId ( double pVal ) {
    HRESULT _hr = put_PathwayGroupId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline long IPhase::GetPrimaryPhaseInd ( ) {
    long _result = 0;
    HRESULT _hr = get_PrimaryPhaseInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void IPhase::PutPrimaryPhaseInd ( long pPrimaryPhaseInd ) {
    HRESULT _hr = put_PrimaryPhaseInd(pPrimaryPhaseInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline _bstr_t IPhase::GetDefaultStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(858)
inline void IPhase::PutDefaultStartTime ( _bstr_t pDefaultStartTime ) {
    HRESULT _hr = put_DefaultStartTime(pDefaultStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline EPhaseProcessingStatus IPhase::GetProcessingStatus ( ) {
    EPhaseProcessingStatus _result;
    HRESULT _hr = get_ProcessingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void IPhase::PutProcessingStatus ( EPhaseProcessingStatus pVal ) {
    HRESULT _hr = put_ProcessingStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline long IPhase::GetPathwayMissingReasonFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_PathwayMissingReasonFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void IPhase::PutPathwayMissingReasonFlag ( long pVal ) {
    HRESULT _hr = put_PathwayMissingReasonFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline long IPhase::SuppressAllActionExceptVoid ( ) {
    long _result = 0;
    HRESULT _hr = raw_SuppressAllActionExceptVoid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline _bstr_t IPhase::GetParentComponentUUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentComponentUUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(865)
inline void IPhase::PutParentComponentUUID ( _bstr_t pVal ) {
    HRESULT _hr = put_ParentComponentUUID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline double IPhase::GetParentPhaseCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_ParentPhaseCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline void IPhase::PutParentPhaseCatalogId ( double pVal ) {
    HRESULT _hr = put_ParentPhaseCatalogId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline HRESULT IPhase::AddSucceedPhase ( double dPhaseId ) {
    HRESULT _hr = raw_AddSucceedPhase(dPhaseId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(869)
inline HRESULT IPhase::AddSubPhase ( double dPhaseId ) {
    HRESULT _hr = raw_AddSubPhase(dPhaseId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(870)
inline _bstr_t IPhase::GetUUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(871)
inline void IPhase::PutUUID ( _bstr_t pVal ) {
    HRESULT _hr = put_UUID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline long IPhase::GetWarnings ( ) {
    long _result = 0;
    HRESULT _hr = get_Warnings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline void IPhase::PutWarnings ( long pVal ) {
    HRESULT _hr = put_Warnings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline long IPhase::GetContainsPersonMismatchInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainsPersonMismatchInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline void IPhase::PutContainsPersonMismatchInd ( long pVal ) {
    HRESULT _hr = put_ContainsPersonMismatchInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline short IPhase::GetRescheduleReasonAcceptFlag ( ) {
    short _result = 0;
    HRESULT _hr = get_RescheduleReasonAcceptFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(877)
inline void IPhase::PutRescheduleReasonAcceptFlag ( short pVal ) {
    HRESULT _hr = put_RescheduleReasonAcceptFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline HRESULT IPhase::RemovePendingAction ( struct IPlanAction * pPlanAction ) {
    HRESULT _hr = raw_RemovePendingAction(pPlanAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(879)
inline double IPhase::GetSupervisingPhysicianId ( ) {
    double _result = 0;
    HRESULT _hr = get_SupervisingPhysicianId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void IPhase::PutSupervisingPhysicianId ( double pVal ) {
    HRESULT _hr = put_SupervisingPhysicianId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline double IPhase::GetProviderId ( ) {
    double _result = 0;
    HRESULT _hr = get_ProviderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void IPhase::PutProviderId ( double pVal ) {
    HRESULT _hr = put_ProviderId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline long IPhase::GetProviderIdSetUsingPrompt ( ) {
    long _result = 0;
    HRESULT _hr = get_ProviderIdSetUsingPrompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline void IPhase::PutProviderIdSetUsingPrompt ( long pVal ) {
    HRESULT _hr = put_ProviderIdSetUsingPrompt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline HRESULT IPhase::MaintainSupervisingPhysicianOnPhase ( ) {
    HRESULT _hr = raw_MaintainSupervisingPhysicianOnPhase();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(886)
inline double IPhase::GetSupervisingActPrsnlId ( ) {
    double _result = 0;
    HRESULT _hr = get_SupervisingActPrsnlId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline void IPhase::PutSupervisingActPrsnlId ( double pVal ) {
    HRESULT _hr = put_SupervisingActPrsnlId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline HRESULT IPhase::AddDotComponentModification ( LONG_PTR lDotComponentModification ) {
    HRESULT _hr = raw_AddDotComponentModification(lDotComponentModification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(889)
inline HRESULT IPhase::RemoveDotComponentModification ( double dKey ) {
    HRESULT _hr = raw_RemoveDotComponentModification(dKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(890)
inline HRESULT IPhase::GetDotComponentModification ( double dKey, LONG_PTR lDotComponentModification ) {
    HRESULT _hr = raw_GetDotComponentModification(dKey, lDotComponentModification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(891)
inline HRESULT IPhase::RemoveAllDotComponentModifications ( ) {
    HRESULT _hr = raw_RemoveAllDotComponentModifications();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(892)
inline HRESULT IPhase::GetAllDotComponentModifications ( LONG_PTR lDotComponentModificationVector ) {
    HRESULT _hr = raw_GetAllDotComponentModifications(lDotComponentModificationVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(893)
inline HRESULT IPhase::GetDotComponentModificationComponentRelations ( LONG_PTR lComponentRelations ) {
    HRESULT _hr = raw_GetDotComponentModificationComponentRelations(lComponentRelations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(894)
inline long IPhase::HasDotComponentModifications ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasDotComponentModifications(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline long IPhase::HasTreatmentPeriodDotComponentModifications ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasTreatmentPeriodDotComponentModifications(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline long IPhase::ValidateTimeZeroOffsets ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateTimeZeroOffsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline double IPhase::GetToPoolId ( ) {
    double _result = 0;
    HRESULT _hr = get_ToPoolId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(898)
inline void IPhase::PutToPoolId ( double pVal ) {
    HRESULT _hr = put_ToPoolId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(899)
inline HRESULT IPhase::RemoveSucceedPhaseId ( double dPhaseId ) {
    HRESULT _hr = raw_RemoveSucceedPhaseId(dPhaseId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(900)
inline long IPhase::HasSucceedPhaseId ( double dPhaseId ) {
    long _result = 0;
    HRESULT _hr = raw_HasSucceedPhaseId(dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline long IPhase::IsPhaseInProposalStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseInProposalStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline long IPhase::GetHoldInd ( ) {
    long _result = 0;
    HRESULT _hr = get_HoldInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(903)
inline void IPhase::PutHoldInd ( long pVal ) {
    HRESULT _hr = put_HoldInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(904)
inline long IPhase::GetSkipInd ( ) {
    long _result = 0;
    HRESULT _hr = get_SkipInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline void IPhase::PutSkipInd ( long pVal ) {
    HRESULT _hr = put_SkipInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline long IPhase::IsPhaseInProtocolReview ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseInProtocolReview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline long IPhase::GetResumeInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ResumeInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void IPhase::PutResumeInd ( long pVal ) {
    HRESULT _hr = put_ResumeInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline HRESULT IPhase::AddReviewToPhase ( struct IReview * pIReview ) {
    HRESULT _hr = raw_AddReviewToPhase(pIReview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(910)
inline IUnknownPtr IPhase::GetReviewCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetReviewCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(911)
inline long IPhase::HasModifiedTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasModifiedTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline long IPhase::GetOpenByDefaultInd ( ) {
    long _result = 0;
    HRESULT _hr = get_OpenByDefaultInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline void IPhase::PutOpenByDefaultInd ( long pVal ) {
    HRESULT _hr = put_OpenByDefaultInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline long IPhase::GetAllowActivateAllInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AllowActivateAllInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline void IPhase::PutAllowActivateAllInd ( long pVal ) {
    HRESULT _hr = put_AllowActivateAllInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline long IPhase::GetIgnoreSupervisingPhysicianPrompt ( ) {
    long _result = 0;
    HRESULT _hr = get_IgnoreSupervisingPhysicianPrompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline void IPhase::PutIgnoreSupervisingPhysicianPrompt ( long pVal ) {
    HRESULT _hr = put_IgnoreSupervisingPhysicianPrompt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline void IPhase::PutPhaseDetailStatusCd ( double pVal ) {
    HRESULT _hr = put_PhaseDetailStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(919)
inline double IPhase::GetPhaseDetailStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PhaseDetailStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void IPhase::PutPhaseDetailStatusMean ( _bstr_t pVal ) {
    HRESULT _hr = put_PhaseDetailStatusMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline _bstr_t IPhase::GetPhaseDetailStatusMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhaseDetailStatusMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(922)
inline void IPhase::PutPhaseDetailStatusDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_PhaseDetailStatusDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(923)
inline _bstr_t IPhase::GetPhaseDetailStatusDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhaseDetailStatusDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(924)
inline _bstr_t IPhase::GetTreatmentPeriodDetailedStatusDisplay ( struct IPhase * pPhase ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTreatmentPeriodDetailedStatusDisplay(pPhase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(925)
inline long IPhase::GetIsCopySourceTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_IsCopySourceTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void IPhase::PutIsCopySourceTreatmentPeriod ( long pVal ) {
    HRESULT _hr = put_IsCopySourceTreatmentPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline long IPhase::GetIsSourceTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_IsSourceTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline void IPhase::PutIsSourceTreatmentPeriod ( long pVal ) {
    HRESULT _hr = put_IsSourceTreatmentPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline long IPhase::GetIsSucceedTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_IsSucceedTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void IPhase::PutIsSucceedTreatmentPeriod ( long pVal ) {
    HRESULT _hr = put_IsSucceedTreatmentPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline double IPhase::GetCopySourceTreatmentPeriodId ( ) {
    double _result = 0;
    HRESULT _hr = get_CopySourceTreatmentPeriodId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void IPhase::PutCopySourceTreatmentPeriodId ( double pVal ) {
    HRESULT _hr = put_CopySourceTreatmentPeriodId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline long IPhase::GetIsFirstTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_IsFirstTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void IPhase::PutIsFirstTreatmentPeriod ( long pVal ) {
    HRESULT _hr = put_IsFirstTreatmentPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline HRESULT IPhase::ToggleComponentPhaseRelationship ( double dActComponentId ) {
    HRESULT _hr = raw_ToggleComponentPhaseRelationship(dActComponentId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(936)
inline HRESULT IPhase::GetComponentPhaseRelationships ( LONG_PTR lComponentPathwayRelationshipVector ) {
    HRESULT _hr = raw_GetComponentPhaseRelationships(lComponentPathwayRelationshipVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(937)
inline long IPhase::IsComponentRelatedToTreatmentPeriod ( double dActComponentId ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentRelatedToTreatmentPeriod(dActComponentId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline HRESULT IPhase::ClearTreatmentLinkedComponents ( ) {
    HRESULT _hr = raw_ClearTreatmentLinkedComponents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(939)
inline HRESULT IPhase::ClearSucceedPhases ( ) {
    HRESULT _hr = raw_ClearSucceedPhases();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(940)
inline HRESULT IPhase::RemoveAllComponentPhaseRelationships ( ) {
    HRESULT _hr = raw_RemoveAllComponentPhaseRelationships();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(941)
inline long IPhase::IsCopiedTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsCopiedTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline long IPhase::IsAdhocTreatmentPeriod ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsAdhocTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline long IPhase::GetIsPhaseStartFromAPrecomponentOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_IsPhaseStartFromAPrecomponentOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(944)
inline void IPhase::PutIsPhaseStartFromAPrecomponentOrder ( long pVal ) {
    HRESULT _hr = put_IsPhaseStartFromAPrecomponentOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(945)
inline long IPhase::IsSigningIntoPendingProtocolReview ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsSigningIntoPendingProtocolReview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline long IPhase::HasSubphaseWithPendingActionType ( ACTION_TYPE eActionType ) {
    long _result = 0;
    HRESULT _hr = raw_HasSubphaseWithPendingActionType(eActionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline HRESULT IPhase::GetLinkedTreatmentPeriods ( struct IComponent * pIProtocolComponent, LONG_PTR lLinkedTreatmentPeriodsVector ) {
    HRESULT _hr = raw_GetLinkedTreatmentPeriods(pIProtocolComponent, lLinkedTreatmentPeriodsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(948)
inline long IPhase::GetNextComponentSequence ( ) {
    long _result = 0;
    HRESULT _hr = get_NextComponentSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void IPhase::PutNextComponentSequence ( long pVal ) {
    HRESULT _hr = put_NextComponentSequence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline HRESULT IPhase::GetLinkedSchedulableComponents ( LONG_PTR lLinkedSchedulableComponents ) {
    HRESULT _hr = raw_GetLinkedSchedulableComponents(lLinkedSchedulableComponents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(951)
inline HRESULT IPhase::GetLinkingSchedulingPhases ( LONG_PTR lLinkingSchedulingPhases ) {
    HRESULT _hr = raw_GetLinkingSchedulingPhases(lLinkingSchedulingPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(952)
inline long IPhase::DoesSchedulingLinkageExistWithComponent ( double dComponentId ) {
    long _result = 0;
    HRESULT _hr = raw_DoesSchedulingLinkageExistWithComponent(dComponentId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline long IPhase::GetReviewRequiredSignatureCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ReviewRequiredSignatureCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline void IPhase::PutReviewRequiredSignatureCount ( long pVal ) {
    HRESULT _hr = put_ReviewRequiredSignatureCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(955)
inline long IPhase::GetSelfProtocolReview ( ) {
    long _result = 0;
    HRESULT _hr = get_SelfProtocolReview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline void IPhase::PutSelfProtocolReview ( long pVal ) {
    HRESULT _hr = put_SelfProtocolReview(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(957)
inline double IPhase::GetIntermediateReviewRequestPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_IntermediateReviewRequestPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline void IPhase::PutIntermediateReviewRequestPersonnelId ( double pVal ) {
    HRESULT _hr = put_IntermediateReviewRequestPersonnelId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(959)
inline double IPhase::GetIntermediateReviewToPersonnelId ( ) {
    double _result = 0;
    HRESULT _hr = get_IntermediateReviewToPersonnelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(960)
inline void IPhase::PutIntermediateReviewToPersonnelId ( double pVal ) {
    HRESULT _hr = put_IntermediateReviewToPersonnelId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(961)
inline double IPhase::GetIntermediateReviewToPoolId ( ) {
    double _result = 0;
    HRESULT _hr = get_IntermediateReviewToPoolId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline void IPhase::PutIntermediateReviewToPoolId ( double pVal ) {
    HRESULT _hr = put_IntermediateReviewToPoolId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline _bstr_t IPhase::GetIntermediateReviewRequestNameFullFormatted ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntermediateReviewRequestNameFullFormatted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(964)
inline void IPhase::PutIntermediateReviewRequestNameFullFormatted ( _bstr_t pVal ) {
    HRESULT _hr = put_IntermediateReviewRequestNameFullFormatted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(965)
inline _bstr_t IPhase::GetIntermediateReviewToNameFullFormatted ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntermediateReviewToNameFullFormatted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(966)
inline void IPhase::PutIntermediateReviewToNameFullFormatted ( _bstr_t pVal ) {
    HRESULT _hr = put_IntermediateReviewToNameFullFormatted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(967)
inline IDispatchPtr IPhase::GetIntermediateReviewUTCReviewDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_IntermediateReviewUTCReviewDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(968)
inline void IPhase::PutIntermediateReviewUTCReviewDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_IntermediateReviewUTCReviewDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline HRESULT IPhase::CopyCurrentProtocolReviewToIntermediateProtocolReview ( ) {
    HRESULT _hr = raw_CopyCurrentProtocolReviewToIntermediateProtocolReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(970)
inline HRESULT IPhase::ClearIntermediateProtocolReview ( ) {
    HRESULT _hr = raw_ClearIntermediateProtocolReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(971)
inline PROTOCOL_REVIEW_STATUS_FLAG IPhase::GetIntermediateReviewStatusFlag ( ) {
    PROTOCOL_REVIEW_STATUS_FLAG _result;
    HRESULT _hr = get_IntermediateReviewStatusFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline void IPhase::PutIntermediateReviewStatusFlag ( PROTOCOL_REVIEW_STATUS_FLAG pVal ) {
    HRESULT _hr = put_IntermediateReviewStatusFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline IPhasePtr IPhase::GetLastTreatmentPeriod ( ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetLastTreatmentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(974)
inline HRESULT IPhase::RemoveMembersFromGroup ( struct IComponent * pComponent ) {
    HRESULT _hr = raw_RemoveMembersFromGroup(pComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(975)
inline long IPhase::GetLastActionSeq ( ) {
    long _result = 0;
    HRESULT _hr = get_LastActionSeq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline void IPhase::PutLastActionSeq ( long pVal ) {
    HRESULT _hr = put_LastActionSeq(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(977)
inline HRESULT IPhase::UpdateTZIndOnDot ( ) {
    HRESULT _hr = raw_UpdateTZIndOnDot();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(978)
inline long IPhase::GetIgnoreMOEWFromMpageOrderActivateWorkflow ( ) {
    long _result = 0;
    HRESULT _hr = get_IgnoreMOEWFromMpageOrderActivateWorkflow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void IPhase::PutIgnoreMOEWFromMpageOrderActivateWorkflow ( long pVal ) {
    HRESULT _hr = put_IgnoreMOEWFromMpageOrderActivateWorkflow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(980)
inline long IPhase::IsPhaseEmpty ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseEmpty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline long IPhase::GetLinkedPhaseInd ( ) {
    long _result = 0;
    HRESULT _hr = get_LinkedPhaseInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline void IPhase::PutLinkedPhaseInd ( long pVal ) {
    HRESULT _hr = put_LinkedPhaseInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(983)
inline long IPhase::GetNeedProtocolReviewAccept ( ) {
    long _result = 0;
    HRESULT _hr = get_NeedProtocolReviewAccept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(984)
inline void IPhase::PutNeedProtocolReviewAccept ( long pVal ) {
    HRESULT _hr = put_NeedProtocolReviewAccept(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline long IPhase::IsPhaseRestricted ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseRestricted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline long IPhase::HasRestrictedComponent ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasRestrictedComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline HRESULT IPhase::SetHasRestrictedComponent ( long bHasRestrictedComponent ) {
    HRESULT _hr = raw_SetHasRestrictedComponent(bHasRestrictedComponent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(988)
inline HRESULT IPhase::UpdatePhaseStatusToPlannedPending ( ) {
    HRESULT _hr = raw_UpdatePhaseStatusToPlannedPending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPlan wrapper method implementations
//

#pragma implementation_key(989)
inline double IPlan::GetPlanCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline void IPlan::PutPlanCatalogId ( double pVal ) {
    HRESULT _hr = put_PlanCatalogId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline _bstr_t IPlan::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(992)
inline void IPlan::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline long IPlan::GetActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void IPlan::PutActiveInd ( long pVal ) {
    HRESULT _hr = put_ActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline long IPlan::GetCrossEncntrInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CrossEncntrInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline void IPlan::PutCrossEncntrInd ( long pVal ) {
    HRESULT _hr = put_CrossEncntrInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline long IPlan::GetRefTextExist ( ) {
    long _result = 0;
    HRESULT _hr = get_RefTextExist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline _bstr_t IPlan::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(999)
inline void IPlan::PutComment ( _bstr_t pVal ) {
    HRESULT _hr = put_Comment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline long IPlan::GetCommentExist ( ) {
    long _result = 0;
    HRESULT _hr = get_CommentExist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline void IPlan::PutCommentExist ( long pVal ) {
    HRESULT _hr = put_CommentExist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1002)
inline _bstr_t IPlan::GetVersionNum ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VersionNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1003)
inline void IPlan::PutVersionNum ( _bstr_t pVal ) {
    HRESULT _hr = put_VersionNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1004)
inline PLAN_TYPE IPlan::GetPlanType ( ) {
    PLAN_TYPE _result;
    HRESULT _hr = get_PlanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void IPlan::PutPlanType ( PLAN_TYPE pVal ) {
    HRESULT _hr = put_PlanType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline HRESULT IPlan::AddPhase ( IDispatch * lpPhase ) {
    HRESULT _hr = raw_AddPhase(lpPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1007)
inline IUnknownPtr IPlan::GetPhaseCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_PhaseCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1008)
inline IUnknownPtr IPlan::GetReferenceContentPtr ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ReferenceContentPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1009)
inline long IPlan::GetNeedVersioning ( ) {
    long _result = 0;
    HRESULT _hr = get_NeedVersioning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void IPlan::PutNeedVersioning ( long pVal ) {
    HRESULT _hr = put_NeedVersioning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline ACTION_TYPE IPlan::GetActionType ( ) {
    ACTION_TYPE _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1012)
inline void IPlan::PutActionType ( ACTION_TYPE pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline long IPlan::GetRelModified ( ) {
    long _result = 0;
    HRESULT _hr = get_RelModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline void IPlan::PutRelModified ( long pVal ) {
    HRESULT _hr = put_RelModified(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1015)
inline long IPlan::GetUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1016)
inline void IPlan::PutUpdtCnt ( long pVal ) {
    HRESULT _hr = put_UpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline double IPlan::GetCommentTextId ( ) {
    double _result = 0;
    HRESULT _hr = get_CommentTextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline void IPlan::PutCommentTextId ( double pVal ) {
    HRESULT _hr = put_CommentTextId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline long IPlan::GetVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline void IPlan::PutVersion ( long pVal ) {
    HRESULT _hr = put_Version(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline long IPlan::GetCommentUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_CommentUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void IPlan::PutCommentUpdtCnt ( long pVal ) {
    HRESULT _hr = put_CommentUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline long IPlan::GetCommentModified ( ) {
    long _result = 0;
    HRESULT _hr = get_CommentModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void IPlan::PutCommentModified ( long pVal ) {
    HRESULT _hr = put_CommentModified(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline long IPlan::GetCommentRemoved ( ) {
    long _result = 0;
    HRESULT _hr = get_CommentRemoved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1026)
inline void IPlan::PutCommentRemoved ( long pVal ) {
    HRESULT _hr = put_CommentRemoved(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline double IPlan::GetPlanId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void IPlan::PutPlanId ( double pVal ) {
    HRESULT _hr = put_PlanId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline double IPlan::GetPersonId ( ) {
    double _result = 0;
    HRESULT _hr = get_PersonId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1030)
inline void IPlan::PutPersonId ( double pVal ) {
    HRESULT _hr = put_PersonId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline HRESULT IPlan::RemovePhase ( struct IPhase * pIPhase ) {
    HRESULT _hr = raw_RemovePhase(pIPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1032)
inline IUnknownPtr IPlan::GetRemovedPhaseCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RemovedPhaseCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1033)
inline long IPlan::GetCheckRefTextExist ( ) {
    long _result = 0;
    HRESULT _hr = get_CheckRefTextExist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline void IPlan::PutCheckRefTextExist ( long pVal ) {
    HRESULT _hr = put_CheckRefTextExist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline HRESULT IPlan::AddRemovedPhase ( IDispatch * lpPhase ) {
    HRESULT _hr = raw_AddRemovedPhase(lpPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1036)
inline HRESULT IPlan::Copy ( struct IPlan * pPlan ) {
    HRESULT _hr = raw_Copy(pPlan);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1037)
inline long IPlan::IsEqual ( struct IPlan * pPlan ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pPlan, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline _variant_t IPlan::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1039)
inline IComponentPtr IPlan::FindOrderComponent ( LONG_PTR hPvOrderObj ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindOrderComponent(hPvOrderObj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(1040)
inline IPhasePtr IPlan::FindComponentPhase ( struct IComponent * pComponent ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_FindComponentPhase(pComponent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1041)
inline long IPlan::GetCatalogInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CatalogInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void IPlan::PutCatalogInd ( long pVal ) {
    HRESULT _hr = put_CatalogInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline double IPlan::GetPlanTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void IPlan::PutPlanTypeCd ( double pVal ) {
    HRESULT _hr = put_PlanTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline double IPlan::GetDisplayMethodCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayMethodCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline void IPlan::PutDisplayMethodCd ( double pVal ) {
    HRESULT _hr = put_DisplayMethodCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline _bstr_t IPlan::GetPlanTypeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanTypeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1048)
inline void IPlan::PutPlanTypeDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanTypeDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline _bstr_t IPlan::GetPlanTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1050)
inline void IPlan::PutPlanTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline PLAN_ZONE IPlan::GetPlanZone ( ) {
    PLAN_ZONE _result;
    HRESULT _hr = get_PlanZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1052)
inline void IPlan::PutPlanZone ( PLAN_ZONE pVal ) {
    HRESULT _hr = put_PlanZone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline DATE IPlan::GetSortDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SortDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void IPlan::PutSortDtTm ( DATE pVal ) {
    HRESULT _hr = put_SortDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline double IPlan::GetPlanClassCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanClassCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline void IPlan::PutPlanClassCd ( double pVal ) {
    HRESULT _hr = put_PlanClassCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1057)
inline _bstr_t IPlan::GetPlanClassDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanClassDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1058)
inline void IPlan::PutPlanClassDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanClassDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline _bstr_t IPlan::GetPlanClassMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanClassMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1060)
inline void IPlan::PutPlanClassMean ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanClassMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1061)
inline _bstr_t IPlan::GetDisplayMethodDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayMethodDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1062)
inline void IPlan::PutDisplayMethodDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayMethodDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline _bstr_t IPlan::GetDisplayMethodMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayMethodMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1064)
inline void IPlan::PutDisplayMethodMean ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayMethodMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline long IPlan::GetRefTextModified ( ) {
    long _result = 0;
    HRESULT _hr = get_RefTextModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline void IPlan::PutRefTextModified ( long pVal ) {
    HRESULT _hr = put_RefTextModified(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline double IPlan::GetPlanEvidenceReltnId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanEvidenceReltnId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline void IPlan::PutPlanEvidenceReltnId ( double pVal ) {
    HRESULT _hr = put_PlanEvidenceReltnId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline long IPlan::GetNewEvidence ( ) {
    long _result = 0;
    HRESULT _hr = get_NewEvidence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void IPlan::PutNewEvidence ( long pVal ) {
    HRESULT _hr = put_NewEvidence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline DATE IPlan::GetBegEffectiveDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_BegEffectiveDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void IPlan::PutBegEffectiveDtTm ( DATE pVal ) {
    HRESULT _hr = put_BegEffectiveDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline DATE IPlan::GetEndEffectiveDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EndEffectiveDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1074)
inline void IPlan::PutEndEffectiveDtTm ( DATE pVal ) {
    HRESULT _hr = put_EndEffectiveDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1075)
inline IComponentPtr IPlan::FindOrderComponentById ( double orderId ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindOrderComponentById(orderId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(1076)
inline IComponentPtr IPlan::FindComponentById ( double compId ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_FindComponentById(compId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(1077)
inline double IPlan::GetRefOwnerPersonId ( ) {
    double _result = 0;
    HRESULT _hr = get_RefOwnerPersonId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1078)
inline void IPlan::PutRefOwnerPersonId ( double pVal ) {
    HRESULT _hr = put_RefOwnerPersonId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1079)
inline HRESULT IPlan::SetFacilityFlexing ( const _variant_t & cv, const _variant_t & disp ) {
    HRESULT _hr = raw_SetFacilityFlexing(cv, disp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1080)
inline _bstr_t IPlan::GetFlexFacilityDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlexFacilityDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1081)
inline double IPlan::GetFlexingFacilityCodeAt ( int idx ) {
    double _result = 0;
    HRESULT _hr = get_FlexingFacilityCodeAt(idx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1082)
inline long IPlan::GetFlexingCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FlexingCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline long IPlan::GetAllFacilityInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AllFacilityInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline void IPlan::PutAllFacilityInd ( long pVal ) {
    HRESULT _hr = put_AllFacilityInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline _bstr_t IPlan::GetDisplayDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1086)
inline void IPlan::PutDisplayDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayDescription(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1087)
inline double IPlan::GetVirtualViewPosAt ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_VirtualViewPosAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline _bstr_t IPlan::FindZynxEvidenceLocatorByPhaseId ( double id ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindZynxEvidenceLocatorByPhaseId(id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1089)
inline _bstr_t IPlan::FindZynxEvidenceLocatorByClinCat ( double clinCatCd, double clinSubCatCd ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindZynxEvidenceLocatorByClinCat(clinCatCd, clinSubCatCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1090)
inline _bstr_t IPlan::FindZynxEvidenceLocatorByCompId ( double id ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindZynxEvidenceLocatorByCompId(id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1091)
inline HRESULT IPlan::AddPwEvidenceReltn ( LONG_PTR pVal ) {
    HRESULT _hr = raw_AddPwEvidenceReltn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1092)
inline _bstr_t IPlan::GetFacilityDisplayAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_FacilityDisplayAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1093)
inline long IPlan::AddProblemDiagnosis ( IDispatch * lpDisp ) {
    long _result = 0;
    HRESULT _hr = raw_AddProblemDiagnosis(lpDisp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline HRESULT IPlan::RemoveProblemDiagnosis ( int Index ) {
    HRESULT _hr = raw_RemoveProblemDiagnosis(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1095)
inline long IPlan::GetProblemDiagChanged ( ) {
    long _result = 0;
    HRESULT _hr = get_ProblemDiagChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline void IPlan::PutProblemDiagChanged ( long pVal ) {
    HRESULT _hr = put_ProblemDiagChanged(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1097)
inline long IPlan::GetProblemDiagCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ProblemDiagCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline _bstr_t IPlan::GetProblemDiagDisplayAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProblemDiagDisplayAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1099)
inline double IPlan::GetProblemDiagNomenIdAt ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ProblemDiagNomenIdAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1100)
inline _bstr_t IPlan::GetProblemDiagConceptCKIAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProblemDiagConceptCKIAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1101)
inline long IPlan::GetRemoveReftextInd ( ) {
    long _result = 0;
    HRESULT _hr = get_RemoveReftextInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline void IPlan::PutRemoveReftextInd ( long pVal ) {
    HRESULT _hr = put_RemoveReftextInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1103)
inline _bstr_t IPlan::FindZynxEvidenceLocatorByPhaseClinCat ( double phaseId, double clinCatCd ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindZynxEvidenceLocatorByPhaseClinCat(phaseId, clinCatCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1104)
inline _bstr_t IPlan::FindZynxEvidenceLocatorByPhaseClinSubCat ( double phaseId, double clinSubCatCd ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindZynxEvidenceLocatorByPhaseClinSubCat(phaseId, clinSubCatCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1105)
inline double IPlan::FindReferenceManualByPhaseId ( double phaseId ) {
    double _result = 0;
    HRESULT _hr = raw_FindReferenceManualByPhaseId(phaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline IUnknownPtr IPlan::GetPhaseReferenceContentPtr ( double phaseId ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_PhaseReferenceContentPtr(phaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1107)
inline long IPlan::GetPwEvidenceReltn ( PLAN_EVIDENCE_LEVEL level, double dVal, double dClinCat, double dClinSubCat, _bstr_t sType, LONG_PTR lVal ) {
    long _result = 0;
    HRESULT _hr = raw_GetPwEvidenceReltn(level, dVal, dClinCat, dClinSubCat, sType, lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline long IPlan::GetPwEvidenceCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPwEvidenceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline HRESULT IPlan::GetPwEvidenceAt ( int Index, LONG_PTR lVal ) {
    HRESULT _hr = raw_GetPwEvidenceAt(Index, lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1110)
inline HRESULT IPlan::RemovePwEvidenceReltn ( LONG_PTR lVal ) {
    HRESULT _hr = raw_RemovePwEvidenceReltn(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1111)
inline HRESULT IPlan::UpdatePwEvidenceReltn ( LONG_PTR lVal ) {
    HRESULT _hr = raw_UpdatePwEvidenceReltn(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1112)
inline HRESULT IPlan::CreatRefTextContentPtrs ( ) {
    HRESULT _hr = raw_CreatRefTextContentPtrs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1113)
inline long IPlan::GetSubPhaseInd ( ) {
    long _result = 0;
    HRESULT _hr = get_SubPhaseInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void IPlan::PutSubPhaseInd ( long pVal ) {
    HRESULT _hr = put_SubPhaseInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline long IPlan::GetHideFlexedCompInd ( ) {
    long _result = 0;
    HRESULT _hr = get_HideFlexedCompInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline void IPlan::PutHideFlexedCompInd ( long pVal ) {
    HRESULT _hr = put_HideFlexedCompInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline IGroupPtr IPlan::GetCPGroupPtr ( double dGroupNbr ) {
    struct IGroup * _result = 0;
    HRESULT _hr = raw_GetCPGroupPtr(dGroupNbr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupPtr(_result, false);
}

#pragma implementation_key(1118)
inline HRESULT IPlan::AddGroup ( struct IGroup * pIGroup ) {
    HRESULT _hr = raw_AddGroup(pIGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1119)
inline IDispatchPtr IPlan::GetGroupCollection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetGroupCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1120)
inline int IPlan::GetGroupCount ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetGroupCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1121)
inline HRESULT IPlan::RemoveGroup ( struct IGroup * pGroup ) {
    HRESULT _hr = raw_RemoveGroup(pGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1122)
inline long IPlan::GetUsingCycleNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_UsingCycleNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void IPlan::PutUsingCycleNbr ( long pVal ) {
    HRESULT _hr = put_UsingCycleNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline long IPlan::GetCycleNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_CycleNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline void IPlan::PutCycleNbr ( long pVal ) {
    HRESULT _hr = put_CycleNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline _bstr_t IPlan::GetDefaultViewMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultViewMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1127)
inline void IPlan::PutDefaultViewMean ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultViewMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline long IPlan::GetPropagateDiagInd ( ) {
    long _result = 0;
    HRESULT _hr = get_PropagateDiagInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1129)
inline void IPlan::PutPropagateDiagInd ( long pVal ) {
    HRESULT _hr = put_PropagateDiagInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline long IPlan::GetStandardCycleNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_StandardCycleNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline void IPlan::PutStandardCycleNbr ( long pVal ) {
    HRESULT _hr = put_StandardCycleNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline long IPlan::GetOrigCycleNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_OrigCycleNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline void IPlan::PutOrigCycleNbr ( long pVal ) {
    HRESULT _hr = put_OrigCycleNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1134)
inline long IPlan::GetChemoRelatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ChemoRelatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1135)
inline void IPlan::PutChemoRelatedInd ( long pVal ) {
    HRESULT _hr = put_ChemoRelatedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1136)
inline long IPlan::GetChemoInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ChemoInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline void IPlan::PutChemoInd ( long pVal ) {
    HRESULT _hr = put_ChemoInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline long IPlan::GetProviderPromptInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ProviderPromptInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1139)
inline void IPlan::PutProviderPromptInd ( long pVal ) {
    HRESULT _hr = put_ProviderPromptInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1140)
inline double IPlan::GetProviderId ( ) {
    double _result = 0;
    HRESULT _hr = get_ProviderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1141)
inline void IPlan::PutProviderId ( double pVal ) {
    HRESULT _hr = put_ProviderId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1142)
inline double IPlan::GetCommunicationTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CommunicationTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1143)
inline void IPlan::PutCommunicationTypeCd ( double pVal ) {
    HRESULT _hr = put_CommunicationTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline IDispatchPtr IPlan::GetUTCSortDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCSortDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1145)
inline void IPlan::PutUTCSortDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCSortDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1146)
inline _bstr_t IPlan::BuildRTF ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BuildRTF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1147)
inline IDispatchPtr IPlan::GetSuggestedPlan ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SuggestedPlan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1148)
inline void IPlan::PutSuggestedPlan ( IDispatch * pVal ) {
    HRESULT _hr = put_SuggestedPlan(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline long IPlan::GetAllowCopyForwardInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AllowCopyForwardInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void IPlan::PutAllowCopyForwardInd ( long pVal ) {
    HRESULT _hr = put_AllowCopyForwardInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline long IPlan::GetNewestVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_NewestVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline void IPlan::PutNewestVersion ( long pVal ) {
    HRESULT _hr = put_NewestVersion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline double IPlan::GetNewestVersionPathwayCatId ( ) {
    double _result = 0;
    HRESULT _hr = get_NewestVersionPathwayCatId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1154)
inline void IPlan::PutNewestVersionPathwayCatId ( double pVal ) {
    HRESULT _hr = put_NewestVersionPathwayCatId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline long IPlan::GetNewestVersionActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_NewestVersionActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void IPlan::PutNewestVersionActiveInd ( long pVal ) {
    HRESULT _hr = put_NewestVersionActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline COMP_LOADING_STATUS IPlan::GetComponentLoaded ( ) {
    COMP_LOADING_STATUS _result;
    HRESULT _hr = raw_GetComponentLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline HRESULT IPlan::SetEventSetNamesByPhaseId ( double dPhaseId, LONG_PTR lEventSetNames ) {
    HRESULT _hr = raw_SetEventSetNamesByPhaseId(dPhaseId, lEventSetNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1159)
inline HRESULT IPlan::GetEventSetNamesByPhaseId ( double dPhaseId, LONG_PTR * lEventSetNames ) {
    HRESULT _hr = raw_GetEventSetNamesByPhaseId(dPhaseId, lEventSetNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1160)
inline long IPlan::PhaseHasEventSetNames ( double dPhaseId ) {
    long _result = 0;
    HRESULT _hr = raw_PhaseHasEventSetNames(dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline IPhasePtr IPlan::GetAutoInitiatePhase ( ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetAutoInitiatePhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1162)
inline IPhasePtr IPlan::GetCarePlanPhase ( ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetCarePlanPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1163)
inline HRESULT IPlan::RemoveOldPwEvidenceReltnForCopyPlan ( LONG_PTR lVal ) {
    HRESULT _hr = raw_RemoveOldPwEvidenceReltnForCopyPlan(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1164)
inline long IPlan::GetPlanActionLoaded ( ) {
    long _result = 0;
    HRESULT _hr = get_PlanActionLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1165)
inline void IPlan::PutPlanActionLoaded ( long pVal ) {
    HRESULT _hr = put_PlanActionLoaded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1166)
inline long IPlan::GetCycleBeginNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_CycleBeginNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void IPlan::PutCycleBeginNbr ( long pVal ) {
    HRESULT _hr = put_CycleBeginNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline long IPlan::GetCycleEndNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_CycleEndNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline void IPlan::PutCycleEndNbr ( long pVal ) {
    HRESULT _hr = put_CycleEndNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1170)
inline double IPlan::GetCycleLabelCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CycleLabelCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1171)
inline void IPlan::PutCycleLabelCd ( double pVal ) {
    HRESULT _hr = put_CycleLabelCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1172)
inline short IPlan::GetCycleDisplayEndInd ( ) {
    short _result = 0;
    HRESULT _hr = get_CycleDisplayEndInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1173)
inline void IPlan::PutCycleDisplayEndInd ( short pVal ) {
    HRESULT _hr = put_CycleDisplayEndInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1174)
inline short IPlan::GetCycleLockEndInd ( ) {
    short _result = 0;
    HRESULT _hr = get_CycleLockEndInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline void IPlan::PutCycleLockEndInd ( short pVal ) {
    HRESULT _hr = put_CycleLockEndInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline long IPlan::GetCycleIncrementNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_CycleIncrementNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline void IPlan::PutCycleIncrementNbr ( long pVal ) {
    HRESULT _hr = put_CycleIncrementNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1178)
inline long IPlan::HasPhaseOffsets ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasPhaseOffsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1179)
inline HRESULT IPlan::RemoveAllPhaseOffsets ( ) {
    HRESULT _hr = raw_RemoveAllPhaseOffsets();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1180)
inline DEFAULT_VISIT_TYPE_FLAG IPlan::GetDefaultVisitTypeFlag ( ) {
    DEFAULT_VISIT_TYPE_FLAG _result;
    HRESULT _hr = get_DefaultVisitTypeFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1181)
inline void IPlan::PutDefaultVisitTypeFlag ( DEFAULT_VISIT_TYPE_FLAG pVal ) {
    HRESULT _hr = put_DefaultVisitTypeFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline long IPlan::GetPromptOnSelectionInd ( ) {
    long _result = 0;
    HRESULT _hr = get_PromptOnSelectionInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline void IPlan::PutPromptOnSelectionInd ( long pVal ) {
    HRESULT _hr = put_PromptOnSelectionInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1184)
inline IPhasePtr IPlan::GetPhaseByKey ( double dPhaseId ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetPhaseByKey(dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1185)
inline HRESULT IPlan::GetSchedulablePhasesByComponentId ( double dComponentId, LONG_PTR larrPhases ) {
    HRESULT _hr = raw_GetSchedulablePhasesByComponentId(dComponentId, larrPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1186)
inline HRESULT IPlan::GetNonSchedulablePhases ( LONG_PTR larrPhases ) {
    HRESULT _hr = raw_GetNonSchedulablePhases(larrPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1187)
inline HRESULT IPlan::UpdateSchedulablePhasesForComponent ( IDispatch * pComponent, LONG_PTR larrPhases ) {
    HRESULT _hr = raw_UpdateSchedulablePhasesForComponent(pComponent, larrPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1188)
inline HRESULT IPlan::RemoveCompPathwayRelationsByPhase ( IDispatch * pPhase ) {
    HRESULT _hr = raw_RemoveCompPathwayRelationsByPhase(pPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1189)
inline HRESULT IPlan::GetCompPathwayRelations ( LONG_PTR larrCompPathwayRelations ) {
    HRESULT _hr = raw_GetCompPathwayRelations(larrCompPathwayRelations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1190)
inline HRESULT IPlan::SetCompPathwayRelations ( LONG_PTR larrCompPathwayRelations ) {
    HRESULT _hr = raw_SetCompPathwayRelations(larrCompPathwayRelations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1191)
inline long IPlan::GetExpectedCycleNbr ( ) {
    long _result = 0;
    HRESULT _hr = get_ExpectedCycleNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline void IPlan::PutExpectedCycleNbr ( long pVal ) {
    HRESULT _hr = put_ExpectedCycleNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline long IPlan::HasOrderingDefaults ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasOrderingDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline HRESULT IPlan::AddCompPathwayRelations ( LONG_PTR larrCompPathwayRelations ) {
    HRESULT _hr = raw_AddCompPathwayRelations(larrCompPathwayRelations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1195)
inline IComponentPtr IPlan::GetSchedulableComponentByPhaseId ( double dPhaseId ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_GetSchedulableComponentByPhaseId(dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(1196)
inline HRESULT IPlan::GetSequencedPhaseArray ( LONG_PTR larrPhases ) {
    HRESULT _hr = raw_GetSequencedPhaseArray(larrPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1197)
inline HRESULT IPlan::GetFakeInitiatePendingPhases ( LONG_PTR larrPhases ) {
    HRESULT _hr = raw_GetFakeInitiatePendingPhases(larrPhases);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1198)
inline long IPlan::IsPhaseSchedulable ( double dPhaseId ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseSchedulable(dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1199)
inline long IPlan::IsComponentSchedulable ( double dComponentId ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentSchedulable(dComponentId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1200)
inline IPhasePtr IPlan::GetEarliestSchedulablePhaseByComponentId ( double dComponentId ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetEarliestSchedulablePhaseByComponentId(dComponentId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1201)
inline long IPlan::IsComponentLinkedToSpecificPhase ( double dComponentId, double dPhaseId ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentLinkedToSpecificPhase(dComponentId, dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1202)
inline HRESULT IPlan::GetSynonyms ( LONG_PTR larrSynonyms ) {
    HRESULT _hr = raw_GetSynonyms(larrSynonyms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1203)
inline HRESULT IPlan::SetSynonyms ( LONG_PTR larrSynonyms ) {
    HRESULT _hr = raw_SetSynonyms(larrSynonyms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1204)
inline double IPlan::GetPrimarySynonymId ( ) {
    double _result = 0;
    HRESULT _hr = get_PrimarySynonymId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1205)
inline void IPlan::PutPrimarySynonymId ( double pVal ) {
    HRESULT _hr = put_PrimarySynonymId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1206)
inline long IPlan::GetPrimarySynonymModified ( ) {
    long _result = 0;
    HRESULT _hr = get_PrimarySynonymModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1207)
inline void IPlan::PutPrimarySynonymModified ( long pVal ) {
    HRESULT _hr = put_PrimarySynonymModified(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1208)
inline _bstr_t IPlan::GetCurrentSynonym ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentSynonym(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1209)
inline void IPlan::PutCurrentSynonym ( _bstr_t pVal ) {
    HRESULT _hr = put_CurrentSynonym(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline _bstr_t IPlan::GetSynonymById ( double dSynonymId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSynonymById(dSynonymId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1211)
inline HRESULT IPlan::RemovePhaseByKey ( double dKey ) {
    HRESULT _hr = raw_RemovePhaseByKey(dKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1212)
inline _bstr_t IPlan::GetTrialPlanDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TrialPlanDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1213)
inline void IPlan::PutTrialPlanDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_TrialPlanDescription(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1214)
inline IPhasePtr IPlan::GetFirstPhase ( ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetFirstPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1215)
inline double IPlan::GetEarliestOffsetInMinutes ( struct IPhase * pPhase ) {
    double _result = 0;
    HRESULT _hr = raw_GetEarliestOffsetInMinutes(pPhase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline long IPlan::HasProtocolPhase ( ) {
    long _result = 0;
    HRESULT _hr = raw_HasProtocolPhase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1217)
inline IUnknownPtr IPlan::GetComponentGroupReferenceContentPtr ( IDispatch * pComponent ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ComponentGroupReferenceContentPtr(pComponent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1218)
inline double IPlan::GetRegimenElementId ( ) {
    double _result = 0;
    HRESULT _hr = get_RegimenElementId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1219)
inline void IPlan::PutRegimenElementId ( double pVal ) {
    HRESULT _hr = put_RegimenElementId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1220)
inline EPlanVersionStatus IPlan::GetVersionStatus ( ) {
    EPlanVersionStatus _result;
    HRESULT _hr = get_VersionStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1221)
inline void IPlan::PutVersionStatus ( EPlanVersionStatus pVal ) {
    HRESULT _hr = put_VersionStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1222)
inline _bstr_t IPlan::GetUUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1223)
inline void IPlan::PutUUID ( _bstr_t pVal ) {
    HRESULT _hr = put_UUID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1224)
inline double IPlan::GetCustomizedPlanId ( ) {
    double _result = 0;
    HRESULT _hr = get_CustomizedPlanId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1225)
inline void IPlan::PutCustomizedPlanId ( double pVal ) {
    HRESULT _hr = put_CustomizedPlanId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1226)
inline HRESULT IPlan::GetSchedulableComponentsIdsByPhaseId ( double dPhaseId, LONG_PTR lComponentsIdsVector ) {
    HRESULT _hr = raw_GetSchedulableComponentsIdsByPhaseId(dPhaseId, lComponentsIdsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline HRESULT IPlan::GetSchedulablePhasesIdsByComponentId ( double dComponentId, LONG_PTR lPhasesIdsVector ) {
    HRESULT _hr = raw_GetSchedulablePhasesIdsByComponentId(dComponentId, lPhasesIdsVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1228)
inline HRESULT IPlan::GetMultipleIncludedComponentsLinkedToOnePhase ( LONG_PTR lComponentsByPhaseMap ) {
    HRESULT _hr = raw_GetMultipleIncludedComponentsLinkedToOnePhase(lComponentsByPhaseMap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1229)
inline IComponentPtr IPlan::GetConflictingIncludedSchedulableComponent ( struct IComponent * pIComponent ) {
    struct IComponent * _result = 0;
    HRESULT _hr = raw_GetConflictingIncludedSchedulableComponent(pIComponent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComponentPtr(_result, false);
}

#pragma implementation_key(1230)
inline HRESULT IPlan::SwitchCompPathRelationsIds ( LONG_PTR lIdsMap ) {
    HRESULT _hr = raw_SwitchCompPathRelationsIds(lIdsMap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1231)
inline long IPlan::DuplicateProblemDiagnosis ( _bstr_t sCKI ) {
    long _result = 0;
    HRESULT _hr = raw_DuplicateProblemDiagnosis(sCKI, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1232)
inline _bstr_t IPlan::GetPathwayCustomizationPlanName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathwayCustomizationPlanName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1233)
inline void IPlan::PutPathwayCustomizationPlanName ( _bstr_t pVal ) {
    HRESULT _hr = put_PathwayCustomizationPlanName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1234)
inline _bstr_t IPlan::GetPathwayReferencePlanName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathwayReferencePlanName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1235)
inline void IPlan::PutPathwayReferencePlanName ( _bstr_t pVal ) {
    HRESULT _hr = put_PathwayReferencePlanName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline int IPlan::ClearSchedulablePhasesForComponent ( IDispatch * pComponent ) {
    int _result = 0;
    HRESULT _hr = raw_ClearSchedulablePhasesForComponent(pComponent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline long IPlan::IsAnIVSequence ( IV_SEQUENCE_STATUS eSequenceStatus ) {
    long _result = 0;
    HRESULT _hr = raw_IsAnIVSequence(eSequenceStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1238)
inline HRESULT IPlan::AddReview ( struct IReview * pIReview ) {
    HRESULT _hr = raw_AddReview(pIReview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1239)
inline IReviewPtr IPlan::GetReview ( EPowerPlanReviewType powerPlanReviewType ) {
    struct IReview * _result = 0;
    HRESULT _hr = raw_GetReview(powerPlanReviewType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReviewPtr(_result, false);
}

#pragma implementation_key(1240)
inline IUnknownPtr IPlan::GetReviewCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetReviewCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1241)
inline long IPlan::GetRestrictedActionsBitmask ( ) {
    long _result = 0;
    HRESULT _hr = get_RestrictedActionsBitmask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1242)
inline void IPlan::PutRestrictedActionsBitmask ( long lRestrictedActionsBitmask ) {
    HRESULT _hr = put_RestrictedActionsBitmask(lRestrictedActionsBitmask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1243)
inline long IPlan::GetAllowProposal ( ) {
    long _result = 0;
    HRESULT _hr = get_AllowProposal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1244)
inline void IPlan::PutAllowProposal ( long pAllowProposal ) {
    HRESULT _hr = put_AllowProposal(pAllowProposal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1245)
inline long IPlan::GetOpenByDefaultInd ( ) {
    long _result = 0;
    HRESULT _hr = get_OpenByDefaultInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void IPlan::PutOpenByDefaultInd ( long pVal ) {
    HRESULT _hr = put_OpenByDefaultInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline IPhasePtr IPlan::GetPhaseToOpenByDefault ( ) {
    struct IPhase * _result = 0;
    HRESULT _hr = raw_GetPhaseToOpenByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPhasePtr(_result, false);
}

#pragma implementation_key(1248)
inline double IPlan::GetVersionPlanCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_VersionPlanCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1249)
inline void IPlan::PutVersionPlanCatalogId ( double pVal ) {
    HRESULT _hr = put_VersionPlanCatalogId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline HRESULT IPlan::AddAdhocSchedulingLink ( double dActComponentId, double dTreatmentPeriodId ) {
    HRESULT _hr = raw_AddAdhocSchedulingLink(dActComponentId, dTreatmentPeriodId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1251)
inline long IPlan::IsPhaseLinkedToExcludedSchedulableComponents ( IDispatch * pPhaseDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_IsPhaseLinkedToExcludedSchedulableComponents(pPhaseDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1252)
inline HRESULT IPlan::GetPhaseLinkedSchedulableComponents ( double dPhaseId, LONG_PTR lLinkedSchedulableComponents ) {
    HRESULT _hr = raw_GetPhaseLinkedSchedulableComponents(dPhaseId, lLinkedSchedulableComponents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1253)
inline long IPlan::IsComponentLinkedToSpecificPhaseEx ( double dComponentId, double dPhaseId ) {
    long _result = 0;
    HRESULT _hr = raw_IsComponentLinkedToSpecificPhaseEx(dComponentId, dPhaseId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1254)
inline _bstr_t IPlan::GetProviderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1255)
inline void IPlan::PutProviderName ( _bstr_t pVal ) {
    HRESULT _hr = put_ProviderName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1256)
inline LONG_PTR IPlan::GetProtocolReviewPhaseIds ( ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetProtocolReviewPhaseIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1257)
inline long IPlan::GetAllowSaveAsMyFavorite ( ) {
    long _result = 0;
    HRESULT _hr = get_AllowSaveAsMyFavorite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1258)
inline void IPlan::PutAllowSaveAsMyFavorite ( long pSaveAsMyFavorite ) {
    HRESULT _hr = put_AllowSaveAsMyFavorite(pSaveAsMyFavorite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline LONG_PTR IPlan::GetSchedulingLinkedPhaseIdsByComponentIdMap ( ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetSchedulingLinkedPhaseIdsByComponentIdMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline long IPlan::GetOverrideMRDOnPlanInd ( ) {
    long _result = 0;
    HRESULT _hr = get_OverrideMRDOnPlanInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1261)
inline void IPlan::PutOverrideMRDOnPlanInd ( long pOverrideMRDOnPlanInd ) {
    HRESULT _hr = put_OverrideMRDOnPlanInd(pOverrideMRDOnPlanInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1262)
inline long IPlan::DoesPlanHaveMultiplePhases ( ) {
    long _result = 0;
    HRESULT _hr = raw_DoesPlanHaveMultiplePhases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline HRESULT IPlan::GetLinkedPhaseList ( LONG_PTR lLinkedPhaseList ) {
    HRESULT _hr = raw_GetLinkedPhaseList(lLinkedPhaseList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPlanLookUp wrapper method implementations
//

#pragma implementation_key(1264)
inline int IPlanLookUp::StartSearch ( _bstr_t sSearchString ) {
    int _result = 0;
    HRESULT _hr = raw_StartSearch(sSearchString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline double IPlanLookUp::GetPlanCatalogId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_PlanCatalogId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1266)
inline _bstr_t IPlanLookUp::GetPlanDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1267)
inline _bstr_t IPlanLookUp::GetPlanVersionNum ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanVersionNum(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1268)
inline long IPlanLookUp::GetActiveInd ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_ActiveInd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline int IPlanLookUp::GetOldVersionCnt ( int Index ) {
    int _result = 0;
    HRESULT _hr = raw_GetOldVersionCnt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline double IPlanLookUp::GetOldVerCatalogId ( int Index, int verIndex ) {
    double _result = 0;
    HRESULT _hr = get_OldVerCatalogId(Index, verIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline _bstr_t IPlanLookUp::GetOldVerDescription ( int Index, int verIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_OldVerDescription(Index, verIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1272)
inline _bstr_t IPlanLookUp::GetOldVersionNum ( int Index, int verIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_OldVersionNum(Index, verIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1273)
inline long IPlanLookUp::GetOldVerActiveInd ( int Index, int verIndex ) {
    long _result = 0;
    HRESULT _hr = get_OldVerActiveInd(Index, verIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline IUnknownPtr IPlanLookUp::SelectPlan ( int Index, int verIndex ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectPlan(Index, verIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1275)
inline HRESULT IPlanLookUp::LoadPlanDetails ( struct IPlan * pPlan ) {
    HRESULT _hr = raw_LoadPlanDetails(pPlan);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1276)
inline double IPlanLookUp::GetPlanEvidenceReltnId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_PlanEvidenceReltnId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1277)
inline HRESULT IPlanLookUp::LoadPhaseDetails ( struct IPhase * pPhase ) {
    HRESULT _hr = raw_LoadPhaseDetails(pPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1278)
inline int IPlanLookUp::SearchPlansByFacility ( _bstr_t sSearch, double facilityCd ) {
    int _result = 0;
    HRESULT _hr = raw_SearchPlansByFacility(sSearch, facilityCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline _bstr_t IPlanLookUp::GetPlanDisplayDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanDisplayDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1280)
inline _bstr_t IPlanLookUp::GetPlanEvidenceLocator ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanEvidenceLocator(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1281)
inline IUnknownPtr IPlanLookUp::SelectPrsnlPlan ( int Index ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectPrsnlPlan(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1282)
inline _bstr_t IPlanLookUp::GetPrsnlPlanDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrsnlPlanDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1283)
inline HRESULT IPlanLookUp::SearchProblemDiagnosesPlans ( long bProblem, long bDiagnoses, double dPatientId, double dEncounterId ) {
    HRESULT _hr = raw_SearchProblemDiagnosesPlans(bProblem, bDiagnoses, dPatientId, dEncounterId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1284)
inline OUTCOME_ACT_STATUS IPlanLookUp::SynchProblemDxPlans ( ) {
    OUTCOME_ACT_STATUS _result;
    HRESULT _hr = raw_SynchProblemDxPlans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline LONG_PTR IPlanLookUp::GetPlanCountByNomenclatureId ( double nomenclatureId ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetPlanCountByNomenclatureId(nomenclatureId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1286)
inline HRESULT IPlanLookUp::GetNomenclaturePlanArray ( double nomenclatureId, VARIANT * pPlanArray ) {
    HRESULT _hr = raw_GetNomenclaturePlanArray(nomenclatureId, pPlanArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1287)
inline IUnknownPtr IPlanLookUp::SelectPlanByCatId ( double pathwayCatalogId ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectPlanByCatId(pathwayCatalogId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1288)
inline long IPlanLookUp::GetVirtualViewOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_VirtualViewOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline void IPlanLookUp::PutVirtualViewOffset ( long pVal ) {
    HRESULT _hr = put_VirtualViewOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline double IPlanLookUp::GetfacilityCd ( ) {
    double _result = 0;
    HRESULT _hr = get_facilityCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1291)
inline void IPlanLookUp::PutfacilityCd ( double pVal ) {
    HRESULT _hr = put_facilityCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1292)
inline int IPlanLookUp::SearchAllPlans ( _bstr_t sSearchString ) {
    int _result = 0;
    HRESULT _hr = raw_SearchAllPlans(sSearchString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1293)
inline IPlanPtr IPlanLookUp::CopyPlan ( int Index, int verIndex ) {
    struct IPlan * _result = 0;
    HRESULT _hr = raw_CopyPlan(Index, verIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanPtr(_result, false);
}

#pragma implementation_key(1294)
inline int IPlanLookUp::SearchPlanPhase ( _bstr_t sSearchString ) {
    int _result = 0;
    HRESULT _hr = raw_SearchPlanPhase(sSearchString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1295)
inline double IPlanLookUp::GetPhaseCatalogId ( int planIdx, int phaseIdx ) {
    double _result = 0;
    HRESULT _hr = get_PhaseCatalogId(planIdx, phaseIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline _bstr_t IPlanLookUp::GetPhaseDescription ( int planIdx, int phaseIdx ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhaseDescription(planIdx, phaseIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1297)
inline long IPlanLookUp::GetPhaseCount ( int planIdx ) {
    long _result = 0;
    HRESULT _hr = raw_GetPhaseCount(planIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline IDispatchPtr IPlanLookUp::CopyComponents ( struct IPlan * pPlan, struct IPhase * pPhase ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CopyComponents(pPlan, pPhase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1299)
inline int IPlanLookUp::FindParentIndex ( double dPhaseCatId ) {
    int _result = 0;
    HRESULT _hr = raw_FindParentIndex(dPhaseCatId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline int IPlanLookUp::SearchSubPhasePlan ( _bstr_t sSearchString ) {
    int _result = 0;
    HRESULT _hr = raw_SearchSubPhasePlan(sSearchString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline long IPlanLookUp::GetAllFacilityAccessInd ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_AllFacilityAccessInd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline _variant_t IPlanLookUp::GetFacilityAccessList ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FacilityAccessList(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1303)
inline long IPlanLookUp::GetSkipSubPhaseInd ( ) {
    long _result = 0;
    HRESULT _hr = get_SkipSubPhaseInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1304)
inline void IPlanLookUp::PutSkipSubPhaseInd ( long pVal ) {
    HRESULT _hr = put_SkipSubPhaseInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1305)
inline HRESULT IPlanLookUp::LoadPlanPhase ( struct IPlan * pPlan, struct IPhase * pPhase ) {
    HRESULT _hr = raw_LoadPlanPhase(pPlan, pPhase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1306)
inline HRESULT IPlanLookUp::QuitAllJobs ( ) {
    HRESULT _hr = raw_QuitAllJobs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1307)
inline HRESULT IPlanLookUp::GetActivePlanCycles ( struct IPlan * pPlan ) {
    HRESULT _hr = raw_GetActivePlanCycles(pPlan);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1308)
inline int IPlanLookUp::GetLatestCycleIndex ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetLatestCycleIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline long IPlanLookUp::GetPlanCycleCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPlanCycleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1310)
inline _bstr_t IPlanLookUp::GetLatestCyclePrsnl ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLatestCyclePrsnl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1311)
inline DATE IPlanLookUp::GetLatestCycleOrderDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetLatestCycleOrderDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1312)
inline long IPlanLookUp::CheckForDuplicateCycle ( long lCycleNbr ) {
    long _result = 0;
    HRESULT _hr = raw_CheckForDuplicateCycle(lCycleNbr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1313)
inline long IPlanLookUp::GetLatestCycleNbr ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetLatestCycleNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1314)
inline LONG_PTR IPlanLookUp::GetSearchResult ( int Index ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetSearchResult(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline long IPlanLookUp::GetSearchResultCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetSearchResultCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1316)
inline HRESULT IPlanLookUp::GetPrsnlPlanSearchResult ( int Index, LONG_PTR * pResult ) {
    HRESULT _hr = raw_GetPrsnlPlanSearchResult(Index, pResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1317)
inline _variant_t IPlanLookUp::GetProbDxNomenIds ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProbDxNomenIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1318)
inline IDispatchPtr IPlanLookUp::GetUTCLatestCycleOrderDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetUTCLatestCycleOrderDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1319)
inline int IPlanLookUp::SearchPlansByFacilityEx2 ( _bstr_t sSearch, unsigned int searchType, double facilityCd, int maxResults, double dPatientId, double dEncounterId, long bSearchCustomizedPlans ) {
    int _result = 0;
    HRESULT _hr = raw_SearchPlansByFacilityEx2(sSearch, searchType, facilityCd, maxResults, dPatientId, dEncounterId, bSearchCustomizedPlans, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1320)
inline int IPlanLookUp::SearchPrsnlPlansEx ( double dUserId, double dPatientId, double dEncounterId ) {
    int _result = 0;
    HRESULT _hr = raw_SearchPrsnlPlansEx(dUserId, dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1321)
inline long IPlanLookUp::SearchPreviousTreatments ( double dPatientId, double dEncounterId, double dFacilityCd ) {
    long _result = 0;
    HRESULT _hr = raw_SearchPreviousTreatments(dPatientId, dEncounterId, dFacilityCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1322)
inline HRESULT IPlanLookUp::SearchProbDxPlansEx ( long bProblems, long bDiagnoses, long bPrevTreatments, double dPatientId, double dEncounterId ) {
    HRESULT _hr = raw_SearchProbDxPlansEx(bProblems, bDiagnoses, bPrevTreatments, dPatientId, dEncounterId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1323)
inline short IPlanLookUp::GetFacilityFlexingInd ( ) {
    short _result = 0;
    HRESULT _hr = get_FacilityFlexingInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1324)
inline void IPlanLookUp::PutFacilityFlexingInd ( short pVal ) {
    HRESULT _hr = put_FacilityFlexingInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline IUnknownPtr IPlanLookUp::SelectPlanByCatIdWithPatientInfo ( double dPathwayCatalogId, double dPersonId, double dEncounterId ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectPlanByCatIdWithPatientInfo(dPathwayCatalogId, dPersonId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1326)
inline long IPlanLookUp::GetLatestCycleExpectedNbr ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetLatestCycleExpectedNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline double IPlanLookUp::GetLatestCycleLabelCd ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetLatestCycleLabelCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline _bstr_t IPlanLookUp::GetLatestCycleProviderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLatestCycleProviderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1329)
inline _bstr_t IPlanLookUp::GetLatestCycleCommunicationType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLatestCycleCommunicationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1330)
inline _bstr_t IPlanLookUp::GetLatestCycleGroupDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLatestCycleGroupDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1331)
inline _bstr_t IPlanLookUp::GetPowerTrialName ( int iIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_PowerTrialName(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1332)
inline int IPlanLookUp::StartSearchWithTrials ( _bstr_t sSearchString ) {
    int _result = 0;
    HRESULT _hr = raw_StartSearchWithTrials(sSearchString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline EPlanVersionStatus IPlanLookUp::GetVersionStatus ( int iIndex ) {
    EPlanVersionStatus _result;
    HRESULT _hr = get_VersionStatus(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline EPlanVersionStatus IPlanLookUp::GetOldVersionStatus ( int iIndex, int iVersionIndex ) {
    EPlanVersionStatus _result;
    HRESULT _hr = get_OldVersionStatus(iIndex, iVersionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1335)
inline long IPlanLookUp::SearchInTestPlans ( double dFacilityCd ) {
    long _result = 0;
    HRESULT _hr = raw_SearchInTestPlans(dFacilityCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1336)
inline LONG_PTR IPlanLookUp::GetInTestPlanSearchResult ( int Index ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetInTestPlanSearchResult(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline int IPlanLookUp::LoadPlanVersions ( double dPlanCatalogId ) {
    int _result = 0;
    HRESULT _hr = raw_LoadPlanVersions(dPlanCatalogId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline DATE IPlanLookUp::GetBeginEffectiveDate ( int iIndex ) {
    DATE _result = 0;
    HRESULT _hr = get_BeginEffectiveDate(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1339)
inline DATE IPlanLookUp::GetEndEffectiveDate ( int iIndex ) {
    DATE _result = 0;
    HRESULT _hr = get_EndEffectiveDate(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline long IPlanLookUp::GetUpdtCnt ( int iIndex ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1341)
inline IPlanPtr IPlanLookUp::LoadCatalogPlanWithCustomization ( double dPlanCatalogId, double dCustomizedPlanId, double dLocationCd, long bLoadForPlanTool, long bPrefetchActivityIds, long bReplaceCatalogIds, LONG_PTR lsErrorReport ) {
    struct IPlan * _result = 0;
    HRESULT _hr = raw_LoadCatalogPlanWithCustomization(dPlanCatalogId, dCustomizedPlanId, dLocationCd, bLoadForPlanTool, bPrefetchActivityIds, bReplaceCatalogIds, lsErrorReport, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanPtr(_result, false);
}

#pragma implementation_key(1342)
inline IPlanPtr IPlanLookUp::LoadCatalogPlanFromSearchResult ( int iIndex, int iVersionIndex, long bReplaceCatalogIds ) {
    struct IPlan * _result = 0;
    HRESULT _hr = raw_LoadCatalogPlanFromSearchResult(iIndex, iVersionIndex, bReplaceCatalogIds, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanPtr(_result, false);
}

#pragma implementation_key(1343)
inline LONG_PTR IPlanLookUp::QueryCustomizedPlans ( LONG_PTR lQueryCustomizedPlansCriteria ) {
    LONG_PTR _result;
    HRESULT _hr = raw_QueryCustomizedPlans(lQueryCustomizedPlansCriteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline int IPlanLookUp::SearchPersonalizedPlans ( double dPatientId, double dEncounterId ) {
    int _result = 0;
    HRESULT _hr = raw_SearchPersonalizedPlans(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline LONG_PTR IPlanLookUp::GetPersonalizedPlanSearchResult ( int iIndex ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetPersonalizedPlanSearchResult(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline IPlanPtr IPlanLookUp::LoadCatalogPlanUsingPatientDataWithCustomization ( double dPlanCatalogId, double dCustomizedPlanId, double dLocationCd, long bLoadForPlanTool, long bPrefetchActivityIds, long bReplaceCatalogIds, double dPatientId, double dEncounterId, double dProviderPatientRelationCd, LONG_PTR lsErrorReport ) {
    struct IPlan * _result = 0;
    HRESULT _hr = raw_LoadCatalogPlanUsingPatientDataWithCustomization(dPlanCatalogId, dCustomizedPlanId, dLocationCd, bLoadForPlanTool, bPrefetchActivityIds, bReplaceCatalogIds, dPatientId, dEncounterId, dProviderPatientRelationCd, lsErrorReport, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanPtr(_result, false);
}

#pragma implementation_key(1347)
inline IPlanPtr IPlanLookUp::LoadCatalogPlan ( LONG_PTR lQueryReferencePowerPlansCriteria ) {
    struct IPlan * _result = 0;
    HRESULT _hr = raw_LoadCatalogPlan(lQueryReferencePowerPlansCriteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPlanPtr(_result, false);
}

#pragma implementation_key(1348)
inline long IPlanLookUp::ReplicatePhaseAndAddToPlan ( struct IPhase * pPhase, struct IPlan * pPlan, double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_ReplicatePhaseAndAddToPlan(pPhase, pPlan, dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1349)
inline long IPlanLookUp::LoadSubPhaseDetailsAndAddToPlan ( struct IPhase * pSubPhase, struct IPlan * pPlan, double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_LoadSubPhaseDetailsAndAddToPlan(pSubPhase, pPlan, dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1350)
inline int IPlanLookUp::SearchPersonalizedPlansWithString ( _bstr_t searchStr, int iSearchStringType, double dPatientId, double dEncounterId ) {
    int _result = 0;
    HRESULT _hr = raw_SearchPersonalizedPlansWithString(searchStr, iSearchStringType, dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1351)
inline HRESULT IPlanLookUp::SetProblemsList ( IDispatch * pDispatch ) {
    HRESULT _hr = raw_SetProblemsList(pDispatch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1352)
inline HRESULT IPlanLookUp::SetDiagnosesList ( IDispatch * pDispatch ) {
    HRESULT _hr = raw_SetDiagnosesList(pDispatch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1353)
inline long IPlanLookUp::SearchPreviousTreatmentsWithoutLimit ( double dPatientId, double dEncounterId, double dFacilityCd ) {
    long _result = 0;
    HRESULT _hr = raw_SearchPreviousTreatmentsWithoutLimit(dPatientId, dEncounterId, dFacilityCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1354)
inline LONG_PTR IPlanLookUp::GetComponentIdMap ( ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetComponentIdMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IProVideObjectEvent wrapper method implementations
//

#pragma implementation_key(1355)
inline HRESULT IProVideObjectEvent::Locked ( ) {
    HRESULT _hr = raw_Locked();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1356)
inline HRESULT IProVideObjectEvent::Unlocked ( ) {
    HRESULT _hr = raw_Unlocked();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1357)
inline HRESULT IProVideObjectEvent::Changed ( ) {
    HRESULT _hr = raw_Changed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOrderLookUp wrapper method implementations
//

#pragma implementation_key(1358)
inline long IOrderLookUp::SearchOrderable ( _bstr_t sSearch ) {
    long _result = 0;
    HRESULT _hr = raw_SearchOrderable(sSearch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1359)
inline double IOrderLookUp::GetCatalogCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_CatalogCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1360)
inline _bstr_t IOrderLookUp::GetMnemonic ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mnemonic(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1361)
inline double IOrderLookUp::GetCatalogTypeCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_CatalogTypeCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline double IOrderLookUp::GetSynonymId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_SynonymId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline short IOrderLookUp::GetOrderTypeFlag ( int Index ) {
    short _result = 0;
    HRESULT _hr = get_OrderTypeFlag(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1364)
inline void IOrderLookUp::PutCatTypeCd ( double _arg1 ) {
    HRESULT _hr = put_CatTypeCd(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1365)
inline void IOrderLookUp::PutActTypeCd ( double _arg1 ) {
    HRESULT _hr = put_ActTypeCd(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline void IOrderLookUp::PutMnemonicTypeCd ( double _arg1 ) {
    HRESULT _hr = put_MnemonicTypeCd(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1367)
inline IUnknownPtr IOrderLookUp::SelectOrderable ( int Index ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectOrderable(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1368)
inline double IOrderLookUp::GetClinCategoryCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ClinCategoryCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1369)
inline double IOrderLookUp::GetClinSubCategoryCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ClinSubCategoryCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1370)
inline void IOrderLookUp::PutClinSubCategoryCd ( int Index, double pVal ) {
    HRESULT _hr = put_ClinSubCategoryCd(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1371)
inline long IOrderLookUp::GetClinSubCatCode ( const _variant_t & newVal ) {
    long _result = 0;
    HRESULT _hr = raw_GetClinSubCatCode(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1372)
inline long IOrderLookUp::GetChildCodeValueCount ( int Index ) {
    long _result = 0;
    HRESULT _hr = raw_GetChildCodeValueCount(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline double IOrderLookUp::GetChildCodeValue ( int parentIndex, int childIndex ) {
    double _result = 0;
    HRESULT _hr = get_ChildCodeValue(parentIndex, childIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1374)
inline void IOrderLookUp::PutChildCodeValue ( int parentIndex, int childIndex, double pVal ) {
    HRESULT _hr = put_ChildCodeValue(parentIndex, childIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1375)
inline _bstr_t IOrderLookUp::GetChildCodeDisplay ( int parentIndex, int childIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChildCodeDisplay(parentIndex, childIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1376)
inline void IOrderLookUp::PutChildCodeDisplay ( int parentIndex, int childIndex, _bstr_t pVal ) {
    HRESULT _hr = put_ChildCodeDisplay(parentIndex, childIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1377)
inline double IOrderLookUp::GetParentClinCatCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ParentClinCatCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1378)
inline long IOrderLookUp::GetHasClinSubCat ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_HasClinSubCat(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1379)
inline void IOrderLookUp::PutHasClinSubCat ( long Index, long pVal ) {
    HRESULT _hr = put_HasClinSubCat(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1380)
inline _bstr_t IOrderLookUp::GetVirtualViewAt ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_VirtualViewAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1381)
inline long IOrderLookUp::GetAllFacilityAccessInd ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_AllFacilityAccessInd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1382)
inline _variant_t IOrderLookUp::GetFacilityAccessList ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FacilityAccessList(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1383)
inline long IOrderLookUp::SearchCareset ( _bstr_t sSearch ) {
    long _result = 0;
    HRESULT _hr = raw_SearchCareset(sSearch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1384)
inline double IOrderLookUp::GetCSCatalogCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_CSCatalogCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1385)
inline _bstr_t IOrderLookUp::GetCSMnemonic ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_CSMnemonic(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1386)
inline long IOrderLookUp::LoadCSComponents ( int Index ) {
    long _result = 0;
    HRESULT _hr = raw_LoadCSComponents(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1387)
inline double IOrderLookUp::GetCSComponentTypeCd ( int Index, int compIndex ) {
    double _result = 0;
    HRESULT _hr = get_CSComponentTypeCd(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1388)
inline _bstr_t IOrderLookUp::GetCSComponentMnemonic ( int Index, int compIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_CSComponentMnemonic(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1389)
inline double IOrderLookUp::GetCSComponentClinCatCd ( int Index, int compIndex ) {
    double _result = 0;
    HRESULT _hr = get_CSComponentClinCatCd(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1390)
inline void IOrderLookUp::PutCSComponentClinCatCd ( int Index, int compIndex, double pVal ) {
    HRESULT _hr = put_CSComponentClinCatCd(Index, compIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1391)
inline double IOrderLookUp::GetCSComponentOrdSentId ( int Index, int compIndex ) {
    double _result = 0;
    HRESULT _hr = get_CSComponentOrdSentId(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline _bstr_t IOrderLookUp::GetCSComponentOrdSentDisp ( int Index, int compIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_CSComponentOrdSentDisp(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1393)
inline double IOrderLookUp::GetCSComponentClinSubCatCd ( int Index, int compIndex ) {
    double _result = 0;
    HRESULT _hr = get_CSComponentClinSubCatCd(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1394)
inline void IOrderLookUp::PutCSComponentClinSubCatCd ( int Index, int compIndex, double pVal ) {
    HRESULT _hr = put_CSComponentClinSubCatCd(Index, compIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1395)
inline long IOrderLookUp::GetCSComponentImported ( int Index, int compIndex ) {
    long _result = 0;
    HRESULT _hr = get_CSComponentImported(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline void IOrderLookUp::PutCSComponentImported ( int Index, int compIndex, long pVal ) {
    HRESULT _hr = put_CSComponentImported(Index, compIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1397)
inline int IOrderLookUp::GetCSComponentOrdTypeFlag ( int Index, int compIndex ) {
    int _result = 0;
    HRESULT _hr = get_CSComponentOrdTypeFlag(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline _bstr_t IOrderLookUp::GetCSComponentOutLabel ( int Index, int compIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_CSComponentOutLabel(Index, compIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1399)
inline void IOrderLookUp::PutCSComponentOutLabel ( int Index, int compIndex, _bstr_t pVal ) {
    HRESULT _hr = put_CSComponentOutLabel(Index, compIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1400)
inline IDispatchPtr IOrderLookUp::SelectCSOrders ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SelectCSOrders(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1401)
inline _bstr_t IOrderLookUp::GetCSRefText ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_CSRefText(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1402)
inline long IOrderLookUp::SearchPrescription ( _bstr_t sSearch ) {
    long _result = 0;
    HRESULT _hr = raw_SearchPrescription(sSearch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline IUnknownPtr IOrderLookUp::SelectPrescription ( int Index ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectPrescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1404)
inline long IOrderLookUp::GetOrderRxMask ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_OrderRxMask(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1405)
inline short IOrderLookUp::GetIntermittentInd ( int Index ) {
    short _result = 0;
    HRESULT _hr = get_IntermittentInd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IIngredient wrapper method implementations
//

#pragma implementation_key(1406)
inline _bstr_t IIngredient::GetMnemonic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mnemonic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1407)
inline void IIngredient::PutMnemonic ( _bstr_t pVal ) {
    HRESULT _hr = put_Mnemonic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline double IIngredient::GetSynonymId ( ) {
    double _result = 0;
    HRESULT _hr = get_SynonymId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1409)
inline void IIngredient::PutSynonymId ( double pVal ) {
    HRESULT _hr = put_SynonymId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline double IIngredient::GetOrderSentenceId ( ) {
    double _result = 0;
    HRESULT _hr = get_OrderSentenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1411)
inline void IIngredient::PutOrderSentenceId ( double pVal ) {
    HRESULT _hr = put_OrderSentenceId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1412)
inline _bstr_t IIngredient::GetOrderSentenceDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrderSentenceDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1413)
inline void IIngredient::PutOrderSentenceDisplay ( _bstr_t pVal ) {
    HRESULT _hr = put_OrderSentenceDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1414)
inline double IIngredient::GetOeFormatId ( ) {
    double _result = 0;
    HRESULT _hr = get_OeFormatId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1415)
inline void IIngredient::PutOeFormatId ( double pVal ) {
    HRESULT _hr = put_OeFormatId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1416)
inline HRESULT IIngredient::Copy ( struct IIngredient * pIIngredient ) {
    HRESULT _hr = raw_Copy(pIIngredient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1417)
inline HRESULT IIngredient::IsEqual ( struct IIngredient * pIIngre, long * pBool ) {
    HRESULT _hr = raw_IsEqual(pIIngre, pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1418)
inline double IIngredient::GetCatalogCd ( ) {
    double _result = 0;
    HRESULT _hr = get_CatalogCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1419)
inline void IIngredient::PutCatalogCd ( double pVal ) {
    HRESULT _hr = put_CatalogCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline HRESULT IIngredient::RemoveOrderSentence ( ) {
    HRESULT _hr = raw_RemoveOrderSentence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1421)
inline double IIngredient::GetSentCommentId ( ) {
    double _result = 0;
    HRESULT _hr = get_SentCommentId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1422)
inline void IIngredient::PutSentCommentId ( double pVal ) {
    HRESULT _hr = put_SentCommentId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1423)
inline _bstr_t IIngredient::GetSentComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SentComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1424)
inline void IIngredient::PutSentComment ( _bstr_t pVal ) {
    HRESULT _hr = put_SentComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1425)
inline long IIngredient::GetCompSeq ( ) {
    long _result = 0;
    HRESULT _hr = get_CompSeq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1426)
inline void IIngredient::PutCompSeq ( long pVal ) {
    HRESULT _hr = put_CompSeq(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1427)
inline HRESULT IIngredient::AddOrderSentence ( struct IOrderSentence * pOrderSent ) {
    HRESULT _hr = raw_AddOrderSentence(pOrderSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1428)
inline IOrderSentencePtr IIngredient::GetOrderSentencePtr ( ) {
    struct IOrderSentence * _result = 0;
    HRESULT _hr = raw_GetOrderSentencePtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOrderSentencePtr(_result, false);
}

#pragma implementation_key(1429)
inline _bstr_t IIngredient::GetXMLDosageInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XMLDosageInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1430)
inline void IIngredient::PutXMLDosageInformation ( _bstr_t pVal ) {
    HRESULT _hr = put_XMLDosageInformation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1431)
inline long IIngredient::IsOrdDetailEqual ( struct IIngredient * pIIngre ) {
    long _result = 0;
    HRESULT _hr = raw_IsOrdDetailEqual(pIIngre, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVariance wrapper method implementations
//

#pragma implementation_key(1432)
inline long IVariance::IsEqual ( struct IVariance * pVar ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pVar, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1433)
inline HRESULT IVariance::Copy ( struct IVariance * pVar ) {
    HRESULT _hr = raw_Copy(pVar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1434)
inline double IVariance::GetVarianceReltnId ( ) {
    double _result = 0;
    HRESULT _hr = get_VarianceReltnId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1435)
inline void IVariance::PutVarianceReltnId ( double pVal ) {
    HRESULT _hr = put_VarianceReltnId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1436)
inline _bstr_t IVariance::GetParentEntityName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParentEntityName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1437)
inline void IVariance::PutParentEntityName ( _bstr_t pVal ) {
    HRESULT _hr = put_ParentEntityName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1438)
inline double IVariance::GetParentEntityId ( ) {
    double _result = 0;
    HRESULT _hr = get_ParentEntityId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1439)
inline void IVariance::PutParentEntityId ( double pVal ) {
    HRESULT _hr = put_ParentEntityId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1440)
inline double IVariance::GetEventId ( ) {
    double _result = 0;
    HRESULT _hr = get_EventId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline void IVariance::PutEventId ( double pVal ) {
    HRESULT _hr = put_EventId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1442)
inline double IVariance::GetVarianceTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_VarianceTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline void IVariance::PutVarianceTypeCd ( double pVal ) {
    HRESULT _hr = put_VarianceTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline _bstr_t IVariance::GetVarianceTypeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VarianceTypeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1445)
inline void IVariance::PutVarianceTypeDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_VarianceTypeDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline _bstr_t IVariance::GetVarianceTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VarianceTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1447)
inline void IVariance::PutVarianceTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_VarianceTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline double IVariance::GetActionCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1449)
inline void IVariance::PutActionCd ( double pVal ) {
    HRESULT _hr = put_ActionCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1450)
inline _bstr_t IVariance::GetActionDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1451)
inline void IVariance::PutActionDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1452)
inline _bstr_t IVariance::GetActionMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1453)
inline void IVariance::PutActionMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline double IVariance::GetActionTextId ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionTextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline void IVariance::PutActionTextId ( double pVal ) {
    HRESULT _hr = put_ActionTextId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1456)
inline _bstr_t IVariance::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1457)
inline void IVariance::PutActionText ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1458)
inline double IVariance::GetReasonCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ReasonCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1459)
inline void IVariance::PutReasonCd ( double pVal ) {
    HRESULT _hr = put_ReasonCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1460)
inline _bstr_t IVariance::GetReasonDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReasonDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1461)
inline void IVariance::PutReasonDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ReasonDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1462)
inline _bstr_t IVariance::GetReasonMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReasonMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1463)
inline void IVariance::PutReasonMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ReasonMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline double IVariance::GetReasonTextId ( ) {
    double _result = 0;
    HRESULT _hr = get_ReasonTextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void IVariance::PutReasonTextId ( double pVal ) {
    HRESULT _hr = put_ReasonTextId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline _bstr_t IVariance::GetReasonText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReasonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1467)
inline void IVariance::PutReasonText ( _bstr_t pVal ) {
    HRESULT _hr = put_ReasonText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline long IVariance::GetActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline void IVariance::PutActiveInd ( long pVal ) {
    HRESULT _hr = put_ActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1470)
inline ACTION_TYPE IVariance::GetActionType ( ) {
    ACTION_TYPE _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline void IVariance::PutActionType ( ACTION_TYPE pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline long IVariance::GetActionTextUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_ActionTextUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline void IVariance::PutActionTextUpdtCnt ( long pVal ) {
    HRESULT _hr = put_ActionTextUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1474)
inline long IVariance::GetReasonTextUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_ReasonTextUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1475)
inline void IVariance::PutReasonTextUpdtCnt ( long pVal ) {
    HRESULT _hr = put_ReasonTextUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1476)
inline long IVariance::GetVarianceUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_VarianceUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1477)
inline void IVariance::PutVarianceUpdtCnt ( long pVal ) {
    HRESULT _hr = put_VarianceUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1478)
inline void IVariance::PutKey ( double _arg1 ) {
    HRESULT _hr = put_Key(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline double IVariance::GetNoteTextId ( ) {
    double _result = 0;
    HRESULT _hr = get_NoteTextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline void IVariance::PutNoteTextId ( double pVal ) {
    HRESULT _hr = put_NoteTextId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1481)
inline _bstr_t IVariance::GetNoteText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoteText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1482)
inline void IVariance::PutNoteText ( _bstr_t pVal ) {
    HRESULT _hr = put_NoteText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline long IVariance::GetNoteTextUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_NoteTextUpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline void IVariance::PutNoteTextUpdtCnt ( long pVal ) {
    HRESULT _hr = put_NoteTextUpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1485)
inline double IVariance::GetPathwayId ( ) {
    double _result = 0;
    HRESULT _hr = get_PathwayId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1486)
inline void IVariance::PutPathwayId ( double pVal ) {
    HRESULT _hr = put_PathwayId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline long IVariance::GetDirty ( ) {
    long _result = 0;
    HRESULT _hr = get_Dirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline void IVariance::PutDirty ( long pVal ) {
    HRESULT _hr = put_Dirty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1489)
inline double IVariance::GetChartPrsnlId ( ) {
    double _result = 0;
    HRESULT _hr = get_ChartPrsnlId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1490)
inline void IVariance::PutChartPrsnlId ( double pVal ) {
    HRESULT _hr = put_ChartPrsnlId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1491)
inline double IVariance::GetUnchartPrsnlId ( ) {
    double _result = 0;
    HRESULT _hr = get_UnchartPrsnlId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1492)
inline void IVariance::PutUnchartPrsnlId ( double pVal ) {
    HRESULT _hr = put_UnchartPrsnlId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1493)
inline DATE IVariance::GetChartDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ChartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline void IVariance::PutChartDtTm ( DATE pVal ) {
    HRESULT _hr = put_ChartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline DATE IVariance::GetUnchartDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_UnchartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1496)
inline void IVariance::PutUnchartDtTm ( DATE pVal ) {
    HRESULT _hr = put_UnchartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1497)
inline _bstr_t IVariance::GetChartPrsnlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChartPrsnlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1498)
inline void IVariance::PutChartPrsnlName ( _bstr_t pVal ) {
    HRESULT _hr = put_ChartPrsnlName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1499)
inline _bstr_t IVariance::GetUnchartPrsnlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnchartPrsnlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1500)
inline void IVariance::PutUnchartPrsnlName ( _bstr_t pVal ) {
    HRESULT _hr = put_UnchartPrsnlName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1501)
inline IDispatchPtr IVariance::GetUTCChartDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCChartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1502)
inline void IVariance::PutUTCChartDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCChartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline IDispatchPtr IVariance::GetUTCUnchartDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCUnchartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1504)
inline void IVariance::PutUTCUnchartDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCUnchartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1505)
inline double IVariance::GetOutcomeKey ( ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline void IVariance::PutOutcomeKey ( double pVal ) {
    HRESULT _hr = put_OutcomeKey(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IIdMngr wrapper method implementations
//

#pragma implementation_key(1507)
inline _variant_t IIdMngr::GetIDs ( int numIdsNeeded, _bstr_t compTypeMean ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetIDs(numIdsNeeded, compTypeMean, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1508)
inline double IIdMngr::GetActivityId ( VARIANT * vIds ) {
    double _result = 0;
    HRESULT _hr = raw_GetActivityId(vIds, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1509)
inline HRESULT IIdMngr::GetIdsList ( int lNumIdsNeeded, _bstr_t sCompTypeMean, LONG_PTR lIdsList ) {
    HRESULT _hr = raw_GetIdsList(lNumIdsNeeded, sCompTypeMean, lIdsList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IClinCategory wrapper method implementations
//

#pragma implementation_key(1510)
inline HRESULT IClinCategory::AddClinSubCat ( double dCodeValue, _bstr_t sDiaply, _bstr_t sDesc, _bstr_t sCDFMean ) {
    HRESULT _hr = raw_AddClinSubCat(dCodeValue, sDiaply, sDesc, sCDFMean);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1511)
inline long IClinCategory::GetClinSubCatCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetClinSubCatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline double IClinCategory::GetClinSubCatCode ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ClinSubCatCode(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1513)
inline _bstr_t IClinCategory::GetClinSubCatDisplay ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinSubCatDisplay(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1514)
inline double IClinCategory::GetClinicalCatCode ( ) {
    double _result = 0;
    HRESULT _hr = get_ClinicalCatCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1515)
inline void IClinCategory::PutClinicalCatCode ( double pVal ) {
    HRESULT _hr = put_ClinicalCatCode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1516)
inline _bstr_t IClinCategory::GetClinCatDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinCatDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1517)
inline void IClinCategory::PutClinCatDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ClinCatDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1518)
inline HRESULT IClinCategory::RemoveClinSubCat ( ) {
    HRESULT _hr = raw_RemoveClinSubCat();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1519)
inline _bstr_t IClinCategory::GetClinCatMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClinCatMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1520)
inline void IClinCategory::PutClinCatMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ClinCatMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDTALookup wrapper method implementations
//

#pragma implementation_key(1521)
inline long IDTALookup::SearchDTA ( _bstr_t sSearch ) {
    long _result = 0;
    HRESULT _hr = raw_SearchDTA(sSearch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline void IDTALookup::PutResultTypeFilters ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_ResultTypeFilters(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1523)
inline _bstr_t IDTALookup::GetDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1524)
inline _bstr_t IDTALookup::GetMnemonic ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mnemonic(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1525)
inline IUnknownPtr IDTALookup::SelectDTA ( double taskAssayCd ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectDTA(taskAssayCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1526)
inline _variant_t IDTALookup::GetUnitCodes ( double taskAssayCd ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UnitCodes(taskAssayCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1527)
inline IUnknownPtr IDTALookup::GetDataMap ( double taskAssayCd ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_DataMap(taskAssayCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1528)
inline double IDTALookup::GetDTACd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_DTACd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1529)
inline IUnknownPtr IDTALookup::GetAlphaResponses ( double taskAssayCd ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_AlphaResponses(taskAssayCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1530)
inline IUnknownPtr IDTALookup::LoadDTADetails ( double taskAssayCd ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_LoadDTADetails(taskAssayCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1531)
inline HRESULT IDTALookup::RemoveAllDTAs ( ) {
    HRESULT _hr = raw_RemoveAllDTAs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1532)
inline IDispatchPtr IDTALookup::GetDTA ( double task_assay_cd ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetDTA(task_assay_cd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1533)
inline HRESULT IDTALookup::LoadDTAs ( IDispatch * lpDisp ) {
    HRESULT _hr = raw_LoadDTAs(lpDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1534)
inline long IDTALookup::SearchOutcomeDTA ( _bstr_t sSearch ) {
    long _result = 0;
    HRESULT _hr = raw_SearchOutcomeDTA(sSearch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1535)
inline IUnknownPtr IDTALookup::SelectDTAByIndex ( int idx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectDTAByIndex(idx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1536)
inline _bstr_t IDTALookup::GetOutcomeDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutcomeDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1537)
inline HRESULT IDTALookup::LoadDTAsEx ( IDispatch * lpDisp, long hPatcon ) {
    HRESULT _hr = raw_LoadDTAsEx(lpDisp, hPatcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOutcomeResult wrapper method implementations
//

#pragma implementation_key(1538)
inline double IOutcomeResult::GetClinEventId ( ) {
    double _result = 0;
    HRESULT _hr = get_ClinEventId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline void IOutcomeResult::PutClinEventId ( double pVal ) {
    HRESULT _hr = put_ClinEventId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1540)
inline double IOutcomeResult::GetEventId ( ) {
    double _result = 0;
    HRESULT _hr = get_EventId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1541)
inline void IOutcomeResult::PutEventId ( double pVal ) {
    HRESULT _hr = put_EventId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1542)
inline DATE IOutcomeResult::GetEventEndDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EventEndDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline void IOutcomeResult::PutEventEndDtTm ( DATE pVal ) {
    HRESULT _hr = put_EventEndDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1544)
inline _bstr_t IOutcomeResult::GetResultVal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1545)
inline void IOutcomeResult::PutResultVal ( _bstr_t pVal ) {
    HRESULT _hr = put_ResultVal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1546)
inline double IOutcomeResult::GetResultUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ResultUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1547)
inline void IOutcomeResult::PutResultUnitCd ( double pVal ) {
    HRESULT _hr = put_ResultUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1548)
inline _bstr_t IOutcomeResult::GetResultUnitDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultUnitDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1549)
inline void IOutcomeResult::PutResultUnitDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ResultUnitDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1550)
inline long IOutcomeResult::GetMetInd ( ) {
    long _result = 0;
    HRESULT _hr = get_MetInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1551)
inline void IOutcomeResult::PutMetInd ( long pVal ) {
    HRESULT _hr = put_MetInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1552)
inline _variant_t IOutcomeResult::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1553)
inline HRESULT IOutcomeResult::Copy ( struct IOutcomeResult * pOutcomeResult ) {
    HRESULT _hr = raw_Copy(pOutcomeResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1554)
inline double IOutcomeResult::GetResultStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ResultStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1555)
inline void IOutcomeResult::PutResultStatusCd ( double pVal ) {
    HRESULT _hr = put_ResultStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1556)
inline DATE IOutcomeResult::GetPerformDtTm ( ) {
    DATE _result = 0;
    HRESULT _hr = get_PerformDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1557)
inline void IOutcomeResult::PutPerformDtTm ( DATE pVal ) {
    HRESULT _hr = put_PerformDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline _bstr_t IOutcomeResult::GetPerformPrsnlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PerformPrsnlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1559)
inline void IOutcomeResult::PutPerformPrsnlName ( _bstr_t pVal ) {
    HRESULT _hr = put_PerformPrsnlName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1560)
inline long IOutcomeResult::GetUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline void IOutcomeResult::PutUpdtCnt ( long pVal ) {
    HRESULT _hr = put_UpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline double IOutcomeResult::GetEntryModeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_EntryModeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void IOutcomeResult::PutEntryModeCd ( double pVal ) {
    HRESULT _hr = put_EntryModeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline IDispatchPtr IOutcomeResult::GetParentDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ParentDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1565)
inline void IOutcomeResult::PutParentDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_ParentDispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1566)
inline _bstr_t IOutcomeResult::GetAccessionNbr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AccessionNbr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1567)
inline void IOutcomeResult::PutAccessionNbr ( _bstr_t pVal ) {
    HRESULT _hr = put_AccessionNbr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline IDispatchPtr IOutcomeResult::GetUTCPerformDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCPerformDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1569)
inline void IOutcomeResult::PutUTCPerformDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCPerformDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1570)
inline IDispatchPtr IOutcomeResult::GetUTCEventEndDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCEventEndDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1571)
inline void IOutcomeResult::PutUTCEventEndDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCEventEndDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline NOMENCLATURE_STRING_TYPE IOutcomeResult::GetNomenStringFlag ( ) {
    NOMENCLATURE_STRING_TYPE _result;
    HRESULT _hr = get_NomenStringFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1573)
inline void IOutcomeResult::PutNomenStringFlag ( NOMENCLATURE_STRING_TYPE pVal ) {
    HRESULT _hr = put_NomenStringFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline _bstr_t IOutcomeResult::GetPreferredNomenDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreferredNomenDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1575)
inline void IOutcomeResult::PutPreferredNomenDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_PreferredNomenDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline _bstr_t IOutcomeResult::GetFormattedDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormattedDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IOutcome wrapper method implementations
//

#pragma implementation_key(1577)
inline _bstr_t IOutcome::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1578)
inline void IOutcome::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1579)
inline _bstr_t IOutcome::GetExpectation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expectation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1580)
inline void IOutcome::PutExpectation ( _bstr_t pVal ) {
    HRESULT _hr = put_Expectation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1581)
inline double IOutcome::GetTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_TypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1582)
inline void IOutcome::PutTypeCd ( double pVal ) {
    HRESULT _hr = put_TypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1583)
inline long IOutcome::GetActiveInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1584)
inline void IOutcome::PutActiveInd ( long pVal ) {
    HRESULT _hr = put_ActiveInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1585)
inline double IOutcome::GetOutcomeActivityId ( ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeActivityId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1586)
inline void IOutcome::PutOutcomeActivityId ( double pVal ) {
    HRESULT _hr = put_OutcomeActivityId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1587)
inline double IOutcome::GetOutcomeCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1588)
inline void IOutcome::PutOutcomeCatalogId ( double pVal ) {
    HRESULT _hr = put_OutcomeCatalogId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1589)
inline double IOutcome::GetDTACd ( ) {
    double _result = 0;
    HRESULT _hr = get_DTACd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline void IOutcome::PutDTACd ( double pVal ) {
    HRESULT _hr = put_DTACd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1591)
inline double IOutcome::GetEventCd ( ) {
    double _result = 0;
    HRESULT _hr = get_EventCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1592)
inline void IOutcome::PutEventCd ( double pVal ) {
    HRESULT _hr = put_EventCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1593)
inline double IOutcome::GetClassCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ClassCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline void IOutcome::PutClassCd ( double pVal ) {
    HRESULT _hr = put_ClassCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1595)
inline double IOutcome::GetResultTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ResultTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1596)
inline void IOutcome::PutResultTypeCd ( double pVal ) {
    HRESULT _hr = put_ResultTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline _bstr_t IOutcome::GetClassCdDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassCdDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1598)
inline void IOutcome::PutClassCdDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ClassCdDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1599)
inline _bstr_t IOutcome::GetClassCdMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassCdMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1600)
inline void IOutcome::PutClassCdMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ClassCdMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1601)
inline _bstr_t IOutcome::GetResultTypeCdDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultTypeCdDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1602)
inline void IOutcome::PutResultTypeCdDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ResultTypeCdDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1603)
inline _bstr_t IOutcome::GetResultTypeCdMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultTypeCdMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1604)
inline void IOutcome::PutResultTypeCdMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ResultTypeCdMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1605)
inline _bstr_t IOutcome::GetOperandMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperandMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1606)
inline void IOutcome::PutOperandMean ( _bstr_t pVal ) {
    HRESULT _hr = put_OperandMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1607)
inline long IOutcome::GetUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1608)
inline void IOutcome::PutUpdtCnt ( long pVal ) {
    HRESULT _hr = put_UpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1609)
inline long IOutcome::AddOutcomeCriteria ( ) {
    long _result = 0;
    HRESULT _hr = raw_AddOutcomeCriteria(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline double IOutcome::GetOutcomeCatCriteriaId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeCatCriteriaId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline void IOutcome::PutOutcomeCatCriteriaId ( int Index, double pVal ) {
    HRESULT _hr = put_OutcomeCatCriteriaId(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1612)
inline double IOutcome::GetOutcomeCriteriaId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeCriteriaId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline void IOutcome::PutOutcomeCriteriaId ( int Index, double pVal ) {
    HRESULT _hr = put_OutcomeCriteriaId(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1614)
inline double IOutcome::GetOperatorCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_OperatorCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline void IOutcome::PutOperatorCd ( int Index, double pVal ) {
    HRESULT _hr = put_OperatorCd(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1616)
inline double IOutcome::GetResultValue ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ResultValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void IOutcome::PutResultValue ( int Index, double pVal ) {
    HRESULT _hr = put_ResultValue(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline double IOutcome::GetResultUnitCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ResultUnitCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1619)
inline void IOutcome::PutResultUnitCd ( int Index, double pVal ) {
    HRESULT _hr = put_ResultUnitCd(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline double IOutcome::GetnomenclatureId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_nomenclatureId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1621)
inline void IOutcome::PutnomenclatureId ( int Index, double pVal ) {
    HRESULT _hr = put_nomenclatureId(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1622)
inline long IOutcome::GetCriteriaSeq ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_CriteriaSeq(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1623)
inline void IOutcome::PutCriteriaSeq ( int Index, long pVal ) {
    HRESULT _hr = put_CriteriaSeq(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1624)
inline long IOutcome::GetCriteriaActiveInd ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_CriteriaActiveInd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline void IOutcome::PutCriteriaActiveInd ( int Index, long pVal ) {
    HRESULT _hr = put_CriteriaActiveInd(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1626)
inline long IOutcome::GetCriteriaUpdtCnt ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_CriteriaUpdtCnt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1627)
inline void IOutcome::PutCriteriaUpdtCnt ( int Index, long pVal ) {
    HRESULT _hr = put_CriteriaUpdtCnt(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1628)
inline _bstr_t IOutcome::GetResultUnitCdDisp ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultUnitCdDisp(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1629)
inline void IOutcome::PutResultUnitCdDisp ( int Index, _bstr_t pVal ) {
    HRESULT _hr = put_ResultUnitCdDisp(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1630)
inline _bstr_t IOutcome::GetResultUnitCdMean ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultUnitCdMean(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1631)
inline void IOutcome::PutResultUnitCdMean ( int Index, _bstr_t pVal ) {
    HRESULT _hr = put_ResultUnitCdMean(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1632)
inline _bstr_t IOutcome::GetOperatorCdDisp ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatorCdDisp(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1633)
inline void IOutcome::PutOperatorCdDisp ( int Index, _bstr_t pVal ) {
    HRESULT _hr = put_OperatorCdDisp(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1634)
inline _bstr_t IOutcome::GetOperatorCdMean ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatorCdMean(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1635)
inline void IOutcome::PutOperatorCdMean ( int Index, _bstr_t pVal ) {
    HRESULT _hr = put_OperatorCdMean(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1636)
inline long IOutcome::GetCriteriaCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetCriteriaCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline long IOutcome::GetDirtyFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_DirtyFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1638)
inline void IOutcome::PutDirtyFlag ( long pVal ) {
    HRESULT _hr = put_DirtyFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1639)
inline HRESULT IOutcome::FormatExpectationString ( IUnknown * lpAlphaResponses, IUnknown * pDataMap ) {
    HRESULT _hr = raw_FormatExpectationString(lpAlphaResponses, pDataMap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1640)
inline _variant_t IOutcome::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1641)
inline long IOutcome::GetCriteriaDirtyFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_CriteriaDirtyFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1642)
inline void IOutcome::PutCriteriaDirtyFlag ( long pVal ) {
    HRESULT _hr = put_CriteriaDirtyFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1643)
inline HRESULT IOutcome::RemoveAllCriteria ( ) {
    HRESULT _hr = raw_RemoveAllCriteria();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1644)
inline long IOutcome::AddOutcomePlan ( LONG_PTR lPlanStruct ) {
    long _result = 0;
    HRESULT _hr = raw_AddOutcomePlan(lPlanStruct, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1645)
inline _bstr_t IOutcome::GetPlanDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1646)
inline long IOutcome::GetPlanCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPlanCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1647)
inline HRESULT IOutcome::RemoveAllPlans ( ) {
    HRESULT _hr = raw_RemoveAllPlans();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1648)
inline HRESULT IOutcome::ResetOutcomeData ( ) {
    HRESULT _hr = raw_ResetOutcomeData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1649)
inline _bstr_t IOutcome::GetTypeCdDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeCdDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1650)
inline void IOutcome::PutTypeCdDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_TypeCdDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1651)
inline _bstr_t IOutcome::GetTypeCdMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeCdMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1652)
inline void IOutcome::PutTypeCdMean ( _bstr_t pVal ) {
    HRESULT _hr = put_TypeCdMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline long IOutcome::GetCatalogInd ( ) {
    long _result = 0;
    HRESULT _hr = get_CatalogInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1654)
inline void IOutcome::PutCatalogInd ( long pVal ) {
    HRESULT _hr = put_CatalogInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1655)
inline HRESULT IOutcome::Copy ( struct IOutcome * pOutcome ) {
    HRESULT _hr = raw_Copy(pOutcome);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1656)
inline long IOutcome::IsEqual ( struct IOutcome * pOutcome ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pOutcome, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline double IOutcome::GetStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_StatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1658)
inline void IOutcome::PutStatusCd ( double pVal ) {
    HRESULT _hr = put_StatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1659)
inline _bstr_t IOutcome::GetStatusDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1660)
inline void IOutcome::PutStatusDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_StatusDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1661)
inline _bstr_t IOutcome::GetStatusMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1662)
inline void IOutcome::PutStatusMean ( _bstr_t pVal ) {
    HRESULT _hr = put_StatusMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1663)
inline double IOutcome::GetTargetTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_TargetTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1664)
inline void IOutcome::PutTargetTypeCd ( double pVal ) {
    HRESULT _hr = put_TargetTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1665)
inline _bstr_t IOutcome::GetTargetTypeDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetTypeDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1666)
inline void IOutcome::PutTargetTypeDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetTypeDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1667)
inline _bstr_t IOutcome::GetTargetTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1668)
inline void IOutcome::PutTargetTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1669)
inline long IOutcome::GetDurationQty ( ) {
    long _result = 0;
    HRESULT _hr = get_DurationQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline void IOutcome::PutDurationQty ( long pVal ) {
    HRESULT _hr = put_DurationQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline double IOutcome::GetDurationUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_DurationUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline void IOutcome::PutDurationUnitCd ( double pVal ) {
    HRESULT _hr = put_DurationUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1673)
inline _bstr_t IOutcome::GetDurationUnitDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DurationUnitDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1674)
inline void IOutcome::PutDurationUnitDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_DurationUnitDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline _bstr_t IOutcome::GetDurationUnitMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DurationUnitMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1676)
inline void IOutcome::PutDurationUnitMean ( _bstr_t pVal ) {
    HRESULT _hr = put_DurationUnitMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline long IOutcome::GetExpandQty ( ) {
    long _result = 0;
    HRESULT _hr = get_ExpandQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void IOutcome::PutExpandQty ( long pVal ) {
    HRESULT _hr = put_ExpandQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1679)
inline double IOutcome::GetExpandUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ExpandUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void IOutcome::PutExpandUnitCd ( double pVal ) {
    HRESULT _hr = put_ExpandUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline _bstr_t IOutcome::GetExpandUnitDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExpandUnitDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1682)
inline void IOutcome::PutExpandUnitDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_ExpandUnitDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline _bstr_t IOutcome::GetExpandUnitMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExpandUnitMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1684)
inline void IOutcome::PutExpandUnitMean ( _bstr_t pVal ) {
    HRESULT _hr = put_ExpandUnitMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline double IOutcome::GetPersonId ( ) {
    double _result = 0;
    HRESULT _hr = get_PersonId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void IOutcome::PutPersonId ( double pVal ) {
    HRESULT _hr = put_PersonId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline double IOutcome::GetEncntrId ( ) {
    double _result = 0;
    HRESULT _hr = get_EncntrId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline void IOutcome::PutEncntrId ( double pVal ) {
    HRESULT _hr = put_EncntrId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline ACTION_TYPE IOutcome::GetActionType ( ) {
    ACTION_TYPE _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void IOutcome::PutActionType ( ACTION_TYPE pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline HRESULT IOutcome::AddOutcomeResult ( struct IOutcomeResult * pOutcomeResult ) {
    HRESULT _hr = raw_AddOutcomeResult(pOutcomeResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1692)
inline IUnknownPtr IOutcome::GetOutcomeResultCollection ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_OutcomeResultCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1693)
inline OUTCOME_EVAL IOutcome::GetLastMetInd ( ) {
    OUTCOME_EVAL _result;
    HRESULT _hr = get_LastMetInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline void IOutcome::PutLastMetInd ( OUTCOME_EVAL pVal ) {
    HRESULT _hr = put_LastMetInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline long IOutcome::IsEvaluationAvail ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsEvaluationAvail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline HRESULT IOutcome::RemoveAllOutcomeResults ( ) {
    HRESULT _hr = raw_RemoveAllOutcomeResults();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1697)
inline double IOutcome::GetReferenceTaskId ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceTaskId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline void IOutcome::PutReferenceTaskId ( double pVal ) {
    HRESULT _hr = put_ReferenceTaskId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline _bstr_t IOutcome::GetTaskDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1700)
inline void IOutcome::PutTaskDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_TaskDescription(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1701)
inline HRESULT IOutcome::LoadOutcomeAction ( ) {
    HRESULT _hr = raw_LoadOutcomeAction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1702)
inline HRESULT IOutcome::RemoveAllActions ( ) {
    HRESULT _hr = raw_RemoveAllActions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1703)
inline long IOutcome::GetActionSeq ( int Index ) {
    long _result = 0;
    HRESULT _hr = get_ActionSeq(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1704)
inline double IOutcome::GetActionOutcomeStatusCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ActionOutcomeStatusCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline _bstr_t IOutcome::GetActionOutcomeStatusDisp ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionOutcomeStatusDisp(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1706)
inline double IOutcome::GetActionTargetTypeCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ActionTargetTypeCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1707)
inline _bstr_t IOutcome::GetActionTargetTypeDisp ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionTargetTypeDisp(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1708)
inline _bstr_t IOutcome::GetActionPrsnlName ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionPrsnlName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1709)
inline long IOutcome::GetActionCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetActionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1710)
inline _bstr_t IOutcome::GetActionOutcomeStatusMean ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionOutcomeStatusMean(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1711)
inline long IOutcome::GetTargetDurationQty ( ) {
    long _result = 0;
    HRESULT _hr = get_TargetDurationQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1712)
inline void IOutcome::PutTargetDurationQty ( long pVal ) {
    HRESULT _hr = put_TargetDurationQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1713)
inline double IOutcome::GetTargetDurationUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_TargetDurationUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1714)
inline void IOutcome::PutTargetDurationUnitCd ( double pVal ) {
    HRESULT _hr = put_TargetDurationUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1715)
inline _bstr_t IOutcome::GetTargetDurationUnitCdDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetDurationUnitCdDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1716)
inline void IOutcome::PutTargetDurationUnitCdDisp ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetDurationUnitCdDisp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1717)
inline _bstr_t IOutcome::GetTargetDurationUnitCdMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetDurationUnitCdMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1718)
inline void IOutcome::PutTargetDurationUnitCdMean ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetDurationUnitCdMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline long IOutcome::GetDetailsLoaded ( ) {
    long _result = 0;
    HRESULT _hr = get_DetailsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline void IOutcome::PutDetailsLoaded ( long pVal ) {
    HRESULT _hr = put_DetailsLoaded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline double IOutcome::GetMetNomenclatureId ( ) {
    double _result = 0;
    HRESULT _hr = get_MetNomenclatureId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1722)
inline void IOutcome::PutMetNomenclatureId ( double pVal ) {
    HRESULT _hr = put_MetNomenclatureId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1723)
inline double IOutcome::GetComponentId ( ) {
    double _result = 0;
    HRESULT _hr = get_ComponentId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1724)
inline void IOutcome::PutComponentId ( double pVal ) {
    HRESULT _hr = put_ComponentId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1725)
inline long IOutcome::GetStartedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_StartedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1726)
inline void IOutcome::PutStartedInd ( long pVal ) {
    HRESULT _hr = put_StartedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1727)
inline long IOutcome::GetAdjustStartTimeInd ( ) {
    long _result = 0;
    HRESULT _hr = get_AdjustStartTimeInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1728)
inline void IOutcome::PutAdjustStartTimeInd ( long pVal ) {
    HRESULT _hr = put_AdjustStartTimeInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1729)
inline long IOutcome::GetResultLoadStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_ResultLoadStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1730)
inline void IOutcome::PutResultLoadStatus ( long pVal ) {
    HRESULT _hr = put_ResultLoadStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1731)
inline long IOutcome::GetSingleSelectInd ( ) {
    long _result = 0;
    HRESULT _hr = get_SingleSelectInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1732)
inline void IOutcome::PutSingleSelectInd ( long pVal ) {
    HRESULT _hr = put_SingleSelectInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1733)
inline long IOutcome::GetHideExpectationInd ( ) {
    long _result = 0;
    HRESULT _hr = get_HideExpectationInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1734)
inline void IOutcome::PutHideExpectationInd ( long pVal ) {
    HRESULT _hr = put_HideExpectationInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1735)
inline IDispatchPtr IOutcome::GetReferenceContentPtr ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ReferenceContentPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1736)
inline void IOutcome::PutReferenceContentPtr ( IDispatch * ppVal ) {
    HRESULT _hr = put_ReferenceContentPtr(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1737)
inline long IOutcome::GetRefTextModifiedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_RefTextModifiedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1738)
inline void IOutcome::PutRefTextModifiedInd ( long pVal ) {
    HRESULT _hr = put_RefTextModifiedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1739)
inline double IOutcome::GetRefTextReltnId ( ) {
    double _result = 0;
    HRESULT _hr = get_RefTextReltnId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1740)
inline void IOutcome::PutRefTextReltnId ( double pVal ) {
    HRESULT _hr = put_RefTextReltnId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1741)
inline long IOutcome::GetRemoveOCRefTextInd ( ) {
    long _result = 0;
    HRESULT _hr = get_RemoveOCRefTextInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline void IOutcome::PutRemoveOCRefTextInd ( long pVal ) {
    HRESULT _hr = put_RemoveOCRefTextInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1743)
inline long IOutcome::GetActivatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_ActivatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline void IOutcome::PutActivatedInd ( long pVal ) {
    HRESULT _hr = put_ActivatedInd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline IDispatchPtr IOutcome::GetUTCStartDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCStartDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1746)
inline void IOutcome::PutUTCStartDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCStartDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1747)
inline IDispatchPtr IOutcome::GetUTCEndDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCEndDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1748)
inline void IOutcome::PutUTCEndDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCEndDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline IDispatchPtr IOutcome::GetUTCLastResultDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCLastResultDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1750)
inline void IOutcome::PutUTCLastResultDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCLastResultDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline IDispatchPtr IOutcome::GetUTCMarkDtTm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCMarkDtTm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1752)
inline void IOutcome::PutUTCMarkDtTm ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCMarkDtTm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1753)
inline IDispatchPtr IOutcome::GetUTCActionOutcomeStatusDtTm ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCActionOutcomeStatusDtTm(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1754)
inline IDispatchPtr IOutcome::GetUTCActionStartDtTm ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCActionStartDtTm(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1755)
inline IDispatchPtr IOutcome::GetUTCActionEndDtTm ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCActionEndDtTm(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1756)
inline IDispatchPtr IOutcome::GetUTCActionDtTm ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCActionDtTm(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1757)
inline double IOutcome::GetDynamicLabelId ( ) {
    double _result = 0;
    HRESULT _hr = get_DynamicLabelId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1758)
inline void IOutcome::PutDynamicLabelId ( double pVal ) {
    HRESULT _hr = put_DynamicLabelId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline _bstr_t IOutcome::GetDynamicLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DynamicLabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1760)
inline void IOutcome::PutDynamicLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_DynamicLabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1761)
inline IOutcomePtr IOutcome::GetGenericOutcome ( ) {
    struct IOutcome * _result = 0;
    HRESULT _hr = get_GenericOutcome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOutcomePtr(_result, false);
}

#pragma implementation_key(1762)
inline void IOutcome::PutGenericOutcome ( struct IOutcome * pVal ) {
    HRESULT _hr = put_GenericOutcome(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline _bstr_t IOutcome::GetFormattedDynamicLabelText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormattedDynamicLabelText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1764)
inline HRESULT IOutcome::AddDynamicLabelOutcome ( struct IOutcome * pOutcome ) {
    HRESULT _hr = raw_AddDynamicLabelOutcome(pOutcome);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1765)
inline IDispatchPtr IOutcome::GetDynamicLabelOutcomeCol ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetDynamicLabelOutcomeCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1766)
inline NOMENCLATURE_STRING_TYPE IOutcome::GetNomenStringFlag ( ) {
    NOMENCLATURE_STRING_TYPE _result;
    HRESULT _hr = get_NomenStringFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1767)
inline void IOutcome::PutNomenStringFlag ( NOMENCLATURE_STRING_TYPE pVal ) {
    HRESULT _hr = put_NomenStringFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1768)
inline long IOutcome::GetStartEstimatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_StartEstimatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1769)
inline void IOutcome::PutStartEstimatedInd ( long pStartEstimatedInd ) {
    HRESULT _hr = put_StartEstimatedInd(pStartEstimatedInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1770)
inline long IOutcome::GetEndEstimatedInd ( ) {
    long _result = 0;
    HRESULT _hr = get_EndEstimatedInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1771)
inline void IOutcome::PutEndEstimatedInd ( long pEndEstimatedInd ) {
    HRESULT _hr = put_EndEstimatedInd(pEndEstimatedInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1772)
inline long IOutcome::GetFutureInitiateInd ( ) {
    long _result = 0;
    HRESULT _hr = get_FutureInitiateInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1773)
inline void IOutcome::PutFutureInitiateInd ( long pFutureInitiateInd ) {
    HRESULT _hr = put_FutureInitiateInd(pFutureInitiateInd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1774)
inline double IOutcome::GetLastResultEventId ( ) {
    double _result = 0;
    HRESULT _hr = get_LastResultEventId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline void IOutcome::PutLastResultEventId ( double pVal ) {
    HRESULT _hr = put_LastResultEventId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1776)
inline IDispatchPtr IOutcome::GetParentDispatch ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ParentDispatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1777)
inline void IOutcome::PutParentDispatch ( IDispatch * pVal ) {
    HRESULT _hr = put_ParentDispatch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1778)
inline IOutcomePtr IOutcome::GetDynamicLabelOutcomeByDynamicLabelId ( double dDynamicLabelId ) {
    struct IOutcome * _result = 0;
    HRESULT _hr = raw_GetDynamicLabelOutcomeByDynamicLabelId(dDynamicLabelId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOutcomePtr(_result, false);
}

#pragma implementation_key(1779)
inline IOutcomeResultPtr IOutcome::GetLastOutcomeResult ( ) {
    struct IOutcomeResult * _result = 0;
    HRESULT _hr = raw_GetLastOutcomeResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOutcomeResultPtr(_result, false);
}

#pragma implementation_key(1780)
inline long IOutcome::GetHasInErrorResult ( ) {
    long _result = 0;
    HRESULT _hr = get_HasInErrorResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1781)
inline void IOutcome::PutHasInErrorResult ( long pVal ) {
    HRESULT _hr = put_HasInErrorResult(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1782)
inline long IOutcome::GetPlanVersion ( int iIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetPlanVersion(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1783)
inline EPlanVersionStatus IOutcome::GetPlanVersionStatus ( int iIndex ) {
    EPlanVersionStatus _result;
    HRESULT _hr = raw_GetPlanVersionStatus(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline HRESULT IOutcome::SetFacilityFlexing ( LONG_PTR facilityVector ) {
    HRESULT _hr = raw_SetFacilityFlexing(facilityVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1785)
inline _bstr_t IOutcome::GetFlexFacilityDisp ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFlexFacilityDisp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1786)
inline double IOutcome::GetFlexingFacilityCodeAt ( int iIndex ) {
    double _result = 0;
    HRESULT _hr = raw_GetFlexingFacilityCodeAt(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1787)
inline long IOutcome::GetFlexingCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetFlexingCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1788)
inline long IOutcome::GetAllFacilityInd ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetAllFacilityInd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1789)
inline HRESULT IOutcome::PutAllFacilityInd ( long bAllFacilityIndVal ) {
    HRESULT _hr = raw_PutAllFacilityInd(bAllFacilityIndVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1790)
inline _bstr_t IOutcome::GetFacilityDisplayAt ( int iIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFacilityDisplayAt(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1791)
inline HRESULT IOutcome::GetOutcomeFlexedFacilityCds ( LONG_PTR facilityVector ) {
    HRESULT _hr = raw_GetOutcomeFlexedFacilityCds(facilityVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOutcomeLookup wrapper method implementations
//

#pragma implementation_key(1792)
inline long IOutcomeLookup::SearchOutcomes ( _bstr_t sSearch, double task_assay_cd, double outcome_class_cd ) {
    long _result = 0;
    HRESULT _hr = raw_SearchOutcomes(sSearch, task_assay_cd, outcome_class_cd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1793)
inline IUnknownPtr IOutcomeLookup::SelectOutcome ( double outcomeCatId, long bLoadPlanInfo ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectOutcome(outcomeCatId, bLoadPlanInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1794)
inline _bstr_t IOutcomeLookup::GetDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1795)
inline _bstr_t IOutcomeLookup::GetExpectation ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expectation(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1796)
inline HRESULT IOutcomeLookup::LoadOutcomeDetails ( struct IOutcome * pOutcome, long bLoadPlanInfo ) {
    HRESULT _hr = raw_LoadOutcomeDetails(pOutcome, bLoadPlanInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1797)
inline double IOutcomeLookup::GetOutcomeCatalogId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeCatalogId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline HRESULT IOutcomeLookup::AddOutcome ( struct IOutcome * pOutcome ) {
    HRESULT _hr = raw_AddOutcome(pOutcome);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1799)
inline long IOutcomeLookup::GetSearchResultCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SearchResultCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1800)
inline IDispatchPtr IOutcomeLookup::SelectComponent ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SelectComponent(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1801)
inline _bstr_t IOutcomeLookup::GetOutcomeTypeDisp ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutcomeTypeDisp(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1802)
inline void IOutcomeLookup::PutOutcomeSearchInd ( long _arg1 ) {
    HRESULT _hr = put_OutcomeSearchInd(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1803)
inline HRESULT IOutcomeLookup::LoadOutcomeActDetails ( struct IOutcome * pOutcome ) {
    HRESULT _hr = raw_LoadOutcomeActDetails(pOutcome);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1804)
inline double IOutcomeLookup::GetOutcomeTypeCd ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_OutcomeTypeCd(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1805)
inline IUnknownPtr IOutcomeLookup::SelectOutcomeByIndex ( int idx, long bLoadPlanInfo ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_SelectOutcomeByIndex(idx, bLoadPlanInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1806)
inline HRESULT IOutcomeLookup::SyncOutcomeSearchResultVector ( struct IOutcome * pOutcome, long isNew, int idx ) {
    HRESULT _hr = raw_SyncOutcomeSearchResultVector(pOutcome, isNew, idx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1807)
inline long IOutcomeLookup::SearchOutcomesByFilter ( _bstr_t sSearch, OC_SEARCH_FILTER_TYPE filterType ) {
    long _result = 0;
    HRESULT _hr = raw_SearchOutcomesByFilter(sSearch, filterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline long IOutcomeLookup::SearchOutcomesByFilterWithFacilityFlexing ( _bstr_t sSearch, OC_SEARCH_FILTER_TYPE filterType, double dPatientLocationCd ) {
    long _result = 0;
    HRESULT _hr = raw_SearchOutcomesByFilterWithFacilityFlexing(sSearch, filterType, dPatientLocationCd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITaskLookup wrapper method implementations
//

#pragma implementation_key(1809)
inline long ITaskLookup::SearchTasks ( _bstr_t sSearch ) {
    long _result = 0;
    HRESULT _hr = raw_SearchTasks(sSearch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline _bstr_t ITaskLookup::GetTaskDescription ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1811)
inline double ITaskLookup::GetReferenceTaskId ( int Index ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceTaskId(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlanPrivManager wrapper method implementations
//

#pragma implementation_key(1812)
inline _variant_t IPlanPrivManager::GetExceptions ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetExceptions(dPatientId, dEncounter, ePlanPriv, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1813)
inline PLAN_PRIV_VALUE IPlanPrivManager::GetPrivValue ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv ) {
    PLAN_PRIV_VALUE _result;
    HRESULT _hr = raw_GetPrivValue(dPatientId, dEncounter, ePlanPriv, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1814)
inline long IPlanPrivManager::HasPrivilegeByDisp ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv, IDispatch * pDisp ) {
    long _result = 0;
    HRESULT _hr = raw_HasPrivilegeByDisp(dPatientId, dEncounter, ePlanPriv, pDisp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1815)
inline long IPlanPrivManager::HasPrivilegeByType ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv, double dPlanTypeCode ) {
    long _result = 0;
    HRESULT _hr = raw_HasPrivilegeByType(dPatientId, dEncounter, ePlanPriv, dPlanTypeCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1816)
inline HRESULT IPlanPrivManager::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1817)
inline long IPlanPrivManager::CanUserUpdatePlans ( double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_CanUserUpdatePlans(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1818)
inline long IPlanPrivManager::DoesUpdatePlansPrivilegeHaveIncludeExceptions ( double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_DoesUpdatePlansPrivilegeHaveIncludeExceptions(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1819)
inline long IPlanPrivManager::DoesUpdatePlansPrivilegeHaveExcludeExceptions ( double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_DoesUpdatePlansPrivilegeHaveExcludeExceptions(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1820)
inline _variant_t IPlanPrivManager::GetUpdatePlansPrivilegeExceptions ( double dPatientId, double dEncounterId ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUpdatePlansPrivilegeExceptions(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1821)
inline long IPlanPrivManager::DoesUserHavePrivilegeToUpdatePhase ( double dPatientId, double dEncounterId, IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_DoesUserHavePrivilegeToUpdatePhase(dPatientId, dEncounterId, pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1822)
inline long IPlanPrivManager::DoesUserHavePrivilegeToUpdateComponent ( double dPatientId, double dEncounterId, IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_DoesUserHavePrivilegeToUpdateComponent(dPatientId, dEncounterId, pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1823)
inline long IPlanPrivManager::DoesUserHavePrivilegeToAcceptProposals ( double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_DoesUserHavePrivilegeToAcceptProposals(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1824)
inline long IPlanPrivManager::DoesUserHavePrivilegeToAcceptReviews ( double dPatientId, double dEncounterId ) {
    long _result = 0;
    HRESULT _hr = raw_DoesUserHavePrivilegeToAcceptReviews(dPatientId, dEncounterId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISuggestedPlan wrapper method implementations
//

#pragma implementation_key(1825)
inline _variant_t ISuggestedPlan::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1826)
inline double ISuggestedPlan::GetTaskId ( ) {
    double _result = 0;
    HRESULT _hr = get_TaskId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1827)
inline void ISuggestedPlan::PutTaskId ( double pVal ) {
    HRESULT _hr = put_TaskId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1828)
inline double ISuggestedPlan::GetTaskStatusCd ( ) {
    double _result = 0;
    HRESULT _hr = get_TaskStatusCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline void ISuggestedPlan::PutTaskStatusCd ( double pVal ) {
    HRESULT _hr = put_TaskStatusCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1830)
inline long ISuggestedPlan::GetTaskUpdateCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TaskUpdateCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1831)
inline void ISuggestedPlan::PutTaskUpdateCount ( long pVal ) {
    HRESULT _hr = put_TaskUpdateCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1832)
inline double ISuggestedPlan::GetPlanCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1833)
inline void ISuggestedPlan::PutPlanCatalogId ( double pVal ) {
    HRESULT _hr = put_PlanCatalogId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1834)
inline _bstr_t ISuggestedPlan::GetDisplayDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1835)
inline void ISuggestedPlan::PutDisplayDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayDescription(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1836)
inline double ISuggestedPlan::GetPathwayTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_PathwayTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1837)
inline void ISuggestedPlan::PutPathwayTypeCd ( double pVal ) {
    HRESULT _hr = put_PathwayTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1838)
inline DATE ISuggestedPlan::GetPlanSuggestedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_PlanSuggestedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1839)
inline void ISuggestedPlan::PutPlanSuggestedDate ( DATE pVal ) {
    HRESULT _hr = put_PlanSuggestedDate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1840)
inline unsigned __int64 ISuggestedPlan::GetPlanSuggestedDateTimeZone ( ) {
    unsigned __int64 _result = 0;
    HRESULT _hr = get_PlanSuggestedDateTimeZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1841)
inline void ISuggestedPlan::PutPlanSuggestedDateTimeZone ( unsigned __int64 pVal ) {
    HRESULT _hr = put_PlanSuggestedDateTimeZone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1842)
inline _bstr_t ISuggestedPlan::GetPlanSuggestedReason ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanSuggestedReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1843)
inline void ISuggestedPlan::PutPlanSuggestedReason ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanSuggestedReason(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1844)
inline double ISuggestedPlan::GetPlanEvidenceReltnId ( ) {
    double _result = 0;
    HRESULT _hr = get_PlanEvidenceReltnId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1845)
inline void ISuggestedPlan::PutPlanEvidenceReltnId ( double pVal ) {
    HRESULT _hr = put_PlanEvidenceReltnId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1846)
inline _bstr_t ISuggestedPlan::GetEvidenceLocator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvidenceLocator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1847)
inline void ISuggestedPlan::PutEvidenceLocator ( _bstr_t pVal ) {
    HRESULT _hr = put_EvidenceLocator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1848)
inline _bstr_t ISuggestedPlan::GetEvidenceTypeMean ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EvidenceTypeMean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1849)
inline void ISuggestedPlan::PutEvidenceTypeMean ( _bstr_t pVal ) {
    HRESULT _hr = put_EvidenceTypeMean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1850)
inline double ISuggestedPlan::GetActionReasonCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionReasonCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1851)
inline void ISuggestedPlan::PutActionReasonCd ( double pVal ) {
    HRESULT _hr = put_ActionReasonCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1852)
inline _bstr_t ISuggestedPlan::GetActionReasonComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionReasonComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1853)
inline void ISuggestedPlan::PutActionReasonComment ( _bstr_t pVal ) {
    HRESULT _hr = put_ActionReasonComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1854)
inline double ISuggestedPlan::GetActionTypeCd ( ) {
    double _result = 0;
    HRESULT _hr = get_ActionTypeCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1855)
inline void ISuggestedPlan::PutActionTypeCd ( double pVal ) {
    HRESULT _hr = put_ActionTypeCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1856)
inline short ISuggestedPlan::GetRefTextExist ( ) {
    short _result = 0;
    HRESULT _hr = get_RefTextExist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline void ISuggestedPlan::PutRefTextExist ( short pVal ) {
    HRESULT _hr = put_RefTextExist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1858)
inline IDispatchPtr ISuggestedPlan::GetUTCPlanSuggestedDate ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UTCPlanSuggestedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1859)
inline void ISuggestedPlan::PutUTCPlanSuggestedDate ( IDispatch * pVal ) {
    HRESULT _hr = put_UTCPlanSuggestedDate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMaintenanceCriterion wrapper method implementations
//

#pragma implementation_key(1860)
inline _bstr_t IMaintenanceCriterion::GetPlanDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlanDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1861)
inline void IMaintenanceCriterion::PutPlanDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_PlanDescription(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1862)
inline double IMaintenanceCriterion::GetPwMaintenanceCriteriaId ( ) {
    double _result = 0;
    HRESULT _hr = get_PwMaintenanceCriteriaId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline void IMaintenanceCriterion::PutPwMaintenanceCriteriaId ( double pVal ) {
    HRESULT _hr = put_PwMaintenanceCriteriaId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1864)
inline double IMaintenanceCriterion::GetVersionPwCatId ( ) {
    double _result = 0;
    HRESULT _hr = get_VersionPwCatId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1865)
inline void IMaintenanceCriterion::PutVersionPwCatId ( double pVal ) {
    HRESULT _hr = put_VersionPwCatId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1866)
inline double IMaintenanceCriterion::GetTimeUnitCd ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeUnitCd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1867)
inline void IMaintenanceCriterion::PutTimeUnitCd ( double pVal ) {
    HRESULT _hr = put_TimeUnitCd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1868)
inline long IMaintenanceCriterion::GetTimeQty ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeQty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1869)
inline void IMaintenanceCriterion::PutTimeQty ( long pVal ) {
    HRESULT _hr = put_TimeQty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1870)
inline long IMaintenanceCriterion::GetUpdtCnt ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdtCnt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1871)
inline void IMaintenanceCriterion::PutUpdtCnt ( long pVal ) {
    HRESULT _hr = put_UpdtCnt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1872)
inline EMaintenanceCriterionAction IMaintenanceCriterion::GetMaintenanceCriterionAction ( ) {
    EMaintenanceCriterionAction _result;
    HRESULT _hr = get_MaintenanceCriterionAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1873)
inline void IMaintenanceCriterion::PutMaintenanceCriterionAction ( EMaintenanceCriterionAction pVal ) {
    HRESULT _hr = put_MaintenanceCriterionAction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1874)
inline EMaintenanceCriterionType IMaintenanceCriterion::GetMaintenanceCriterionType ( ) {
    EMaintenanceCriterionType _result;
    HRESULT _hr = get_MaintenanceCriterionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline void IMaintenanceCriterion::PutMaintenanceCriterionType ( EMaintenanceCriterionType pVal ) {
    HRESULT _hr = put_MaintenanceCriterionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1876)
inline EMaintenanceCriterionEncounterType IMaintenanceCriterion::GetMaintenanceCriterionEncounterType ( ) {
    EMaintenanceCriterionEncounterType _result;
    HRESULT _hr = get_MaintenanceCriterionEncounterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1877)
inline void IMaintenanceCriterion::PutMaintenanceCriterionEncounterType ( EMaintenanceCriterionEncounterType pVal ) {
    HRESULT _hr = put_MaintenanceCriterionEncounterType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1878)
inline HRESULT IMaintenanceCriterion::Copy ( struct IMaintenanceCriterion * pMaintenanceCriterion ) {
    HRESULT _hr = raw_Copy(pMaintenanceCriterion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1879)
inline long IMaintenanceCriterion::IsEqual ( struct IMaintenanceCriterion * pMaintenanceCriterion ) {
    long _result = 0;
    HRESULT _hr = raw_IsEqual(pMaintenanceCriterion, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1880)
inline EMaintenanceCriterionPlanExpirationType IMaintenanceCriterion::GetMaintenanceCriterionPlanExpirationType ( ) {
    EMaintenanceCriterionPlanExpirationType _result;
    HRESULT _hr = get_MaintenanceCriterionPlanExpirationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1881)
inline void IMaintenanceCriterion::PutMaintenanceCriterionPlanExpirationType ( EMaintenanceCriterionPlanExpirationType pVal ) {
    HRESULT _hr = put_MaintenanceCriterionPlanExpirationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFolderLookup wrapper method implementations
//

#pragma implementation_key(1882)
inline void IFolderLookup::PutPatientId ( double _arg1 ) {
    HRESULT _hr = put_PatientId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1883)
inline void IFolderLookup::PutEncounterId ( double _arg1 ) {
    HRESULT _hr = put_EncounterId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1884)
inline void IFolderLookup::PutVenueTypeCd ( double _arg1 ) {
    HRESULT _hr = put_VenueTypeCd(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1885)
inline void IFolderLookup::PutViewPlans ( long _arg1 ) {
    HRESULT _hr = put_ViewPlans(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1886)
inline HRESULT IFolderLookup::LoadDefaultFolders ( ) {
    HRESULT _hr = raw_LoadDefaultFolders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1887)
inline long IFolderLookup::LoadFavoritesWithPrsnlPlans ( ) {
    long _result = 0;
    HRESULT _hr = raw_LoadFavoritesWithPrsnlPlans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline long IFolderLookup::GetDontShowFavoritePlans ( ) {
    long _result = 0;
    HRESULT _hr = get_DontShowFavoritePlans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1889)
inline void IFolderLookup::PutDontShowFavoritePlans ( long pVal ) {
    HRESULT _hr = put_DontShowFavoritePlans(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1890)
inline HRESULT IFolderLookup::ResetEncntrSpecificInfo ( ) {
    HRESULT _hr = raw_ResetEncntrSpecificInfo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1891)
inline long IFolderLookup::GetFavoritesSortPref ( ) {
    long _result = 0;
    HRESULT _hr = get_FavoritesSortPref(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1892)
inline HRESULT IFolderLookup::UpdateFavoriteSortPref ( long bAlphaSort ) {
    HRESULT _hr = raw_UpdateFavoriteSortPref(bAlphaSort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1893)
inline LONG_PTR IFolderLookup::GetRootPtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_RootPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1894)
inline LONG_PTR IFolderLookup::GetFavFolderByAltSelCatId ( double dAltSelCatId ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetFavFolderByAltSelCatId(dAltSelCatId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1895)
inline LONG_PTR IFolderLookup::GetPrsnlPlansFolder ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_PrsnlPlansFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1896)
inline LONG_PTR IFolderLookup::GetFavoritesPtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_FavoritesPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1897)
inline LONG_PTR IFolderLookup::GetHomePtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_HomePtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1898)
inline LONG_PTR IFolderLookup::GetHomeRootPtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_HomeRootPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1899)
inline HRESULT IFolderLookup::SetFolderAsHome ( LONG_PTR pVal ) {
    HRESULT _hr = raw_SetFolderAsHome(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1900)
inline HRESULT IFolderLookup::AddHomeFolder ( LONG_PTR pFolder ) {
    HRESULT _hr = raw_AddHomeFolder(pFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1901)
inline long IFolderLookup::IsFolderLoaded ( LONG_PTR pAsFolder ) {
    long _result = 0;
    HRESULT _hr = raw_IsFolderLoaded(pAsFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1902)
inline HRESULT IFolderLookup::ClearChildList ( LONG_PTR pAsFolder ) {
    HRESULT _hr = raw_ClearChildList(pAsFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1903)
inline HRESULT IFolderLookup::SortAllItemsAndChildItems ( LONG_PTR pAsFolder ) {
    HRESULT _hr = raw_SortAllItemsAndChildItems(pAsFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1904)
inline long IFolderLookup::RemoveFavorite ( LONG_PTR pItem ) {
    long _result = 0;
    HRESULT _hr = raw_RemoveFavorite(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1905)
inline long IFolderLookup::AddFavoriteItem ( LONG_PTR pItem, double dParentAltSelId, LONG_PTR pFolder ) {
    long _result = 0;
    HRESULT _hr = raw_AddFavoriteItem(pItem, dParentAltSelId, pFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1906)
inline long IFolderLookup::AddFavoriteOrder ( LONG_PTR pvOrdObj, _bstr_t sFavNickname, double dParentAltSelId, LONG_PTR pFolder ) {
    long _result = 0;
    HRESULT _hr = raw_AddFavoriteOrder(pvOrdObj, sFavNickname, dParentAltSelId, pFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1907)
inline long IFolderLookup::AddCommonFavorite ( LONG_PTR orderList, _bstr_t sFavNickname, double dParentAltSelId, LONG_PTR pFolder ) {
    long _result = 0;
    HRESULT _hr = raw_AddCommonFavorite(orderList, sFavNickname, dParentAltSelId, pFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1908)
inline double IFolderLookup::AddFolder ( _bstr_t sDesc, LONG_PTR pFolder ) {
    double _result = 0;
    HRESULT _hr = raw_AddFolder(sDesc, pFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline LONG_PTR IFolderLookup::ModifyFolderItem ( LONG_PTR pItem, double newParentAltSelCatId, _bstr_t sDesc ) {
    LONG_PTR _result;
    HRESULT _hr = raw_ModifyFolderItem(pItem, newParentAltSelCatId, sDesc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1910)
inline HRESULT IFolderLookup::ResequenceFolder ( LONG_PTR lFolder, LONG_PTR lAltSelArr ) {
    HRESULT _hr = raw_ResequenceFolder(lFolder, lAltSelArr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1911)
inline HRESULT IFolderLookup::LoadPrsnlPlansChildren ( LONG_PTR lLoadArray ) {
    HRESULT _hr = raw_LoadPrsnlPlansChildren(lLoadArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1912)
inline long IFolderLookup::GetPrsnlPlansChildren ( LONG_PTR lLoadArray ) {
    long _result = 0;
    HRESULT _hr = raw_GetPrsnlPlansChildren(lLoadArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1913)
inline HRESULT IFolderLookup::GetChildren ( LONG_PTR lFolder, LONG_PTR lLoadArray ) {
    HRESULT _hr = raw_GetChildren(lFolder, lLoadArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1914)
inline long IFolderLookup::LoadInTestPlans ( ) {
    long _result = 0;
    HRESULT _hr = raw_LoadInTestPlans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1915)
inline HRESULT IFolderLookup::LoadInTestPlansChildren ( LONG_PTR lLoadArray ) {
    HRESULT _hr = raw_LoadInTestPlansChildren(lLoadArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1916)
inline long IFolderLookup::GetInTestPlansChildren ( LONG_PTR lLoadArray ) {
    long _result = 0;
    HRESULT _hr = raw_GetInTestPlansChildren(lLoadArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1917)
inline LONG_PTR IFolderLookup::GetInTestPlansFolder ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_InTestPlansFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1918)
inline void IFolderLookup::PutViewRegimens ( long _arg1 ) {
    HRESULT _hr = put_ViewRegimens(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1919)
inline long IFolderLookup::LoadPersonalizedPlans ( ) {
    long _result = 0;
    HRESULT _hr = raw_LoadPersonalizedPlans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1920)
inline HRESULT IFolderLookup::LoadPersonalizedPlansChildren ( LONG_PTR lLoadArray ) {
    HRESULT _hr = raw_LoadPersonalizedPlansChildren(lLoadArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1921)
inline long IFolderLookup::GetPersonalizedPlansChildren ( LONG_PTR lLoadArray ) {
    long _result = 0;
    HRESULT _hr = raw_GetPersonalizedPlansChildren(lLoadArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1922)
inline LONG_PTR IFolderLookup::GetPersonalizedPlansFolder ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_PersonalizedPlansFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1923)
inline void IFolderLookup::PutViewOrders ( long _arg1 ) {
    HRESULT _hr = put_ViewOrders(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1924)
inline void IFolderLookup::PutEnableInTestPlans ( long _arg1 ) {
    HRESULT _hr = put_EnableInTestPlans(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1925)
inline void IFolderLookup::PutEnablePrsnlPlans ( long _arg1 ) {
    HRESULT _hr = put_EnablePrsnlPlans(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1926)
inline void IFolderLookup::PutEnablePersonalizedPlans ( long _arg1 ) {
    HRESULT _hr = put_EnablePersonalizedPlans(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOrderLookupEx wrapper method implementations
//

#pragma implementation_key(1927)
inline void IOrderLookupEx::PutPatientId ( double _arg1 ) {
    HRESULT _hr = put_PatientId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1928)
inline void IOrderLookupEx::PutEncounterId ( double _arg1 ) {
    HRESULT _hr = put_EncounterId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1929)
inline long IOrderLookupEx::GetOnlyFormularyStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_OnlyFormularyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1930)
inline void IOrderLookupEx::PutOnlyFormularyStatus ( long pVal ) {
    HRESULT _hr = put_OnlyFormularyStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1931)
inline INT_PTRX IOrderLookupEx::GetSearchResultsCount ( ) {
    INT_PTRX _result;
    HRESULT _hr = get_SearchResultsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1932)
inline LONG_PTR IOrderLookupEx::GetSearchResult ( long Index ) {
    LONG_PTR _result;
    HRESULT _hr = raw_GetSearchResult(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1933)
inline INT_PTRX IOrderLookupEx::Search ( LONG_PTR lOrderableSearchStruct ) {
    INT_PTRX _result;
    HRESULT _hr = raw_Search(lOrderableSearchStruct, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1934)
inline long IOrderLookupEx::IsProposalAllowed ( LONG_PTR lOrderableSearchStruct ) {
    long _result = 0;
    HRESULT _hr = raw_IsProposalAllowed(lOrderableSearchStruct, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITherapeuticClassLookUp wrapper method implementations
//

#pragma implementation_key(1935)
inline void ITherapeuticClassLookUp::PutPatientId ( double _arg1 ) {
    HRESULT _hr = put_PatientId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1936)
inline void ITherapeuticClassLookUp::PutEncounterId ( double _arg1 ) {
    HRESULT _hr = put_EncounterId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1937)
inline long ITherapeuticClassLookUp::GetOnlyFormularyStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_OnlyFormularyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1938)
inline void ITherapeuticClassLookUp::PutOnlyFormularyStatus ( long pVal ) {
    HRESULT _hr = put_OnlyFormularyStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1939)
inline LONG_PTR ITherapeuticClassLookUp::GetRootPtr ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_RootPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1940)
inline HRESULT ITherapeuticClassLookUp::GetChildren ( LONG_PTR lFolder, LONG_PTR lLoadArray ) {
    HRESULT _hr = raw_GetChildren(lFolder, lLoadArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1941)
inline LONG_PTR ITherapeuticClassLookUp::Search ( LONG_PTR lOrderableSearchStruct, LONG_PTR lLoadArray ) {
    LONG_PTR _result;
    HRESULT _hr = raw_Search(lOrderableSearchStruct, lLoadArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPowerPlansXMLTranslator wrapper method implementations
//

#pragma implementation_key(1942)
inline _bstr_t IPowerPlansXMLTranslator::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1943)
inline HRESULT IPowerPlansXMLTranslator::SetXML ( _bstr_t bstrXML ) {
    HRESULT _hr = raw_SetXML(bstrXML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1944)
inline HRESULT IPowerPlansXMLTranslator::SetNoteRowBackgroundColor ( long lColor ) {
    HRESULT _hr = raw_SetNoteRowBackgroundColor(lColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1945)
inline HRESULT IPowerPlansXMLTranslator::SetNoteRowTextColor ( long lColor ) {
    HRESULT _hr = raw_SetNoteRowTextColor(lColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1946)
inline long IPowerPlansXMLTranslator::GetNoteBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNoteBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1947)
inline long IPowerPlansXMLTranslator::GetNoteTextColor ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNoteTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPlanProposalManager wrapper method implementations
//

#pragma implementation_key(1948)
inline long IPlanProposalManager::IsProposalNecessary ( LONG_PTR lIsProposalNecessary ) {
    long _result = 0;
    HRESULT _hr = raw_IsProposalNecessary(lIsProposalNecessary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1949)
inline long IPlanProposalManager::CanPlanBeProposed ( LONG_PTR lCanPlanBeProposedCriteria ) {
    long _result = 0;
    HRESULT _hr = raw_CanPlanBeProposed(lCanPlanBeProposedCriteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1950)
inline long IPlanProposalManager::GetProposalStatus ( LONG_PTR lGetProposalStatusCriteria ) {
    long _result = 0;
    HRESULT _hr = raw_GetProposalStatus(lGetProposalStatusCriteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline long IPlanProposalManager::IsPendingPropose ( IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_IsPendingPropose(pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1952)
inline long IPlanProposalManager::IsPendingAccept ( IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_IsPendingAccept(pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline long IPlanProposalManager::IsPendingReject ( IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_IsPendingReject(pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1954)
inline long IPlanProposalManager::IsPendingSubmit ( IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_IsPendingSubmit(pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1955)
inline long IPlanProposalManager::IsPendingWithdraw ( IDispatch * pDispatch ) {
    long _result = 0;
    HRESULT _hr = raw_IsPendingWithdraw(pDispatch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1956)
inline LONG_PTR IPlanProposalManager::AcceptPlanProposal ( LONG_PTR lAcceptPlanProposalCriteria ) {
    LONG_PTR _result;
    HRESULT _hr = raw_AcceptPlanProposal(lAcceptPlanProposalCriteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1957)
inline HRESULT IPlanProposalManager::LogTimerForProposedPlanAction ( IDispatch * pDispatch ) {
    HRESULT _hr = raw_LogTimerForProposedPlanAction(pDispatch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPrecomponentOrder wrapper method implementations
//

#pragma implementation_key(1958)
inline void IPrecomponentOrder::PutPatientId ( double pPatientId ) {
    HRESULT _hr = put_PatientId(pPatientId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1959)
inline double IPrecomponentOrder::GetPatientId ( ) {
    double _result = 0;
    HRESULT _hr = get_PatientId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1960)
inline void IPrecomponentOrder::PutProviderId ( double pProviderId ) {
    HRESULT _hr = put_ProviderId(pProviderId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1961)
inline double IPrecomponentOrder::GetProviderId ( ) {
    double _result = 0;
    HRESULT _hr = get_ProviderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1962)
inline void IPrecomponentOrder::PutorderId ( double pOrderId ) {
    HRESULT _hr = put_orderId(pOrderId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1963)
inline double IPrecomponentOrder::GetorderId ( ) {
    double _result = 0;
    HRESULT _hr = get_orderId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline void IPrecomponentOrder::PutVersionPlanCatalogId ( double pVersionPlanCatalogId ) {
    HRESULT _hr = put_VersionPlanCatalogId(pVersionPlanCatalogId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1965)
inline double IPrecomponentOrder::GetVersionPlanCatalogId ( ) {
    double _result = 0;
    HRESULT _hr = get_VersionPlanCatalogId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline void IPrecomponentOrder::PutCycleNumber ( long pCycleNumber ) {
    HRESULT _hr = put_CycleNumber(pCycleNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1967)
inline long IPrecomponentOrder::GetCycleNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_CycleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1968)
inline void IPrecomponentOrder::PutComponentUUID ( _bstr_t pComponentUUID ) {
    HRESULT _hr = put_ComponentUUID(pComponentUUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1969)
inline _bstr_t IPrecomponentOrder::GetComponentUUID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComponentUUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1970)
inline void IPrecomponentOrder::PutRegimenId ( double pRegimenId ) {
    HRESULT _hr = put_RegimenId(pRegimenId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1971)
inline double IPrecomponentOrder::GetRegimenId ( ) {
    double _result = 0;
    HRESULT _hr = get_RegimenId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
