// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (527a5593).
//
// p:\ml-native\orders\orders_frontend\code\pvorderschedulemanager\src\main\cpp\testrelease\pvcarecoordcom.tlh
//
// C++ source equivalent of type library PVCARECOORDCOM.dll
// compiler-generated file created 03/15/22 at 16:43:55 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("8baeab86-014f-42f0-8085-bdf61effdfb0"))
/* LIBID */ __PVCARECOORDCOMLib;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0001;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0002;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0003;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0004;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0005;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0006;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0007;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0008;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0009;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0010;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0011;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0012;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0013;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0014;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0015;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0016;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0017;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0018;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0019;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0020;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0021;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0022;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0023;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0024;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0025;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0026;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0027;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0028;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0029;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0030;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0031;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0032;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0033;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0034;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0035;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0036;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0037;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0038;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0039;
enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0040;
struct /* coclass */ PlanLookUp;
struct __declspec(uuid("fe4e48d9-bfe5-453a-b725-34161a397962"))
/* dual interface */ IPlanLookUp;
struct __declspec(uuid("72eb3d41-e1ea-4c64-b1a1-16af8e344ef0"))
/* dual interface */ IPlan;
struct __declspec(uuid("c565dbdd-d6f4-4554-8109-fb07bcc12ae2"))
/* dual interface */ IPhase;
struct __declspec(uuid("7defb4d6-c4f0-11d2-9683-00c0e310724c"))
/* interface */ IProVideObject;
struct __declspec(uuid("e8e76297-ba31-4c6c-b134-b47365cb4c28"))
/* dual interface */ IComponent;
struct __declspec(uuid("3301b1bc-1352-41c5-8a7a-14727c56b5a2"))
/* dual interface */ IOrderSentence;
struct __declspec(uuid("7656ed7c-9c4e-4be7-bf01-1fe6dffd8ab7"))
/* dual interface */ IGroup;
struct __declspec(uuid("5aae1c68-c284-490a-a401-1b8f2b26a1bc"))
/* dual interface */ IPlanAction;
struct __declspec(uuid("b5ef98de-6e61-4254-b554-ad68638cb2a7"))
/* dual interface */ IReview;
struct /* coclass */ Plan;
struct /* coclass */ Phase;
struct __declspec(uuid("41faebc3-1a90-11d3-968c-00c0e310724c"))
/* interface */ IProVideObjectEvent;
struct /* coclass */ Component;
struct /* coclass */ OrderSentence;
struct /* coclass */ OrderLookUp;
struct __declspec(uuid("60130dd8-66eb-40b9-b992-62fe289a0807"))
/* dual interface */ IOrderLookUp;
struct __declspec(uuid("ffea43f1-366a-4de7-b1a9-9db56a46d972"))
/* dual interface */ IIngredient;
struct __declspec(uuid("d95de9fd-42dd-445f-a411-8991c7fae16e"))
/* dual interface */ IVariance;
struct __declspec(uuid("17dc305d-fd51-4d19-99a7-ad75aae50f72"))
/* dual interface */ IIdMngr;
struct /* coclass */ ClinCategory;
struct __declspec(uuid("abe13c15-45e7-4958-81ef-7afd374d5caf"))
/* dual interface */ IClinCategory;
struct /* coclass */ PlanAction;
struct /* coclass */ DTALookup;
struct __declspec(uuid("e1216ba2-228b-430b-ac35-5c03baaaec53"))
/* dual interface */ IDTALookup;
struct /* coclass */ Outcome;
struct __declspec(uuid("3390e561-ab77-4361-8227-3a3177b02048"))
/* dual interface */ IOutcome;
struct __declspec(uuid("89bbebfb-a415-4dc8-866e-cc854b055c7e"))
/* dual interface */ IOutcomeResult;
struct /* coclass */ OutcomeLookup;
struct __declspec(uuid("a9173c14-6f7b-4677-a463-9206164cc7a5"))
/* dual interface */ IOutcomeLookup;
struct /* coclass */ OutcomeResult;
struct /* coclass */ TaskLookup;
struct __declspec(uuid("864fe12f-dd15-431d-ae0b-aeb145990eda"))
/* dual interface */ ITaskLookup;
struct /* coclass */ Ingredient;
struct /* coclass */ Variance;
struct /* coclass */ ComponentGroup;
struct /* coclass */ IdMngr;
struct /* coclass */ PlanPrivManager;
struct __declspec(uuid("dffd161e-9324-48b4-b4af-0017e15cdf68"))
/* dual interface */ IPlanPrivManager;
struct /* coclass */ SuggestedPlan;
struct __declspec(uuid("807d3756-2890-4953-89f4-24a5969fa99e"))
/* dual interface */ ISuggestedPlan;
struct /* coclass */ MaintenanceCriterion;
struct __declspec(uuid("3c590c26-907a-423b-81eb-cfbef7c77469"))
/* dual interface */ IMaintenanceCriterion;
struct /* coclass */ FolderLookup;
struct __declspec(uuid("aa8be575-bc8a-4f48-bfff-ab01328a7d0f"))
/* dual interface */ IFolderLookup;
struct /* coclass */ OrderLookupEx;
struct __declspec(uuid("b0a1e52e-0f86-4e62-b0d5-38e7d1bbbc6b"))
/* dual interface */ IOrderLookupEx;
struct /* coclass */ TherapeuticClassLookUp;
struct __declspec(uuid("e7dcf036-25da-43ce-b2cf-aacb13b8848a"))
/* dual interface */ ITherapeuticClassLookUp;
struct /* coclass */ PowerPlansXMLTranslator;
struct __declspec(uuid("380b3340-983d-11e0-84a9-0002a5d5c51b"))
/* dual interface */ IPowerPlansXMLTranslator;
struct /* coclass */ Review;
struct /* coclass */ PlanProposalManager;
struct __declspec(uuid("8f6ba384-a4d7-45e1-af71-f21089216bed"))
/* dual interface */ IPlanProposalManager;
struct /* coclass */ PrecomponentOrder;
struct __declspec(uuid("f0639b96-cd1e-4e40-a3b9-391f26ae4c0c"))
/* dual interface */ IPrecomponentOrder;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0001 OC_SEARCH_FILTER_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0002 COMP_ATTRIBUTE_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0003 COMP_LOADING_STATUS;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0004 PLAN_EVIDENCE_LEVEL;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0005 PLAN_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0006 COMPONENT_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0007 ACTION_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0008 DETAIL_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0009 OUTCOME_EVAL;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0010 OUTCOME_ACT_STATUS;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0011 PLAN_ZONE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0012 PLAN_REF_TEXT;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0013 PLAN_PRIV_VALUE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0014 PLAN_PRIV;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0015 NOMENCLATURE_STRING_TYPE;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0016 COMPONENT_COUNT_FLAG;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0017 DEFAULT_VISIT_TYPE_FLAG;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0018 PROTOCOL_REVIEW_STATUS_FLAG;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0019 PATHWAY_MISSING_REASON_FLAG;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0020 PLAN_WARNINGS_FLAGS;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0021 IV_SEQUENCE_STATUS;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0022 EPhaseStatusBits;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0023 EPowerPlanProposalStatusBits;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0024 EPowerPlanReviewStatus;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0025 EPowerPlanReviewType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0026 EPowerPlanProposalType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0027 EMaintenanceCriterionAction;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0028 EMaintenanceCriterionType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0029 EMaintenanceCriterionEncounterType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0030 EMaintenanceCriterionPlanExpirationType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0031 ESubPhaseStyle;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0032 EMissingRequiredDetails;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0033 EPlanVersionStatus;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0034 EPhaseProcessingStatus;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0035 EPlanOrderSentenceType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0036 EComponentLinkingRuleType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0037 EComponentGroupActionType;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0038 EComponentGroupOverrideReasonSetting;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0039 EComponentDiscontinueTypeFlag;
typedef enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0040 EPlanRestrictedActionBits;
#if !defined(_WIN64)
typedef __w64 long LONG_PTR;
#else
typedef __int64 LONG_PTR;
#endif
#if !defined(_WIN64)
typedef __w64 long INT_PTRX;
#else
typedef __int64 INT_PTRX;
#endif

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IProVideObject, __uuidof(IProVideObject));
_COM_SMARTPTR_TYPEDEF(IOrderSentence, __uuidof(IOrderSentence));
_COM_SMARTPTR_TYPEDEF(IGroup, __uuidof(IGroup));
_COM_SMARTPTR_TYPEDEF(IComponent, __uuidof(IComponent));
_COM_SMARTPTR_TYPEDEF(IPlanAction, __uuidof(IPlanAction));
_COM_SMARTPTR_TYPEDEF(IReview, __uuidof(IReview));
_COM_SMARTPTR_TYPEDEF(IPhase, __uuidof(IPhase));
_COM_SMARTPTR_TYPEDEF(IPlan, __uuidof(IPlan));
_COM_SMARTPTR_TYPEDEF(IPlanLookUp, __uuidof(IPlanLookUp));
_COM_SMARTPTR_TYPEDEF(IProVideObjectEvent, __uuidof(IProVideObjectEvent));
_COM_SMARTPTR_TYPEDEF(IOrderLookUp, __uuidof(IOrderLookUp));
_COM_SMARTPTR_TYPEDEF(IIngredient, __uuidof(IIngredient));
_COM_SMARTPTR_TYPEDEF(IVariance, __uuidof(IVariance));
_COM_SMARTPTR_TYPEDEF(IIdMngr, __uuidof(IIdMngr));
_COM_SMARTPTR_TYPEDEF(IClinCategory, __uuidof(IClinCategory));
_COM_SMARTPTR_TYPEDEF(IDTALookup, __uuidof(IDTALookup));
_COM_SMARTPTR_TYPEDEF(IOutcomeResult, __uuidof(IOutcomeResult));
_COM_SMARTPTR_TYPEDEF(IOutcome, __uuidof(IOutcome));
_COM_SMARTPTR_TYPEDEF(IOutcomeLookup, __uuidof(IOutcomeLookup));
_COM_SMARTPTR_TYPEDEF(ITaskLookup, __uuidof(ITaskLookup));
_COM_SMARTPTR_TYPEDEF(IPlanPrivManager, __uuidof(IPlanPrivManager));
_COM_SMARTPTR_TYPEDEF(ISuggestedPlan, __uuidof(ISuggestedPlan));
_COM_SMARTPTR_TYPEDEF(IMaintenanceCriterion, __uuidof(IMaintenanceCriterion));
_COM_SMARTPTR_TYPEDEF(IFolderLookup, __uuidof(IFolderLookup));
_COM_SMARTPTR_TYPEDEF(IOrderLookupEx, __uuidof(IOrderLookupEx));
_COM_SMARTPTR_TYPEDEF(ITherapeuticClassLookUp, __uuidof(ITherapeuticClassLookUp));
_COM_SMARTPTR_TYPEDEF(IPowerPlansXMLTranslator, __uuidof(IPowerPlansXMLTranslator));
_COM_SMARTPTR_TYPEDEF(IPlanProposalManager, __uuidof(IPlanProposalManager));
_COM_SMARTPTR_TYPEDEF(IPrecomponentOrder, __uuidof(IPrecomponentOrder));

//
// Type library items
//

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0001
{
    eOCFilterTypeAll = 0,
    eOCFilterTypeGoals = 1,
    eOCFilterTypeIndicators = 2,
    eOCFilterTypeInterventions = 3,
    eOCFilterTypePatientSpecific = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0002
{
    eInclude = 0,
    eToolOrderSentMod = 1,
    eToolOrderSentRemove = 2,
    eToolOrderSentNew = 3,
    eToolOrderSentUp = 4,
    eToolOrderSentDown = 5,
    eToolOrderSentComment = 6,
    eChemotherapy = 7,
    eChemotherapyRelated = 8,
    eRequired = 9,
    eDefaultOrderSentence = 10
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0003
{
    eNoComponent = 0,
    eLoadingComp = 1,
    eCompLoaded = 2,
    eLoadingFailed = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0004
{
    ePlanLevel = 0,
    ePhaseLevel = 1,
    eClinCatLevel = 2,
    eClinSubCatLevel = 3,
    eComponentLevel = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0005
{
    eCarePlan = 0,
    ePathway = 1,
    ePhase = 2,
    eSubPhase = 3,
    eTaperPlan = 4,
    eTreatmentPeriod = 5
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0006
{
    eOrderType = 0,
    eNoteType = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0007
{
    eActionNone = 0,
    eActionCreate = 1,
    eActionModify = 2,
    eActionRemove = 3,
    eActionActOrder = 4,
    eActionActModify = 5,
    eActionActPrivRemove = 6,
    eActionActProcessing = 7,
    eActionActDiscontinue = 8,
    eActionActVoid = 9,
    eActionActReplicated = 10,
    eActionVersion = 11,
    eActionActUnavailable = 12,
    eActionActCopyForward = 13,
    eActionHide = 14,
    eActionDoNotOrder = 15,
    eActionActSuspend = 16,
    eActionActRedacted = 17
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0008
{
    eOEFieldID = 0,
    eOEFieldValue = 1,
    eOEFieldDisplay = 2,
    eOEFieldMeaningID = 3,
    eOEFieldType = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0009
{
    eNotEvaluated = -2,
    eEvaluated = -1,
    eNotMet = 0,
    eMet = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0010
{
    eNoJobActivity = 0,
    eJobInProcess = 1,
    eJobComplete = 2,
    eJobCompleteNoMoreJobActivity = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0011
{
    eNoZone = 0,
    ePlannedZone = 1,
    eFutureZone = 2,
    eActiveZone = 3,
    eDoneZone = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0012
{
    ePlanRefTextNotLoaded = 0,
    ePlanRefTextAvailable = 1,
    ePlanRefTextNone = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0013
{
    ePlanPrivValueNotDefined = 0,
    ePlanPrivValueYes = 1,
    ePlanPrivValueNo = 2,
    ePlanPrivValueInclude = 3,
    ePlanPrivValueExclude = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0014
{
    ePlanPrivNone = 0,
    ePlanPrivViewPlans = 1,
    ePlanPrivUpdatePlans = 2,
    ePlanPrivUpdatePlanComps = 3,
    ePlanPrivProposePlan = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0015
{
    eNomenShortString = 0,
    eNomenMnemonic = 1,
    eSourceString = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0016
{
    eOrdersAndPrescriptionsComponents = 0,
    eIncludedAndAvailableOrdersAndPrescriptions = 1,
    eIncludedAndAvailableMedOrdersAndRx = 2,
    eTreatmentPeriodLinkableComponents = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0017
{
    eVisitTypeFlagNone = 0,
    eVisitTypeFlagThisVisit = 1,
    eVisitTypeFlagFutureInpatientVisit = 2,
    eVisitTypeFlagFutureOutpatientVisit = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0018
{
    eProtReviewStatusNone = 0,
    eProtReviewStatusPending = 1,
    eProtReviewStatusCompleted = 2,
    eProtReviewStatusRejected = 3,
    eProtReviewStatusOptOut = 4,
    eProtReviewStatusPlanning = 5
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0019
{
    ePathwayMissingNone = 0,
    ePathwayMissingPhaseMoved = 1,
    ePathwayMissingComponentMoved = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0020
{
    ePlanWarningsNone = 0,
    ePlanWarningsPhasePersonMismatch = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0021
{
    eInactiveSequence = 1,
    eActiveSequence = 2,
    eActiveInactiveSequence = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0022
{
    ePhaseStatusNone = 0,
    ePhaseStatusPlanned = 1,
    ePhaseStatusInitiated = 2,
    ePhaseStatusDiscontinued = 4,
    ePhaseStatusVoid = 8,
    ePhaseStatusCompleted = 16,
    ePhaseStatusUnavailable = 32,
    ePhaseStatusProcessing = 64,
    ePhaseStatusPending = 128,
    ePhaseStatusAutoInitiate = 256,
    ePhaseStatusExcluded = 512,
    ePhaseStatusOrderNow = 1024,
    ePhaseStatusFutureInitiate = 2048,
    ePhaseStatusActivate = 4096,
    ePhaseStatusProposed = 8192,
    ePhaseStatusRejected = 16384,
    ePhaseStatusWithdrawn = 32768
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0023
{
    ePowerPlanProposalStatusNone = 0,
    ePowerPlanProposalStatusPending = 1,
    ePowerPlanProposalStatusProposed = 2,
    ePowerPlanProposalStatusRejected = 4,
    ePowerPlanProposalStatusWithdrawn = 8,
    ePowerPlanProposalStatusCompleted = 16
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0024
{
    ePowerPlanReviewStatusNone = 0,
    ePowerPlanReviewStatusPending = 1,
    ePowerPlanReviewStatusCompleted = 2,
    ePowerPlanReviewStatusRejected = 3,
    ePowerPlanReviewStatusOptOut = 4,
    ePowerPlanReviewStatusPlanning = 5,
    ePowerPlanReviewStatusWithdrawn = 6
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0025
{
    ePowerPlanReviewTypeNone = 0,
    ePowerPlanReviewTypeProtocolReview = 1,
    ePowerPlanReviewTypePlanProposal = 2,
    ePowerPlanReviewTypeHoldSkip = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0026
{
    ePowerPlanProposalTypeNone = 0,
    ePowerPlanProposalTypePlanProposal = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0027
{
    eMaintenanceCriterionActionNone = 0,
    eMaintenanceCriterionActionAdd = 1,
    eMaintenanceCriterionActionModify = 2,
    eMaintenanceCriterionActionRemove = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0028
{
    eMaintenanceCriterionTypeNone = 0,
    eMaintenanceCriterionTypeDischarge = 1,
    eMaintenanceCriterionTypeExpiration = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0029
{
    eMaintenanceCriterionEncounterTypeNone = 0,
    eMaintenanceCriterionEncounterTypeInpatient = 1,
    eMaintenanceCriterionEncounterTypeNonInpatient = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0030
{
    eMaintenanceCriterionPlanExpirationTypeNone = 0,
    eMaintenanceCriterionPlanExpirationTypeDiscontinue = 1,
    eMaintenanceCriterionPlanExpirationTypeWithdraw = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0031
{
    eSubPhaseStyleNone = 0,
    eSubPhaseStyleNormal = 1,
    eSubPhaseStyleFlat = 2
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0032
{
    eMissingRequiredDetailsNotEvaluated = 0,
    eMissingRequiredDetailsNeedOrderToEvaluate = 1,
    eMissingRequiredDetailsMissingDetails = 2,
    eMissingRequiredDetailsNotMissingDetails = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0033
{
    ePlanVersionStatusNone = 0,
    ePlanVersionStatusProduction = 1,
    ePlanVersionStatusTesting = 2,
    ePlanVersionStatusArchive = 3,
    ePlanVersionStatusInactive = 4
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0034
{
    ePhaseProcessingStatusUnknown = 0,
    ePhaseProcessingStatusProcessing = 1,
    ePhaseProcessingStatusFailedInProcessing = 2,
    ePhaseProcessingStatusNotProcessing = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0035
{
    ePlanOrderSentenceTypeStandard = 0,
    ePlanOrderSentenceTypePlanFavorite = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0036
{
    eComponentLinkingRuleTypeNotSet = 0,
    eComponentLinkingRuleTypeAtLeast = 1,
    eComponentLinkingRuleTypeExactly = 2,
    eComponentLinkingRuleTypeAtMost = 3
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0037
{
    eComponentGroupActionTypeNotDefined = 0,
    eComponentGroupActionTypeOverride = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0038
{
    eComponentGroupOverrideReasonSettingToolTipOnly = 0,
    eComponentGroupOverrideReasonSettingRequired = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0039
{
    eComponentDCTypeNoChange = -1,
    eComponentDCTypeNone = 0,
    eComponentDCTypeByPhase = 1
};

enum __MIDL___MIDL_itf_pvcarecoordcom_0000_0000_0040
{
    ePlanRestrictedActionNone = 0,
    ePlanRestrictedActionProposePlan = 1,
    ePlanRestrictedActionPlanFavorite = 2
};

struct __declspec(uuid("899ab2a7-f462-4cb5-bf5f-ab15a1b86419"))
PlanLookUp;
    // [ default ] interface IPlanLookUp

struct __declspec(uuid("7defb4d6-c4f0-11d2-9683-00c0e310724c"))
IProVideObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetLocked))
    VARIANT_BOOL Locked;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetKey ( );
    VARIANT_BOOL GetLocked ( );
    int CompareObjects (
        IUnknown * pObject );
    VARIANT_BOOL LockObject ( );
    HRESULT UnlockObject ( );
    HRESULT ConnectTo (
        IUnknown * pUnk,
        _GUID * iid,
        unsigned long * pdw );
    HRESULT DisconnectFrom (
        _GUID * iid,
        unsigned long dwVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CompareObjects (
        /*[in]*/ IUnknown * pObject,
        /*[out,retval]*/ int * pResult ) = 0;
      virtual HRESULT __stdcall raw_LockObject (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UnlockObject ( ) = 0;
      virtual HRESULT __stdcall raw_ConnectTo (
        /*[in]*/ IUnknown * pUnk,
        /*[in]*/ _GUID * iid,
        /*[in,out]*/ unsigned long * pdw ) = 0;
      virtual HRESULT __stdcall raw_DisconnectFrom (
        /*[in]*/ _GUID * iid,
        /*[in]*/ unsigned long dwVal ) = 0;
};

struct __declspec(uuid("3301b1bc-1352-41c5-8a7a-14727c56b5a2"))
IOrderSentence : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOrderSentenceId,put=PutOrderSentenceId))
    double OrderSentenceId;
    __declspec(property(get=GetOrderSentenceDisplayLine,put=PutOrderSentenceDisplayLine))
    _bstr_t OrderSentenceDisplayLine;
    __declspec(property(get=GetSequence,put=PutSequence))
    long Sequence;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[][];
    __declspec(property(get=GetDetailCount))
    long DetailCount;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetCommentTextId,put=PutCommentTextId))
    double CommentTextId;
    __declspec(property(get=GetParentSynonymId,put=PutParentSynonymId))
    double ParentSynonymId;
    __declspec(property(get=GetRxTypeMean,put=PutRxTypeMean))
    _bstr_t RxTypeMean;
    __declspec(property(get=GetNormDoseUnitInd,put=PutNormDoseUnitInd))
    long NormDoseUnitInd;
    __declspec(property(get=GetPlanOrderSentenceType,put=PutPlanOrderSentenceType))
    EPlanOrderSentenceType PlanOrderSentenceType;
    __declspec(property(get=GetOrderSentenceFilterDisplay,put=PutOrderSentenceFilterDisplay))
    _bstr_t OrderSentenceFilterDisplay;
    __declspec(property(get=GetApplicableToPatientInd,put=PutApplicableToPatientInd))
    long ApplicableToPatientInd;
    __declspec(property(get=GetSavedToDatabase,put=PutSavedToDatabase))
    long SavedToDatabase;

    //
    // Wrapper methods for error-handling
    //

    double GetOrderSentenceId ( );
    void PutOrderSentenceId (
        double pVal );
    _bstr_t GetOrderSentenceDisplayLine ( );
    void PutOrderSentenceDisplayLine (
        _bstr_t pVal );
    long GetSequence ( );
    void PutSequence (
        long pVal );
    _variant_t GetValue (
        long ldetSeq,
        DETAIL_TYPE eDetType );
    void PutValue (
        long ldetSeq,
        DETAIL_TYPE eDetType,
        const _variant_t & pVal );
    long GetDetailCount ( );
    HRESULT Copy (
        struct IOrderSentence * pOrdSent );
    long IsEqual (
        struct IOrderSentence * pOrdSent );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t pVal );
    double GetCommentTextId ( );
    void PutCommentTextId (
        double pVal );
    HRESULT ClearDetails ( );
    HRESULT ToolCopy (
        struct IOrderSentence * pOrdSent );
    double GetParentSynonymId ( );
    void PutParentSynonymId (
        double pVal );
    _bstr_t GetRxTypeMean ( );
    void PutRxTypeMean (
        _bstr_t pVal );
    long GetNormDoseUnitInd ( );
    void PutNormDoseUnitInd (
        long pVal );
    long LookupSeqByMeanId (
        double dMeanId );
    long HasNormalizedDoseUnit ( );
    HRESULT CopyCoreOrderDetails (
        struct IOrderSentence * pOrdSent );
    HRESULT CopyCoreMedOrderDetails (
        struct IOrderSentence * pOrdSent );
    HRESULT CopyCoreIVOrderDetails (
        struct IOrderSentence * pOrdSent );
    long IsCoreDetailEqual (
        struct IOrderSentence * pOrdSent );
    HRESULT AddReplaceValue (
        long lOrderDetailMeaning,
        DETAIL_TYPE eDetType,
        const _variant_t & newVal );
    EPlanOrderSentenceType GetPlanOrderSentenceType ( );
    void PutPlanOrderSentenceType (
        EPlanOrderSentenceType pVal );
    long AddOrderSentenceFilter (
        LONG_PTR pOrdSentFilter );
    long GetOrderSentenceFilterCnt ( );
    HRESULT GetOrderSentenceFilterAt (
        int iIndex,
        LONG_PTR lVal );
    _bstr_t GetOrderSentenceFilterDisplay ( );
    void PutOrderSentenceFilterDisplay (
        _bstr_t pVal );
    long GetApplicableToPatientInd ( );
    void PutApplicableToPatientInd (
        long pVal );
    HRESULT ClearFilters ( );
    long GetSavedToDatabase ( );
    void PutSavedToDatabase (
        long pVal );
    HRESULT GetOrderDetailsVector (
        LONG_PTR lOrderDetailsVector );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OrderSentenceId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentenceId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentenceDisplayLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentenceDisplayLine (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long ldetSeq,
        /*[in]*/ DETAIL_TYPE eDetType,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long ldetSeq,
        /*[in]*/ DETAIL_TYPE eDetType,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_DetailCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IOrderSentence * pOrdSent ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IOrderSentence * pOrdSent,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CommentTextId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CommentTextId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearDetails ( ) = 0;
      virtual HRESULT __stdcall raw_ToolCopy (
        /*[in]*/ struct IOrderSentence * pOrdSent ) = 0;
      virtual HRESULT __stdcall get_ParentSynonymId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentSynonymId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RxTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RxTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NormDoseUnitInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NormDoseUnitInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_LookupSeqByMeanId (
        /*[in]*/ double dMeanId,
        /*[out,retval]*/ long * seq ) = 0;
      virtual HRESULT __stdcall raw_HasNormalizedDoseUnit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyCoreOrderDetails (
        /*[in]*/ struct IOrderSentence * pOrdSent ) = 0;
      virtual HRESULT __stdcall raw_CopyCoreMedOrderDetails (
        /*[in]*/ struct IOrderSentence * pOrdSent ) = 0;
      virtual HRESULT __stdcall raw_CopyCoreIVOrderDetails (
        /*[in]*/ struct IOrderSentence * pOrdSent ) = 0;
      virtual HRESULT __stdcall raw_IsCoreDetailEqual (
        /*[in]*/ struct IOrderSentence * pOrdSent,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddReplaceValue (
        /*[in]*/ long lOrderDetailMeaning,
        /*[in]*/ DETAIL_TYPE eDetType,
        /*[in]*/ VARIANT newVal ) = 0;
      virtual HRESULT __stdcall get_PlanOrderSentenceType (
        /*[out,retval]*/ EPlanOrderSentenceType * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanOrderSentenceType (
        /*[in]*/ EPlanOrderSentenceType pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOrderSentenceFilter (
        /*[in]*/ LONG_PTR pOrdSentFilter,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOrderSentenceFilterCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOrderSentenceFilterAt (
        /*[in]*/ int iIndex,
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentenceFilterDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentenceFilterDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ApplicableToPatientInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ApplicableToPatientInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearFilters ( ) = 0;
      virtual HRESULT __stdcall get_SavedToDatabase (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SavedToDatabase (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOrderDetailsVector (
        /*[in]*/ LONG_PTR lOrderDetailsVector ) = 0;
};

struct __declspec(uuid("7656ed7c-9c4e-4be7-bf01-1fe6dffd8ab7"))
IGroup : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetOverrideReasonSetting,put=PutOverrideReasonSetting))
    EComponentGroupOverrideReasonSetting OverrideReasonSetting;
    __declspec(property(get=GetGroupId,put=PutGroupId))
    double GroupId;
    __declspec(property(get=GetGroupTypeMean,put=PutGroupTypeMean))
    _bstr_t GroupTypeMean;
    __declspec(property(get=GetMemberDispAt,put=PutMemberDispAt))
    IDispatchPtr MemberDispAt[];
    __declspec(property(get=GetMemberSeqAt,put=PutMemberSeqAt))
    long MemberSeqAt[];
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetActGroupId,put=PutActGroupId))
    double ActGroupId;
    __declspec(property(get=GetCPGroupDesc,put=PutCPGroupDesc))
    _bstr_t CPGroupDesc;
    __declspec(property(get=GetCPGroupSynonymId,put=PutCPGroupSynonymId))
    double CPGroupSynonymId;
    __declspec(property(get=GetMemberIncludedAt,put=PutMemberIncludedAt))
    long MemberIncludedAt[];
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetMemberUpdtCntAt,put=PutMemberUpdtCntAt))
    long MemberUpdtCntAt[];
    __declspec(property(get=GetMemberActionTypeAt,put=PutMemberActionTypeAt))
    ACTION_TYPE MemberActionTypeAt[];
    __declspec(property(get=GetMemberIncludedCount))
    long MemberIncludedCount;
    __declspec(property(get=GetMemberAnchorIndAt,put=PutMemberAnchorIndAt))
    long MemberAnchorIndAt[];
    __declspec(property(get=GetLinkingRuleType,put=PutLinkingRuleType))
    EComponentLinkingRuleType LinkingRuleType;
    __declspec(property(get=GetLinkingRuleQuantity,put=PutLinkingRuleQuantity))
    long LinkingRuleQuantity;

    //
    // Wrapper methods for error-handling
    //

    double GetGroupId ( );
    void PutGroupId (
        double pVal );
    _bstr_t GetGroupTypeMean ( );
    void PutGroupTypeMean (
        _bstr_t pVal );
    long MemberCount ( );
    IDispatchPtr GetMemberDispAt (
        int Index );
    void PutMemberDispAt (
        int Index,
        IDispatch * ppDisp );
    long GetMemberSeqAt (
        int Index );
    void PutMemberSeqAt (
        int Index,
        long pVal );
    _variant_t GetKey ( );
    int AddMember ( );
    double GetActGroupId ( );
    void PutActGroupId (
        double pVal );
    HRESULT RemoveAllMembers ( );
    HRESULT Copy (
        struct IGroup * pGroup );
    long IsEqual (
        struct IGroup * pGroup );
    HRESULT RemoveMemberAt (
        int Index );
    _bstr_t GetCPGroupDesc ( );
    void PutCPGroupDesc (
        _bstr_t pVal );
    double GetCPGroupSynonymId ( );
    void PutCPGroupSynonymId (
        double pVal );
    HRESULT RemoveMember (
        IDispatch * pDisp );
    HRESULT AddMemberOrderSent (
        IDispatch * pDisp );
    LONG_PTR GetMemberOrderSentCnt ( );
    _bstr_t GetMemberOrderSentDispAt (
        int Index );
    long GetMemberIncludedAt (
        int Index );
    void PutMemberIncludedAt (
        int Index,
        long pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    long GetMemberUpdtCntAt (
        int Index );
    void PutMemberUpdtCntAt (
        int Index,
        long pVal );
    ACTION_TYPE GetMemberActionTypeAt (
        int Index );
    void PutMemberActionTypeAt (
        int Index,
        ACTION_TYPE pVal );
    long GetMemberIncludedCount ( );
    long GetMemberAnchorIndAt (
        int Index );
    void PutMemberAnchorIndAt (
        int Index,
        long pVal );
    EComponentLinkingRuleType GetLinkingRuleType ( );
    void PutLinkingRuleType (
        EComponentLinkingRuleType pVal );
    long GetLinkingRuleQuantity ( );
    void PutLinkingRuleQuantity (
        long pVal );
    HRESULT AddAction (
        LONG_PTR lAction );
    HRESULT GetComponentGroupActions (
        LONG_PTR lCompGroupActionsVector );
    HRESULT GetLinkedCompGroupOverrideReason (
        double * pOverrideReasonCd,
        LONG_PTR lOverrideReasonFreetext );
    HRESULT SetLinkedCompGroupOverrideReason (
        double dOverrideReasonCd,
        LONG_PTR lOverrideReasonFreetext );
    long IsAnchoredLinkedComponentGroup ( );
    EComponentGroupOverrideReasonSetting GetOverrideReasonSetting ( );
    void PutOverrideReasonSetting (
        EComponentGroupOverrideReasonSetting pVal );
    IDispatchPtr GetLinkedComponentGroupAnchor ( );
    HRESULT DeleteLastAction ( );
    HRESULT DeleteAllActions ( );
    HRESULT ResequenceMembersFromGroup (
        int iRemovedIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroupId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroupTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_MemberCount (
        /*[out,retval]*/ long * lCount ) = 0;
      virtual HRESULT __stdcall get_MemberDispAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * ppDisp ) = 0;
      virtual HRESULT __stdcall put_MemberDispAt (
        /*[in]*/ int Index,
        /*[in]*/ IDispatch * ppDisp ) = 0;
      virtual HRESULT __stdcall get_MemberSeqAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MemberSeqAt (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddMember (
        /*[out,retval]*/ int * pIndex ) = 0;
      virtual HRESULT __stdcall get_ActGroupId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActGroupId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllMembers ( ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IGroup * pGroup ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IGroup * pGroup,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveMemberAt (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get_CPGroupDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CPGroupDesc (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CPGroupSynonymId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CPGroupSynonymId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveMember (
        /*[in]*/ IDispatch * pDisp ) = 0;
      virtual HRESULT __stdcall raw_AddMemberOrderSent (
        /*[in]*/ IDispatch * pDisp ) = 0;
      virtual HRESULT __stdcall raw_GetMemberOrderSentCnt (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetMemberOrderSentDispAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_MemberIncludedAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MemberIncludedAt (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MemberUpdtCntAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MemberUpdtCntAt (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MemberActionTypeAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ ACTION_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_MemberActionTypeAt (
        /*[in]*/ int Index,
        /*[in]*/ ACTION_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_MemberIncludedCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_MemberAnchorIndAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MemberAnchorIndAt (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LinkingRuleType (
        /*[out,retval]*/ EComponentLinkingRuleType * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkingRuleType (
        /*[in]*/ EComponentLinkingRuleType pVal ) = 0;
      virtual HRESULT __stdcall get_LinkingRuleQuantity (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkingRuleQuantity (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddAction (
        /*[in]*/ LONG_PTR lAction ) = 0;
      virtual HRESULT __stdcall raw_GetComponentGroupActions (
        /*[in]*/ LONG_PTR lCompGroupActionsVector ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedCompGroupOverrideReason (
        /*[in]*/ double * pOverrideReasonCd,
        /*[in]*/ LONG_PTR lOverrideReasonFreetext ) = 0;
      virtual HRESULT __stdcall raw_SetLinkedCompGroupOverrideReason (
        /*[in]*/ double dOverrideReasonCd,
        /*[in]*/ LONG_PTR lOverrideReasonFreetext ) = 0;
      virtual HRESULT __stdcall raw_IsAnchoredLinkedComponentGroup (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OverrideReasonSetting (
        /*[out,retval]*/ EComponentGroupOverrideReasonSetting * pVal ) = 0;
      virtual HRESULT __stdcall put_OverrideReasonSetting (
        /*[in]*/ EComponentGroupOverrideReasonSetting pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedComponentGroupAnchor (
        /*[out,retval]*/ IDispatch * * ppDispatch ) = 0;
      virtual HRESULT __stdcall raw_DeleteLastAction ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllActions ( ) = 0;
      virtual HRESULT __stdcall raw_ResequenceMembersFromGroup (
        /*[in]*/ int iRemovedIndex ) = 0;
};

struct __declspec(uuid("e8e76297-ba31-4c6c-b134-b47365cb4c28"))
IComponent : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetComponentId,put=PutComponentId))
    double ComponentId;
    __declspec(property(get=GetClinicalCatCd,put=PutClinicalCatCd))
    double ClinicalCatCd;
    __declspec(property(get=GetClinicalSubCatCd,put=PutClinicalSubCatCd))
    double ClinicalSubCatCd;
    __declspec(property(get=GetComponentTypeCd,put=PutComponentTypeCd))
    double ComponentTypeCd;
    __declspec(property(get=GetSynonymId,put=PutSynonymId))
    double SynonymId;
    __declspec(property(get=GetCatalogCd,put=PutCatalogCd))
    double CatalogCd;
    __declspec(property(get=GetOeFormatId,put=PutOeFormatId))
    double OeFormatId;
    __declspec(property(get=GetSequence,put=PutSequence))
    long Sequence;
    __declspec(property(get=GetLinkToPhase,put=PutLinkToPhase))
    long LinkToPhase;
    __declspec(property(get=GetRequired,put=PutRequired))
    long Required;
    __declspec(property(get=GetIncluded,put=PutIncluded))
    long Included;
    __declspec(property(get=GetComponentTypeDisp,put=PutComponentTypeDisp))
    _bstr_t ComponentTypeDisp;
    __declspec(property(get=GetMnemonic,put=PutMnemonic))
    _bstr_t Mnemonic;
    __declspec(property(get=GetSentenceCollection))
    IUnknownPtr SentenceCollection;
    __declspec(property(get=GetOCSClinCatCd,put=PutOCSClinCatCd))
    double OCSClinCatCd;
    __declspec(property(get=GetCatalogTypeCd,put=PutCatalogTypeCd))
    double CatalogTypeCd;
    __declspec(property(get=GetActivityTypeCd,put=PutActivityTypeCd))
    double ActivityTypeCd;
    __declspec(property(get=GetPersistentInd,put=PutPersistentInd))
    long PersistentInd;
    __declspec(property(get=GetNoteText,put=PutNoteText))
    _bstr_t NoteText;
    __declspec(property(get=GetActionType,put=PutActionType))
    ACTION_TYPE ActionType;
    __declspec(property(get=GetOrderSentModified,put=PutOrderSentModified))
    long OrderSentModified;
    __declspec(property(get=GetComponentTypeMean,put=PutComponentTypeMean))
    _bstr_t ComponentTypeMean;
    __declspec(property(get=GetNoteId,put=PutNoteId))
    double NoteId;
    __declspec(property(get=GetNoteUpdtCnt,put=PutNoteUpdtCnt))
    long NoteUpdtCnt;
    __declspec(property(get=GetUpdtCnt,put=PutUpdtCnt))
    long UpdtCnt;
    __declspec(property(get=GetActCompId,put=PutActCompId))
    double ActCompId;
    __declspec(property(get=GetParentEntId,put=PutParentEntId))
    double ParentEntId;
    __declspec(property(get=GetParentEntName,put=PutParentEntName))
    _bstr_t ParentEntName;
    __declspec(property(get=GetInitiated,put=PutInitiated))
    long Initiated;
    __declspec(property(get=GetOrdSentId,put=PutOrdSentId))
    double OrdSentId;
    __declspec(property(get=GetActUpdtCnt,put=PutActUpdtCnt))
    long ActUpdtCnt;
    __declspec(property(get=GetCompStatusCd,put=PutCompStatusCd))
    double CompStatusCd;
    __declspec(property(get=GetOrderSentenceExist,put=PutOrderSentenceExist))
    long OrderSentenceExist;
    __declspec(property(get=GetIsLastComponent,put=PutIsLastComponent))
    long IsLastComponent;
    __declspec(property(get=GetRxMask,put=PutRxMask))
    long RxMask;
    __declspec(property(get=GetPvOrderObj,put=PutPvOrderObj))
    LONG_PTR PvOrderObj;
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetRefParentEntId,put=PutRefParentEntId))
    double RefParentEntId;
    __declspec(property(get=GetRefParentEntName,put=PutRefParentEntName))
    _bstr_t RefParentEntName;
    __declspec(property(get=GetClinicalCatDisp,put=PutClinicalCatDisp))
    _bstr_t ClinicalCatDisp;
    __declspec(property(get=GetClinicalCatMean,put=PutClinicalCatMean))
    _bstr_t ClinicalCatMean;
    __declspec(property(get=GetClinicalSubCatDisp,put=PutClinicalSubCatDisp))
    _bstr_t ClinicalSubCatDisp;
    __declspec(property(get=GetClinicalSubCatMean,put=PutClinicalSubCatMean))
    _bstr_t ClinicalSubCatMean;
    __declspec(property(get=GetOCSClinCatDisp,put=PutOCSClinCatDisp))
    _bstr_t OCSClinCatDisp;
    __declspec(property(get=GetOCSClinCatMean,put=PutOCSClinCatMean))
    _bstr_t OCSClinCatMean;
    __declspec(property(get=GetCatalogDisp,put=PutCatalogDisp))
    _bstr_t CatalogDisp;
    __declspec(property(get=GetCatalogMean,put=PutCatalogMean))
    _bstr_t CatalogMean;
    __declspec(property(get=GetCatalogTypeDisp,put=PutCatalogTypeDisp))
    _bstr_t CatalogTypeDisp;
    __declspec(property(get=GetCatalogTypeMean,put=PutCatalogTypeMean))
    _bstr_t CatalogTypeMean;
    __declspec(property(get=GetActivityTypeDisp,put=PutActivityTypeDisp))
    _bstr_t ActivityTypeDisp;
    __declspec(property(get=GetActivityTypeMean,put=PutActivityTypeMean))
    _bstr_t ActivityTypeMean;
    __declspec(property(get=GetCompStatusDisp,put=PutCompStatusDisp))
    _bstr_t CompStatusDisp;
    __declspec(property(get=GetCompStatusMean,put=PutCompStatusMean))
    _bstr_t CompStatusMean;
    __declspec(property(get=GetOrderSentDisplayAt))
    _bstr_t OrderSentDisplayAt[];
    __declspec(property(get=GetOrderSentenceIdAt))
    double OrderSentenceIdAt[];
    __declspec(property(get=GetOrderSentLoaded,put=PutOrderSentLoaded))
    long OrderSentLoaded;
    __declspec(property(get=GetExistingOrdSentCnt))
    long ExistingOrdSentCnt;
    __declspec(property(get=GetCatalogInd,put=PutCatalogInd))
    long CatalogInd;
    __declspec(property(get=GetDispatch,put=PutDispatch))
    IDispatchPtr Dispatch;
    __declspec(property(get=GetDurationQty,put=PutDurationQty))
    long DurationQty;
    __declspec(property(get=GetDurationUnitCd,put=PutDurationUnitCd))
    double DurationUnitCd;
    __declspec(property(get=GetDurationUnitDisp,put=PutDurationUnitDisp))
    _bstr_t DurationUnitDisp;
    __declspec(property(get=GetDurationUnitMean,put=PutDurationUnitMean))
    _bstr_t DurationUnitMean;
    __declspec(property(get=GetIsFirstComponent,put=PutIsFirstComponent))
    long IsFirstComponent;
    __declspec(property(get=GetTZInd,put=PutTZInd))
    long TZInd;
    __declspec(property(get=GetTZOffsetQty,put=PutTZOffsetQty))
    double TZOffsetQty;
    __declspec(property(get=GetTZOffsetUnitCd,put=PutTZOffsetUnitCd))
    double TZOffsetUnitCd;
    __declspec(property(get=GetTZOffsetUnitDisp,put=PutTZOffsetUnitDisp))
    _bstr_t TZOffsetUnitDisp;
    __declspec(property(get=GetTZOffsetUnitMean,put=PutTZOffsetUnitMean))
    _bstr_t TZOffsetUnitMean;
    __declspec(property(get=GetTZMean,put=PutTZMean))
    _bstr_t TZMean;
    __declspec(property(get=GetTZActiveInd,put=PutTZActiveInd))
    long TZActiveInd;
    __declspec(property(get=GetIngredientCollection))
    IDispatchPtr IngredientCollection;
    __declspec(property(get=GetOrderableTypeFlag,put=PutOrderableTypeFlag))
    short OrderableTypeFlag;
    __declspec(property(get=GetParentDispatch,put=PutParentDispatch))
    IDispatchPtr ParentDispatch;
    __declspec(property(get=GetPathwayId,put=PutPathwayId))
    double PathwayId;
    __declspec(property(get=GetCleanupOrderInd,put=PutCleanupOrderInd))
    long CleanupOrderInd;
    __declspec(property(get=GetOutcomeNote,put=PutOutcomeNote))
    long OutcomeNote;
    __declspec(property(get=GetCompLabel,put=PutCompLabel))
    _bstr_t CompLabel;
    __declspec(property(get=GetParentActiveInd,put=PutParentActiveInd))
    long ParentActiveInd;
    __declspec(property(get=GetFacilityInd,put=PutFacilityInd))
    long FacilityInd;
    __declspec(property(get=GetAllFacilityAccessInd,put=PutAllFacilityAccessInd))
    long AllFacilityAccessInd;
    __declspec(property(get=GetFacilityAccessList,put=PutFacilityAccessList))
    _variant_t FacilityAccessList;
    __declspec(property(get=GetFacilityAccessListCount))
    long FacilityAccessListCount;
    __declspec(property(get=GetStartOffsetUnitCd,put=PutStartOffsetUnitCd))
    double StartOffsetUnitCd;
    __declspec(property(get=GetStartOffsetUnitMean,put=PutStartOffsetUnitMean))
    _bstr_t StartOffsetUnitMean;
    __declspec(property(get=GetStartOffsetUnitDisp,put=PutStartOffsetUnitDisp))
    _bstr_t StartOffsetUnitDisp;
    __declspec(property(get=GetStartOffsetQty,put=PutStartOffsetQty))
    double StartOffsetQty;
    __declspec(property(get=GetImported,put=PutImported))
    long Imported;
    __declspec(property(get=GetXMLOrderDetail,put=PutXMLOrderDetail))
    _bstr_t XMLOrderDetail;
    __declspec(property(get=GetOrderDetailModifyInd,put=PutOrderDetailModifyInd))
    long OrderDetailModifyInd;
    __declspec(property(get=GetLongBlobId,put=PutLongBlobId))
    double LongBlobId;
    __declspec(property(get=GetRemoveBlobInd,put=PutRemoveBlobInd))
    long RemoveBlobInd;
    __declspec(property(get=GetSubPhaseDisplayDesc,put=PutSubPhaseDisplayDesc))
    _bstr_t SubPhaseDisplayDesc;
    __declspec(property(get=GetSubPhaseDesc,put=PutSubPhaseDesc))
    _bstr_t SubPhaseDesc;
    __declspec(property(get=GetSubphaseDispatch,put=PutSubphaseDispatch))
    IDispatchPtr SubphaseDispatch;
    __declspec(property(get=GetCPGroupNbr,put=PutCPGroupNbr))
    double CPGroupNbr;
    __declspec(property(get=GetCPGroupDesc,put=PutCPGroupDesc))
    _bstr_t CPGroupDesc;
    __declspec(property(get=GetIsCPGroupMember))
    long IsCPGroupMember;
    __declspec(property(get=GetChemoInd,put=PutChemoInd))
    long ChemoInd;
    __declspec(property(get=GetChemoRelatedInd,put=PutChemoRelatedInd))
    long ChemoRelatedInd;
    __declspec(property(get=GetCrossPhaseGroupInd,put=PutCrossPhaseGroupInd))
    long CrossPhaseGroupInd;
    __declspec(property(get=GetInclExclChangeInd,put=PutInclExclChangeInd))
    long InclExclChangeInd;
    __declspec(property(get=GetDxPropagationNeeded,put=PutDxPropagationNeeded))
    long DxPropagationNeeded;
    __declspec(property(get=GetProActiveInd,put=PutProActiveInd))
    long ProActiveInd;
    __declspec(property(get=GetHnaOrderMnemonic,put=PutHnaOrderMnemonic))
    _bstr_t HnaOrderMnemonic;
    __declspec(property(get=GetCKI,put=PutCKI))
    _bstr_t CKI;
    __declspec(property(get=GetRefTextMask,put=PutRefTextMask))
    long RefTextMask;
    __declspec(property(get=GetReferenceTextAvailable,put=PutReferenceTextAvailable))
    PLAN_REF_TEXT ReferenceTextAvailable;
    __declspec(property(get=GetHighAlertAvail,put=PutHighAlertAvail))
    long HighAlertAvail;
    __declspec(property(get=GetAutoDisplayHighAlert,put=PutAutoDisplayHighAlert))
    long AutoDisplayHighAlert;
    __declspec(property(get=GetHighAlertText,put=PutHighAlertText))
    _bstr_t HighAlertText;
    __declspec(property(get=GetSourceOrderStartDtTm,put=PutSourceOrderStartDtTm))
    IDispatchPtr SourceOrderStartDtTm;
    __declspec(property(get=GetIsCopyForward,put=PutIsCopyForward))
    long IsCopyForward;
    __declspec(property(get=GetCopyForwardOrdSent,put=PutCopyForwardOrdSent))
    IDispatchPtr CopyForwardOrdSent;
    __declspec(property(get=GetDoseInformationHistoryBlobId,put=PutDoseInformationHistoryBlobId))
    double DoseInformationHistoryBlobId;
    __declspec(property(get=GetDoseInformationHistory,put=PutDoseInformationHistory))
    _bstr_t DoseInformationHistory;
    __declspec(property(get=GetSkipped,put=PutSkipped))
    long Skipped;
    __declspec(property(get=GetUserRequestedStartDtTm,put=PutUserRequestedStartDtTm))
    IDispatchPtr UserRequestedStartDtTm;
    __declspec(property(get=GetSystemRequestedStartString,put=PutSystemRequestedStartString))
    _bstr_t SystemRequestedStartString;
    __declspec(property(get=GetDefaultOrderSentenceInd,put=PutDefaultOrderSentenceInd))
    long DefaultOrderSentenceInd;
    __declspec(property(get=GetMissingRequiredDetails,put=PutMissingRequiredDetails))
    EMissingRequiredDetails MissingRequiredDetails;
    __declspec(property(get=GetOrderProposal,put=PutOrderProposal))
    LONG_PTR OrderProposal;
    __declspec(property(get=GetOldProposalId,put=PutOldProposalId))
    double OldProposalId;
    __declspec(property(get=GetInactivateBlobInd,put=PutInactivateBlobInd))
    long InactivateBlobInd;
    __declspec(property(get=GetUpdtDtTm,put=PutUpdtDtTm))
    IDispatchPtr UpdtDtTm;
    __declspec(property(get=GetSchedulableInd,put=PutSchedulableInd))
    long SchedulableInd;
    __declspec(property(get=GetIntermittentInd,put=PutIntermittentInd))
    long IntermittentInd;
    __declspec(property(get=GetExcludeOnReset,put=PutExcludeOnReset))
    long ExcludeOnReset;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    long Tolerance;
    __declspec(property(get=GetToleranceUnitCd,put=PutToleranceUnitCd))
    double ToleranceUnitCd;
    __declspec(property(get=GetProtocolComponentGroupNbr,put=PutProtocolComponentGroupNbr))
    double ProtocolComponentGroupNbr;
    __declspec(property(get=GetHasExplodedChildren,put=PutHasExplodedChildren))
    long HasExplodedChildren;
    __declspec(property(get=GetRejectProtocolReviewInd,put=PutRejectProtocolReviewInd))
    long RejectProtocolReviewInd;
    __declspec(property(get=GetComponentGroupComponentDispatch))
    IDispatchPtr ComponentGroupComponentDispatch;
    __declspec(property(get=GetComponentGroupDispatch))
    IDispatchPtr ComponentGroupDispatch;
    __declspec(property(get=GetIncludedInComponentGroup,put=PutIncludedInComponentGroup))
    long IncludedInComponentGroup;
    __declspec(property(get=GetComponentGroupMemberIndex,put=PutComponentGroupMemberIndex))
    int ComponentGroupMemberIndex;
    __declspec(property(get=GetHasExcludedComponent,put=PutHasExcludedComponent))
    long HasExcludedComponent;
    __declspec(property(get=GetForceExpand,put=PutForceExpand))
    long ForceExpand;
    __declspec(property(get=GetForceDisplay,put=PutForceDisplay))
    long ForceDisplay;
    __declspec(property(get=GetUUID,put=PutUUID))
    _bstr_t UUID;
    __declspec(property(get=GetAlternateSelectionCategoryId,put=PutAlternateSelectionCategoryId))
    double AlternateSelectionCategoryId;
    __declspec(property(get=GetNoteRowBackgroundColor,put=PutNoteRowBackgroundColor))
    long NoteRowBackgroundColor;
    __declspec(property(get=GetNoteRowTextColor,put=PutNoteRowTextColor))
    long NoteRowTextColor;
    __declspec(property(get=GetLinkedToPhaseStartDateTime,put=PutLinkedToPhaseStartDateTime))
    long LinkedToPhaseStartDateTime;
    __declspec(property(get=GetLockTargetDoseFlag,put=PutLockTargetDoseFlag))
    short LockTargetDoseFlag;
    __declspec(property(get=GetPlainNoteText))
    _bstr_t PlainNoteText;
    __declspec(property(get=GetOrderSentFilterDisplayAt))
    _bstr_t OrderSentFilterDisplayAt[];
    __declspec(property(get=GetLastAddedOrderId,put=PutLastAddedOrderId))
    double LastAddedOrderId;
    __declspec(property(get=GetIsCancelDCPendingOnProtocol,put=PutIsCancelDCPendingOnProtocol))
    long IsCancelDCPendingOnProtocol;
    __declspec(property(get=GetIsLinkedToPrecomponentOrder,put=PutIsLinkedToPrecomponentOrder))
    long IsLinkedToPrecomponentOrder;
    __declspec(property(get=GetOriginatingEncounterId,put=PutOriginatingEncounterId))
    double OriginatingEncounterId;
    __declspec(property(get=GetModifiedTZRelationInd,put=PutModifiedTZRelationInd))
    long ModifiedTZRelationInd;
    __declspec(property(get=GetDiscontinueTypeFlag,put=PutDiscontinueTypeFlag))
    EComponentDiscontinueTypeFlag DiscontinueTypeFlag;
    __declspec(property(get=GetIsExcludeFromCopyForward,put=PutIsExcludeFromCopyForward))
    long IsExcludeFromCopyForward;
    __declspec(property(get=GetExternalActivate,put=PutExternalActivate))
    long ExternalActivate;
    __declspec(property(get=GetAuthorizationDetails,put=PutAuthorizationDetails))
    LONG_PTR AuthorizationDetails;
    __declspec(property(get=GetPersonId,put=PutPersonId))
    double PersonId;

    //
    // Wrapper methods for error-handling
    //

    double GetComponentId ( );
    void PutComponentId (
        double pVal );
    double GetClinicalCatCd ( );
    void PutClinicalCatCd (
        double pVal );
    double GetClinicalSubCatCd ( );
    void PutClinicalSubCatCd (
        double pVal );
    double GetComponentTypeCd ( );
    void PutComponentTypeCd (
        double pVal );
    double GetSynonymId ( );
    void PutSynonymId (
        double pVal );
    double GetCatalogCd ( );
    void PutCatalogCd (
        double pVal );
    double GetOeFormatId ( );
    void PutOeFormatId (
        double pVal );
    long GetSequence ( );
    void PutSequence (
        long pVal );
    long GetLinkToPhase ( );
    void PutLinkToPhase (
        long pVal );
    long GetRequired ( );
    void PutRequired (
        long pVal );
    long GetIncluded ( );
    void PutIncluded (
        long pVal );
    _bstr_t GetComponentTypeDisp ( );
    void PutComponentTypeDisp (
        _bstr_t pVal );
    _bstr_t GetMnemonic ( );
    void PutMnemonic (
        _bstr_t pVal );
    IUnknownPtr GetSentenceCollection ( );
    HRESULT AddOrderSentence (
        IDispatch * lpOrderSent );
    double GetOCSClinCatCd ( );
    void PutOCSClinCatCd (
        double pVal );
    double GetCatalogTypeCd ( );
    void PutCatalogTypeCd (
        double pVal );
    double GetActivityTypeCd ( );
    void PutActivityTypeCd (
        double pVal );
    long GetPersistentInd ( );
    void PutPersistentInd (
        long pVal );
    _bstr_t GetNoteText ( );
    void PutNoteText (
        _bstr_t pVal );
    ACTION_TYPE GetActionType ( );
    void PutActionType (
        ACTION_TYPE pVal );
    long GetOrderSentModified ( );
    void PutOrderSentModified (
        long pVal );
    _bstr_t GetComponentTypeMean ( );
    void PutComponentTypeMean (
        _bstr_t pVal );
    double GetNoteId ( );
    void PutNoteId (
        double pVal );
    long GetNoteUpdtCnt ( );
    void PutNoteUpdtCnt (
        long pVal );
    long GetUpdtCnt ( );
    void PutUpdtCnt (
        long pVal );
    double GetActCompId ( );
    void PutActCompId (
        double pVal );
    double GetParentEntId ( );
    void PutParentEntId (
        double pVal );
    _bstr_t GetParentEntName ( );
    void PutParentEntName (
        _bstr_t pVal );
    long GetInitiated ( );
    void PutInitiated (
        long pVal );
    double GetOrdSentId ( );
    void PutOrdSentId (
        double pVal );
    long GetActUpdtCnt ( );
    void PutActUpdtCnt (
        long pVal );
    double GetCompStatusCd ( );
    void PutCompStatusCd (
        double pVal );
    long GetOrderSentenceExist ( );
    void PutOrderSentenceExist (
        long pVal );
    HRESULT RemoveOrderSentence (
        struct IOrderSentence * pIOrderSentence );
    HRESULT MoveOrderSentence (
        struct IOrderSentence * pIOrderSent,
        VARIANT_BOOL vbMoveUp );
    long GetIsLastComponent ( );
    void PutIsLastComponent (
        long pVal );
    long GetRxMask ( );
    void PutRxMask (
        long pVal );
    LONG_PTR GetPvOrderObj ( );
    void PutPvOrderObj (
        LONG_PTR pVal );
    HRESULT Copy (
        struct IComponent * pComponent );
    long IsEqual (
        struct IComponent * pComponent );
    _variant_t GetKey ( );
    double GetRefParentEntId ( );
    void PutRefParentEntId (
        double pVal );
    _bstr_t GetRefParentEntName ( );
    void PutRefParentEntName (
        _bstr_t pVal );
    _bstr_t GetClinicalCatDisp ( );
    void PutClinicalCatDisp (
        _bstr_t pVal );
    _bstr_t GetClinicalCatMean ( );
    void PutClinicalCatMean (
        _bstr_t pVal );
    _bstr_t GetClinicalSubCatDisp ( );
    void PutClinicalSubCatDisp (
        _bstr_t pVal );
    _bstr_t GetClinicalSubCatMean ( );
    void PutClinicalSubCatMean (
        _bstr_t pVal );
    _bstr_t GetOCSClinCatDisp ( );
    void PutOCSClinCatDisp (
        _bstr_t pVal );
    _bstr_t GetOCSClinCatMean ( );
    void PutOCSClinCatMean (
        _bstr_t pVal );
    _bstr_t GetCatalogDisp ( );
    void PutCatalogDisp (
        _bstr_t pVal );
    _bstr_t GetCatalogMean ( );
    void PutCatalogMean (
        _bstr_t pVal );
    _bstr_t GetCatalogTypeDisp ( );
    void PutCatalogTypeDisp (
        _bstr_t pVal );
    _bstr_t GetCatalogTypeMean ( );
    void PutCatalogTypeMean (
        _bstr_t pVal );
    _bstr_t GetActivityTypeDisp ( );
    void PutActivityTypeDisp (
        _bstr_t pVal );
    _bstr_t GetActivityTypeMean ( );
    void PutActivityTypeMean (
        _bstr_t pVal );
    _bstr_t GetCompStatusDisp ( );
    void PutCompStatusDisp (
        _bstr_t pVal );
    _bstr_t GetCompStatusMean ( );
    void PutCompStatusMean (
        _bstr_t pVal );
    _bstr_t GetOrderSentDisplayAt (
        int Index );
    double GetOrderSentenceIdAt (
        int Index );
    long GetOrderSentLoaded ( );
    void PutOrderSentLoaded (
        long pVal );
    long GetExistingOrdSentCnt ( );
    HRESULT AddExistingOrderSent (
        double dOrdSentId,
        _bstr_t sSentDisplay );
    long GetCatalogInd ( );
    void PutCatalogInd (
        long pVal );
    IDispatchPtr GetDispatch ( );
    void PutDispatch (
        IDispatch * pVal );
    long GetDurationQty ( );
    void PutDurationQty (
        long pVal );
    double GetDurationUnitCd ( );
    void PutDurationUnitCd (
        double pVal );
    _bstr_t GetDurationUnitDisp ( );
    void PutDurationUnitDisp (
        _bstr_t pVal );
    _bstr_t GetDurationUnitMean ( );
    void PutDurationUnitMean (
        _bstr_t pVal );
    _bstr_t GetOutcomeRangeDisp ( );
    long GetIsFirstComponent ( );
    void PutIsFirstComponent (
        long pVal );
    long GetTZInd ( );
    void PutTZInd (
        long pVal );
    double GetTZOffsetQty ( );
    void PutTZOffsetQty (
        double pVal );
    double GetTZOffsetUnitCd ( );
    void PutTZOffsetUnitCd (
        double pVal );
    _bstr_t GetTZOffsetUnitDisp ( );
    void PutTZOffsetUnitDisp (
        _bstr_t pVal );
    _bstr_t GetTZOffsetUnitMean ( );
    void PutTZOffsetUnitMean (
        _bstr_t pVal );
    _bstr_t GetTZMean ( );
    void PutTZMean (
        _bstr_t pVal );
    long GetTZActiveInd ( );
    void PutTZActiveInd (
        long pVal );
    IDispatchPtr GetIngredientCollection ( );
    HRESULT AddIngredient (
        IDispatch * lpIngredient );
    short GetOrderableTypeFlag ( );
    void PutOrderableTypeFlag (
        short pVal );
    IDispatchPtr GetParentDispatch ( );
    void PutParentDispatch (
        IDispatch * pVal );
    double GetPathwayId ( );
    void PutPathwayId (
        double pVal );
    long GetCleanupOrderInd ( );
    void PutCleanupOrderInd (
        long pVal );
    long GetOutcomeNote ( );
    void PutOutcomeNote (
        long pVal );
    _bstr_t GetCompLabel ( );
    void PutCompLabel (
        _bstr_t pVal );
    long GetParentActiveInd ( );
    void PutParentActiveInd (
        long pVal );
    long IsComponentAvailable ( );
    long GetFacilityInd ( );
    void PutFacilityInd (
        long pVal );
    _bstr_t GetOutcomeTargetDisp ( );
    IDispatchPtr GetGroupCollection ( );
    HRESULT AddGroup (
        struct IGroup * pIGroup );
    int GetGroupCount ( );
    HRESULT RemoveGroup (
        struct IGroup * pGroup );
    long GetAllFacilityAccessInd ( );
    void PutAllFacilityAccessInd (
        long pVal );
    _variant_t GetFacilityAccessList ( );
    void PutFacilityAccessList (
        const _variant_t & pVal );
    long GetFacilityAccessListCount ( );
    double GetStartOffsetUnitCd ( );
    void PutStartOffsetUnitCd (
        double pVal );
    _bstr_t GetStartOffsetUnitMean ( );
    void PutStartOffsetUnitMean (
        _bstr_t pVal );
    _bstr_t GetStartOffsetUnitDisp ( );
    void PutStartOffsetUnitDisp (
        _bstr_t pVal );
    double GetStartOffsetQty ( );
    void PutStartOffsetQty (
        double pVal );
    long ValidateStartOffsetWithPhase ( );
    long ValidateStartOffsetQuantity (
        double dOffsetQty,
        long bTZ );
    long ValidateStartOffsetUnit (
        double dCodeVal,
        long bTZ );
    long GetImported ( );
    void PutImported (
        long pVal );
    long HasOrderTimedPriority ( );
    long HasOrderOffsetPriority ( );
    _bstr_t GetOrderOffsetPriorityValue ( );
    _bstr_t GetXMLOrderDetail ( );
    void PutXMLOrderDetail (
        _bstr_t pVal );
    long GetOrderDetailModifyInd ( );
    void PutOrderDetailModifyInd (
        long pVal );
    double GetLongBlobId ( );
    void PutLongBlobId (
        double pVal );
    long GetRemoveBlobInd ( );
    void PutRemoveBlobInd (
        long pVal );
    _bstr_t GetSubPhaseDisplayDesc ( );
    void PutSubPhaseDisplayDesc (
        _bstr_t pVal );
    _bstr_t GetSubPhaseDesc ( );
    void PutSubPhaseDesc (
        _bstr_t pVal );
    IDispatchPtr GetSubphaseDispatch ( );
    void PutSubphaseDispatch (
        IDispatch * pVal );
    double GetParentPlanCatalogId ( );
    double GetCPGroupNbr ( );
    void PutCPGroupNbr (
        double pVal );
    _bstr_t GetCPGroupDesc ( );
    void PutCPGroupDesc (
        _bstr_t pVal );
    long GetIsCPGroupMember ( );
    long GetChemoInd ( );
    void PutChemoInd (
        long pVal );
    long GetChemoRelatedInd ( );
    void PutChemoRelatedInd (
        long pVal );
    long GetCrossPhaseGroupInd ( );
    void PutCrossPhaseGroupInd (
        long pVal );
    IGroupPtr GetCPGroupPtr ( );
    long GetInclExclChangeInd ( );
    void PutInclExclChangeInd (
        long pVal );
    long GetDxPropagationNeeded ( );
    void PutDxPropagationNeeded (
        long pVal );
    long GetProActiveInd ( );
    void PutProActiveInd (
        long pVal );
    _bstr_t GetHnaOrderMnemonic ( );
    void PutHnaOrderMnemonic (
        _bstr_t pVal );
    _bstr_t GetCKI ( );
    void PutCKI (
        _bstr_t pVal );
    long GetRefTextMask ( );
    void PutRefTextMask (
        long pVal );
    long IsCompCPPropagationAvail ( );
    long IsGroupCPPropagationAvail ( );
    long IsProActiveEvaluationAllowed ( );
    PLAN_REF_TEXT GetReferenceTextAvailable ( );
    void PutReferenceTextAvailable (
        PLAN_REF_TEXT pVal );
    long HasNormalizedDoseUnit ( );
    long HasResolvedNormalizedDoseUnit ( );
    HRESULT RemoveIngredientCollection ( );
    _bstr_t GetDisplayMnemonic ( );
    long GetHighAlertAvail ( );
    void PutHighAlertAvail (
        long pVal );
    long GetAutoDisplayHighAlert ( );
    void PutAutoDisplayHighAlert (
        long pVal );
    _bstr_t GetHighAlertText ( );
    void PutHighAlertText (
        _bstr_t pVal );
    IDispatchPtr GetSourceOrderStartDtTm ( );
    void PutSourceOrderStartDtTm (
        IDispatch * pVal );
    long GetIsCopyForward ( );
    void PutIsCopyForward (
        long pVal );
    IDispatchPtr GetCopyForwardOrdSent ( );
    void PutCopyForwardOrdSent (
        IDispatch * ppVal );
    double GetDoseInformationHistoryBlobId ( );
    void PutDoseInformationHistoryBlobId (
        double pVal );
    _bstr_t GetDoseInformationHistory ( );
    void PutDoseInformationHistory (
        _bstr_t pVal );
    long HasRoutingInfo ( );
    long IsCopyForwardCompCPGPropagationAvail ( );
    LONG_PTR GetXMLOrderDetailPtr ( );
    LONG_PTR GetDoseInformationHistoryPtr ( );
    long GetSkipped ( );
    void PutSkipped (
        long pVal );
    IDispatchPtr GetUserRequestedStartDtTm ( );
    void PutUserRequestedStartDtTm (
        IDispatch * pVal );
    _bstr_t GetSystemRequestedStartString ( );
    void PutSystemRequestedStartString (
        _bstr_t pVal );
    long IsTaperComponent ( );
    long GetDefaultOrderSentenceInd ( );
    void PutDefaultOrderSentenceInd (
        long pVal );
    EMissingRequiredDetails GetMissingRequiredDetails ( );
    void PutMissingRequiredDetails (
        EMissingRequiredDetails pVal );
    LONG_PTR GetOrderProposal ( );
    void PutOrderProposal (
        LONG_PTR pVal );
    long HasBeenModified ( );
    double GetOldProposalId ( );
    void PutOldProposalId (
        double pVal );
    long GetInactivateBlobInd ( );
    void PutInactivateBlobInd (
        long pVal );
    HRESULT EvaluateMissingRequiredDetails ( );
    double GetOrderId ( );
    IDispatchPtr GetUpdtDtTm ( );
    void PutUpdtDtTm (
        IDispatch * pVal );
    long GetSchedulableInd ( );
    void PutSchedulableInd (
        long pVal );
    long CalculateAnchorComponentStartDateTime (
        IDispatch * * pAnchorComponentStartDateTime );
    long CanUnlockStartDateTime ( );
    long GetIntermittentInd ( );
    void PutIntermittentInd (
        long pVal );
    long GetExcludeOnReset ( );
    void PutExcludeOnReset (
        long pVal );
    long GetTolerance ( );
    void PutTolerance (
        long pVal );
    double GetToleranceUnitCd ( );
    void PutToleranceUnitCd (
        double pVal );
    _bstr_t GetDisplay ( );
    double GetProtocolComponentGroupNbr ( );
    void PutProtocolComponentGroupNbr (
        double pVal );
    long GetHasExplodedChildren ( );
    void PutHasExplodedChildren (
        long pVal );
    long GetRejectProtocolReviewInd ( );
    void PutRejectProtocolReviewInd (
        long pVal );
    IDispatchPtr GetComponentGroupComponentDispatch ( );
    IDispatchPtr GetComponentGroupDispatch ( );
    long IsComponentGroupMember ( );
    long GetIncludedInComponentGroup ( );
    void PutIncludedInComponentGroup (
        long pVal );
    int GetComponentGroupMemberIndex ( );
    void PutComponentGroupMemberIndex (
        int pVal );
    long GetHasExcludedComponent ( );
    void PutHasExcludedComponent (
        long pVal );
    _bstr_t GetDefaultOrderSentenceRxTypeMean ( );
    long GetForceExpand ( );
    void PutForceExpand (
        long pVal );
    long GetForceDisplay ( );
    void PutForceDisplay (
        long pVal );
    _bstr_t GetUUID ( );
    void PutUUID (
        _bstr_t pVal );
    HRESULT AddFacilityToAccessList (
        double dFacilityCd );
    double GetAlternateSelectionCategoryId ( );
    void PutAlternateSelectionCategoryId (
        double pVal );
    HRESULT PutCanUnlockStartDateTimeCached (
        long newVal );
    long GetNoteRowBackgroundColor ( );
    void PutNoteRowBackgroundColor (
        long pVal );
    long GetNoteRowTextColor ( );
    void PutNoteRowTextColor (
        long pVal );
    HRESULT ApplyComponentModification (
        LONG_PTR lComponentModification );
    long IsComponentTimeZeroAcrossTreatmentPeriodsInComponentModifications ( );
    long GetLinkedToPhaseStartDateTime ( );
    void PutLinkedToPhaseStartDateTime (
        long pVal );
    long HasComponentOffset ( );
    short GetLockTargetDoseFlag ( );
    void PutLockTargetDoseFlag (
        short pVal );
    long IsTimeZero ( );
    long HasTimeZeroOffset ( );
    long IsTimeZeroLinked ( );
    long IsLinkedComponentGroupMember ( );
    long IsAnchorComponent ( );
    IDispatchPtr GetGroupsByTypeMean (
        _bstr_t bstrTypeMean );
    long IsDoTComponent ( );
    _bstr_t GetPlainNoteText ( );
    long IsHTMLNote ( );
    long HasPriorityDefaultStartTimeOffsetAsNow ( );
    _bstr_t GetOrderSentFilterDisplayAt (
        int Index );
    HRESULT AddExistingOrderSentence (
        double dOrdSentId,
        _bstr_t sSentDisplay,
        _bstr_t sSentFilterDisplay );
    double GetLastAddedOrderId ( );
    void PutLastAddedOrderId (
        double pVal );
    void PutIsCancelDCPendingOnProtocol (
        long pVal );
    long GetIsCancelDCPendingOnProtocol ( );
    long GetIsLinkedToPrecomponentOrder ( );
    void PutIsLinkedToPrecomponentOrder (
        long pVal );
    long IsDiagnosisAssociationSupressed ( );
    double GetOriginatingEncounterId ( );
    void PutOriginatingEncounterId (
        double pVal );
    long GetModifiedTZRelationInd ( );
    void PutModifiedTZRelationInd (
        long pVal );
    HRESULT LoadDoseInformationHistory ( );
    long DetermineValidIVSequenceOrder ( );
    EComponentDiscontinueTypeFlag GetDiscontinueTypeFlag ( );
    void PutDiscontinueTypeFlag (
        EComponentDiscontinueTypeFlag pVal );
    long GetIsExcludeFromCopyForward ( );
    void PutIsExcludeFromCopyForward (
        long pVal );
    long GetExternalActivate ( );
    void PutExternalActivate (
        long pVal );
    LONG_PTR GetAuthorizationDetails ( );
    void PutAuthorizationDetails (
        LONG_PTR pVal );
    HRESULT UpdateDefaultComponentOrderSentence ( );
    double GetPersonId ( );
    void PutPersonId (
        double pVal );
    HRESULT ResetRedactedComponentDetails ( );
    long IsComponentRestricted ( );
    long HasRestrictedDoTOrder ( );
    HRESULT SetHasRestrictedDoTOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComponentId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalCatCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalCatCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalSubCatCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalSubCatCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SynonymId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SynonymId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OeFormatId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OeFormatId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LinkToPhase (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkToPhase (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Required (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Included (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Included (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentTypeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentTypeDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Mnemonic (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Mnemonic (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SentenceCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOrderSentence (
        /*[in]*/ IDispatch * lpOrderSent ) = 0;
      virtual HRESULT __stdcall get_OCSClinCatCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OCSClinCatCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActivityTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActivityTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PersistentInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistentInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NoteText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ ACTION_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ ACTION_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentModified (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentModified (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NoteId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NoteUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ActCompId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActCompId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParentEntId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentEntId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParentEntName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentEntName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Initiated (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Initiated (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_OrdSentId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OrdSentId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CompStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CompStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentenceExist (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentenceExist (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOrderSentence (
        /*[in]*/ struct IOrderSentence * pIOrderSentence ) = 0;
      virtual HRESULT __stdcall raw_MoveOrderSentence (
        /*[in]*/ struct IOrderSentence * pIOrderSent,
        /*[in]*/ VARIANT_BOOL vbMoveUp ) = 0;
      virtual HRESULT __stdcall get_IsLastComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLastComponent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RxMask (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RxMask (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PvOrderObj (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PvOrderObj (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IComponent * pComponent ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IComponent * pComponent,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_RefParentEntId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefParentEntId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RefParentEntName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RefParentEntName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalCatDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalCatDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalCatMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalCatMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalSubCatDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalSubCatDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalSubCatMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalSubCatMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OCSClinCatDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OCSClinCatDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OCSClinCatMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OCSClinCatMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogTypeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogTypeDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActivityTypeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActivityTypeDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActivityTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActivityTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CompStatusDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CompStatusDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CompStatusMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CompStatusMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentDisplayAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentenceIdAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentLoaded (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentLoaded (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ExistingOrdSentCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddExistingOrderSent (
        /*[in]*/ double dOrdSentId,
        /*[in]*/ BSTR sSentDisplay ) = 0;
      virtual HRESULT __stdcall get_CatalogInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Dispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_Dispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_DurationQty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationQty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOutcomeRangeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFirstComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFirstComponent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TZInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TZInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TZOffsetQty (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TZOffsetQty (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TZOffsetUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TZOffsetUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TZOffsetUnitDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TZOffsetUnitDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TZOffsetUnitMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TZOffsetUnitMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TZMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TZMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TZActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TZActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IngredientCollection (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddIngredient (
        IDispatch * lpIngredient ) = 0;
      virtual HRESULT __stdcall get_OrderableTypeFlag (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderableTypeFlag (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ParentDispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentDispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CleanupOrderInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CleanupOrderInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_OutcomeNote (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeNote (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CompLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CompLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ParentActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsComponentAvailable (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FacilityInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FacilityInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOutcomeTargetDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetGroupCollection (
        /*[out,retval]*/ IDispatch * * pDisp ) = 0;
      virtual HRESULT __stdcall raw_AddGroup (
        /*[in]*/ struct IGroup * pIGroup ) = 0;
      virtual HRESULT __stdcall raw_GetGroupCount (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_RemoveGroup (
        /*[in]*/ struct IGroup * pGroup ) = 0;
      virtual HRESULT __stdcall get_AllFacilityAccessInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AllFacilityAccessInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FacilityAccessList (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_FacilityAccessList (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_FacilityAccessListCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StartOffsetUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartOffsetUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartOffsetUnitMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartOffsetUnitMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartOffsetUnitDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartOffsetUnitDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StartOffsetQty (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartOffsetQty (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ValidateStartOffsetWithPhase (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ValidateStartOffsetQuantity (
        /*[in]*/ double dOffsetQty,
        /*[in]*/ long bTZ,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ValidateStartOffsetUnit (
        /*[in]*/ double dCodeVal,
        /*[in]*/ long bTZ,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Imported (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Imported (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_HasOrderTimedPriority (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasOrderOffsetPriority (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOrderOffsetPriorityValue (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_XMLOrderDetail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_XMLOrderDetail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OrderDetailModifyInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderDetailModifyInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LongBlobId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LongBlobId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveBlobInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveBlobInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SubPhaseDisplayDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPhaseDisplayDesc (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SubPhaseDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPhaseDesc (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SubphaseDispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_SubphaseDispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetParentPlanCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CPGroupNbr (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CPGroupNbr (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CPGroupDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CPGroupDesc (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsCPGroupMember (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ChemoInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChemoInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChemoRelatedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChemoRelatedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CrossPhaseGroupInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossPhaseGroupInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCPGroupPtr (
        /*[out,retval]*/ struct IGroup * * ppIGroup ) = 0;
      virtual HRESULT __stdcall get_InclExclChangeInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InclExclChangeInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DxPropagationNeeded (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DxPropagationNeeded (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HnaOrderMnemonic (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HnaOrderMnemonic (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CKI (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CKI (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RefTextMask (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefTextMask (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsCompCPPropagationAvail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroupCPPropagationAvail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsProActiveEvaluationAllowed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTextAvailable (
        /*[out,retval]*/ PLAN_REF_TEXT * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTextAvailable (
        /*[in]*/ PLAN_REF_TEXT pVal ) = 0;
      virtual HRESULT __stdcall raw_HasNormalizedDoseUnit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasResolvedNormalizedDoseUnit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveIngredientCollection ( ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayMnemonic (
        /*[out,retval]*/ BSTR * displayMnemonic ) = 0;
      virtual HRESULT __stdcall get_HighAlertAvail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HighAlertAvail (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AutoDisplayHighAlert (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoDisplayHighAlert (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HighAlertText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HighAlertText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SourceOrderStartDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_SourceOrderStartDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCopyForward (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCopyForward (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CopyForwardOrdSent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall put_CopyForwardOrdSent (
        /*[in]*/ IDispatch * ppVal ) = 0;
      virtual HRESULT __stdcall get_DoseInformationHistoryBlobId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseInformationHistoryBlobId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DoseInformationHistory (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseInformationHistory (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_HasRoutingInfo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsCopyForwardCompCPGPropagationAvail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetXMLOrderDetailPtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDoseInformationHistoryPtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Skipped (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Skipped (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UserRequestedStartDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UserRequestedStartDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_SystemRequestedStartString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SystemRequestedStartString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_IsTaperComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultOrderSentenceInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultOrderSentenceInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MissingRequiredDetails (
        /*[out,retval]*/ EMissingRequiredDetails * pVal ) = 0;
      virtual HRESULT __stdcall put_MissingRequiredDetails (
        /*[in]*/ EMissingRequiredDetails pVal ) = 0;
      virtual HRESULT __stdcall get_OrderProposal (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderProposal (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_HasBeenModified (
        /*[out,retval]*/ long * pHasBeenModified ) = 0;
      virtual HRESULT __stdcall get_OldProposalId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OldProposalId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InactivateBlobInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InactivateBlobInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_EvaluateMissingRequiredDetails ( ) = 0;
      virtual HRESULT __stdcall raw_GetOrderId (
        /*[out,retval]*/ double * pOrderId ) = 0;
      virtual HRESULT __stdcall get_UpdtDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_SchedulableInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SchedulableInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateAnchorComponentStartDateTime (
        /*[in]*/ IDispatch * * pAnchorComponentStartDateTime,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CanUnlockStartDateTime (
        /*[out,retval]*/ long * pUnlock ) = 0;
      virtual HRESULT __stdcall get_IntermittentInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermittentInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeOnReset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeOnReset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDisplay (
        /*[out,retval]*/ BSTR * pDisplay ) = 0;
      virtual HRESULT __stdcall get_ProtocolComponentGroupNbr (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtocolComponentGroupNbr (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasExplodedChildren (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HasExplodedChildren (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RejectProtocolReviewInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RejectProtocolReviewInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentGroupComponentDispatch (
        /*[out,retval]*/ IDispatch * * pComponent ) = 0;
      virtual HRESULT __stdcall get_ComponentGroupDispatch (
        /*[out,retval]*/ IDispatch * * pComponentGroup ) = 0;
      virtual HRESULT __stdcall raw_IsComponentGroupMember (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IncludedInComponentGroup (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludedInComponentGroup (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentGroupMemberIndex (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentGroupMemberIndex (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_HasExcludedComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HasExcludedComponent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDefaultOrderSentenceRxTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ForceExpand (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ForceExpand (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ForceDisplay (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ForceDisplay (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UUID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UUID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AddFacilityToAccessList (
        /*[in]*/ double dFacilityCd ) = 0;
      virtual HRESULT __stdcall get_AlternateSelectionCategoryId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AlternateSelectionCategoryId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_PutCanUnlockStartDateTimeCached (
        /*[in]*/ long newVal ) = 0;
      virtual HRESULT __stdcall get_NoteRowBackgroundColor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteRowBackgroundColor (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NoteRowTextColor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteRowTextColor (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyComponentModification (
        /*[in]*/ LONG_PTR lComponentModification ) = 0;
      virtual HRESULT __stdcall raw_IsComponentTimeZeroAcrossTreatmentPeriodsInComponentModifications (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkedToPhaseStartDateTime (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkedToPhaseStartDateTime (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_HasComponentOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LockTargetDoseFlag (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_LockTargetDoseFlag (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall raw_IsTimeZero (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasTimeZeroOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsTimeZeroLinked (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsLinkedComponentGroupMember (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsAnchorComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetGroupsByTypeMean (
        /*[in]*/ BSTR bstrTypeMean,
        /*[out,retval]*/ IDispatch * * pDisp ) = 0;
      virtual HRESULT __stdcall raw_IsDoTComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PlainNoteText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsHTMLNote (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasPriorityDefaultStartTimeOffsetAsNow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentFilterDisplayAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddExistingOrderSentence (
        /*[in]*/ double dOrdSentId,
        /*[in]*/ BSTR sSentDisplay,
        /*[in]*/ BSTR sSentFilterDisplay ) = 0;
      virtual HRESULT __stdcall get_LastAddedOrderId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LastAddedOrderId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_IsCancelDCPendingOnProtocol (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsCancelDCPendingOnProtocol (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLinkedToPrecomponentOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLinkedToPrecomponentOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsDiagnosisAssociationSupressed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OriginatingEncounterId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginatingEncounterId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ModifiedTZRelationInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ModifiedTZRelationInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDoseInformationHistory ( ) = 0;
      virtual HRESULT __stdcall raw_DetermineValidIVSequenceOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DiscontinueTypeFlag (
        /*[out,retval]*/ EComponentDiscontinueTypeFlag * pVal ) = 0;
      virtual HRESULT __stdcall put_DiscontinueTypeFlag (
        /*[in]*/ EComponentDiscontinueTypeFlag pVal ) = 0;
      virtual HRESULT __stdcall get_IsExcludeFromCopyForward (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsExcludeFromCopyForward (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ExternalActivate (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ExternalActivate (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AuthorizationDetails (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AuthorizationDetails (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateDefaultComponentOrderSentence ( ) = 0;
      virtual HRESULT __stdcall get_PersonId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PersonId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetRedactedComponentDetails ( ) = 0;
      virtual HRESULT __stdcall raw_IsComponentRestricted (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasRestrictedDoTOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasRestrictedDoTOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("5aae1c68-c284-490a-a401-1b8f2b26a1bc"))
IPlanAction : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetActionSequence,put=PutActionSequence))
    short ActionSequence;
    __declspec(property(get=GetActionCd,put=PutActionCd))
    double ActionCd;
    __declspec(property(get=GetActionDisplay,put=PutActionDisplay))
    _bstr_t ActionDisplay;
    __declspec(property(get=GetPlanStatusCd,put=PutPlanStatusCd))
    double PlanStatusCd;
    __declspec(property(get=GetPlanStatusDisplay,put=PutPlanStatusDisplay))
    _bstr_t PlanStatusDisplay;
    __declspec(property(get=GetActionDtTm,put=PutActionDtTm))
    DATE ActionDtTm;
    __declspec(property(get=GetActionPrsnlName,put=PutActionPrsnlName))
    _bstr_t ActionPrsnlName;
    __declspec(property(get=GetCommunicationTypeCd,put=PutCommunicationTypeCd))
    double CommunicationTypeCd;
    __declspec(property(get=GetProviderName,put=PutProviderName))
    _bstr_t ProviderName;
    __declspec(property(get=GetProviderId,put=PutProviderId))
    double ProviderId;
    __declspec(property(get=GetCommunicationTypeDisplay,put=PutCommunicationTypeDisplay))
    _bstr_t CommunicationTypeDisplay;
    __declspec(property(get=GetActionMean,put=PutActionMean))
    _bstr_t ActionMean;
    __declspec(property(get=GetUTCActionDtTm,put=PutUTCActionDtTm))
    IDispatchPtr UTCActionDtTm;
    __declspec(property(get=GetActionComment,put=PutActionComment))
    _bstr_t ActionComment;
    __declspec(property(get=GetActionPrsnlId,put=PutActionPrsnlId))
    double ActionPrsnlId;
    __declspec(property(get=GetActionPrsnlPhysInd,put=PutActionPrsnlPhysInd))
    long ActionPrsnlPhysInd;
    __declspec(property(get=GetActionReasonCd,put=PutActionReasonCd))
    double ActionReasonCd;
    __declspec(property(get=GetActionReasonDisplay,put=PutActionReasonDisplay))
    _bstr_t ActionReasonDisplay;

    //
    // Wrapper methods for error-handling
    //

    short GetActionSequence ( );
    void PutActionSequence (
        short pVal );
    double GetActionCd ( );
    void PutActionCd (
        double pVal );
    _bstr_t GetActionDisplay ( );
    void PutActionDisplay (
        _bstr_t pVal );
    double GetPlanStatusCd ( );
    void PutPlanStatusCd (
        double pVal );
    _bstr_t GetPlanStatusDisplay ( );
    void PutPlanStatusDisplay (
        _bstr_t pVal );
    DATE GetActionDtTm ( );
    void PutActionDtTm (
        DATE pVal );
    _bstr_t GetActionPrsnlName ( );
    void PutActionPrsnlName (
        _bstr_t pVal );
    HRESULT Copy (
        struct IPlanAction * pPlanAction );
    double GetCommunicationTypeCd ( );
    void PutCommunicationTypeCd (
        double pVal );
    _bstr_t GetProviderName ( );
    void PutProviderName (
        _bstr_t pVal );
    double GetProviderId ( );
    void PutProviderId (
        double pVal );
    _bstr_t GetCommunicationTypeDisplay ( );
    void PutCommunicationTypeDisplay (
        _bstr_t pVal );
    _bstr_t GetActionMean ( );
    void PutActionMean (
        _bstr_t pVal );
    IDispatchPtr GetUTCActionDtTm ( );
    void PutUTCActionDtTm (
        IDispatch * pVal );
    _bstr_t GetActionComment ( );
    void PutActionComment (
        _bstr_t pVal );
    double GetActionPrsnlId ( );
    void PutActionPrsnlId (
        double pVal );
    long GetActionPrsnlPhysInd ( );
    void PutActionPrsnlPhysInd (
        long pVal );
    double GetActionReasonCd ( );
    void PutActionReasonCd (
        double pVal );
    _bstr_t GetActionReasonDisplay ( );
    void PutActionReasonDisplay (
        _bstr_t pVal );
    HRESULT GetPathwayNotifications (
        LONG_PTR larrPathwayNotifications );
    HRESULT PutPathwayNotifications (
        LONG_PTR larrPathwayNotifications );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActionSequence (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionSequence (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ActionCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlanStatusDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanStatusDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_ActionPrsnlName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionPrsnlName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IPlanAction * pPlanAction ) = 0;
      virtual HRESULT __stdcall get_CommunicationTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CommunicationTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CommunicationTypeDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CommunicationTypeDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UTCActionDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCActionDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_ActionComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionPrsnlId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionPrsnlId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionPrsnlPhysInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionPrsnlPhysInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ActionReasonCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionReasonCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionReasonDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionReasonDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPathwayNotifications (
        /*[in]*/ LONG_PTR larrPathwayNotifications ) = 0;
      virtual HRESULT __stdcall raw_PutPathwayNotifications (
        /*[in]*/ LONG_PTR larrPathwayNotifications ) = 0;
};

struct __declspec(uuid("b5ef98de-6e61-4254-b554-ad68638cb2a7"))
IReview : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetReviewDtTm,put=PutReviewDtTm))
    IDispatchPtr ReviewDtTm;
    __declspec(property(get=GetSignedStatus,put=PutSignedStatus))
    EPowerPlanReviewStatus SignedStatus;
    __declspec(property(get=GetPendingStatus,put=PutPendingStatus))
    EPowerPlanReviewStatus PendingStatus;
    __declspec(property(get=GetType,put=PutType))
    EPowerPlanReviewType Type;
    __declspec(property(get=GetToPersonnelId,put=PutToPersonnelId))
    double ToPersonnelId;
    __declspec(property(get=GetToPersonnelName,put=PutToPersonnelName))
    _bstr_t ToPersonnelName;
    __declspec(property(get=GetToPoolId,put=PutToPoolId))
    double ToPoolId;
    __declspec(property(get=GetToPoolName,put=PutToPoolName))
    _bstr_t ToPoolName;
    __declspec(property(get=GetFromPersonnelId,put=PutFromPersonnelId))
    double FromPersonnelId;
    __declspec(property(get=GetFromPersonnelName,put=PutFromPersonnelName))
    _bstr_t FromPersonnelName;
    __declspec(property(get=GetReasonCd,put=PutReasonCd))
    double ReasonCd;
    __declspec(property(get=GetReasonComment,put=PutReasonComment))
    _bstr_t ReasonComment;
    __declspec(property(get=GetActionPersonnelId,put=PutActionPersonnelId))
    double ActionPersonnelId;
    __declspec(property(get=GetActionPersonnelName,put=PutActionPersonnelName))
    _bstr_t ActionPersonnelName;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetReviewDtTm ( );
    void PutReviewDtTm (
        IDispatch * ppReviewDtTm );
    void PutSignedStatus (
        EPowerPlanReviewStatus pSignedStatus );
    EPowerPlanReviewStatus GetSignedStatus ( );
    void PutPendingStatus (
        EPowerPlanReviewStatus pPendingStatus );
    EPowerPlanReviewStatus GetPendingStatus ( );
    void PutType (
        EPowerPlanReviewType pType );
    EPowerPlanReviewType GetType ( );
    HRESULT Copy (
        struct IReview * pReview );
    long IsEqual (
        struct IReview * pIReview );
    void PutToPersonnelId (
        double pToPersonnelId );
    double GetToPersonnelId ( );
    void PutToPersonnelName (
        _bstr_t pToPersonnelName );
    _bstr_t GetToPersonnelName ( );
    void PutToPoolId (
        double pToPoolId );
    double GetToPoolId ( );
    void PutToPoolName (
        _bstr_t pToPoolName );
    _bstr_t GetToPoolName ( );
    void PutFromPersonnelId (
        double pFromPersonnelId );
    double GetFromPersonnelId ( );
    void PutFromPersonnelName (
        _bstr_t pFromPersonnelName );
    _bstr_t GetFromPersonnelName ( );
    void PutReasonCd (
        double pReasonCd );
    double GetReasonCd ( );
    void PutReasonComment (
        _bstr_t pReasonComment );
    _bstr_t GetReasonComment ( );
    void PutActionPersonnelId (
        double pActionPersonnelId );
    double GetActionPersonnelId ( );
    void PutActionPersonnelName (
        _bstr_t pActionPersonnelName );
    _bstr_t GetActionPersonnelName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReviewDtTm (
        /*[out,retval]*/ IDispatch * * ppReviewDtTm ) = 0;
      virtual HRESULT __stdcall put_ReviewDtTm (
        /*[in]*/ IDispatch * ppReviewDtTm ) = 0;
      virtual HRESULT __stdcall put_SignedStatus (
        /*[in]*/ EPowerPlanReviewStatus pSignedStatus ) = 0;
      virtual HRESULT __stdcall get_SignedStatus (
        /*[out,retval]*/ EPowerPlanReviewStatus * pSignedStatus ) = 0;
      virtual HRESULT __stdcall put_PendingStatus (
        /*[in]*/ EPowerPlanReviewStatus pPendingStatus ) = 0;
      virtual HRESULT __stdcall get_PendingStatus (
        /*[out,retval]*/ EPowerPlanReviewStatus * pPendingStatus ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ EPowerPlanReviewType pType ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ EPowerPlanReviewType * pType ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IReview * pReview ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IReview * pIReview,
        /*[out,retval]*/ long * pBool ) = 0;
      virtual HRESULT __stdcall put_ToPersonnelId (
        /*[in]*/ double pToPersonnelId ) = 0;
      virtual HRESULT __stdcall get_ToPersonnelId (
        /*[out,retval]*/ double * pToPersonnelId ) = 0;
      virtual HRESULT __stdcall put_ToPersonnelName (
        /*[in]*/ BSTR pToPersonnelName ) = 0;
      virtual HRESULT __stdcall get_ToPersonnelName (
        /*[out,retval]*/ BSTR * pToPersonnelName ) = 0;
      virtual HRESULT __stdcall put_ToPoolId (
        /*[in]*/ double pToPoolId ) = 0;
      virtual HRESULT __stdcall get_ToPoolId (
        /*[out,retval]*/ double * pToPoolId ) = 0;
      virtual HRESULT __stdcall put_ToPoolName (
        /*[in]*/ BSTR pToPoolName ) = 0;
      virtual HRESULT __stdcall get_ToPoolName (
        /*[out,retval]*/ BSTR * pToPoolName ) = 0;
      virtual HRESULT __stdcall put_FromPersonnelId (
        /*[in]*/ double pFromPersonnelId ) = 0;
      virtual HRESULT __stdcall get_FromPersonnelId (
        /*[out,retval]*/ double * pFromPersonnelId ) = 0;
      virtual HRESULT __stdcall put_FromPersonnelName (
        /*[in]*/ BSTR pFromPersonnelName ) = 0;
      virtual HRESULT __stdcall get_FromPersonnelName (
        /*[out,retval]*/ BSTR * pFromPersonnelName ) = 0;
      virtual HRESULT __stdcall put_ReasonCd (
        /*[in]*/ double pReasonCd ) = 0;
      virtual HRESULT __stdcall get_ReasonCd (
        /*[out,retval]*/ double * pReasonCd ) = 0;
      virtual HRESULT __stdcall put_ReasonComment (
        /*[in]*/ BSTR pReasonComment ) = 0;
      virtual HRESULT __stdcall get_ReasonComment (
        /*[out,retval]*/ BSTR * pReasonComment ) = 0;
      virtual HRESULT __stdcall put_ActionPersonnelId (
        /*[in]*/ double pActionPersonnelId ) = 0;
      virtual HRESULT __stdcall get_ActionPersonnelId (
        /*[out,retval]*/ double * pActionPersonnelId ) = 0;
      virtual HRESULT __stdcall put_ActionPersonnelName (
        /*[in]*/ BSTR pActionPersonnelName ) = 0;
      virtual HRESULT __stdcall get_ActionPersonnelName (
        /*[out,retval]*/ BSTR * pActionPersonnelName ) = 0;
};

struct __declspec(uuid("c565dbdd-d6f4-4554-8109-fb07bcc12ae2"))
IPhase : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPlanCatalogId,put=PutPlanCatalogId))
    double PlanCatalogId;
    __declspec(property(get=GetDurationUnitCd,put=PutDurationUnitCd))
    double DurationUnitCd;
    __declspec(property(get=GetDuration,put=PutDuration))
    long Duration;
    __declspec(property(get=GetDurationDesc,put=PutDurationDesc))
    _bstr_t DurationDesc;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetSequence,put=PutSequence))
    long Sequence;
    __declspec(property(get=GetComponentCollection))
    IUnknownPtr ComponentCollection;
    __declspec(property(get=GetNextComponentSequence,put=PutNextComponentSequence))
    long NextComponentSequence;
    __declspec(property(get=GetPreceedPhases,put=PutPreceedPhases))
    _variant_t PreceedPhases;
    __declspec(property(get=GetSucceedPhases,put=PutSucceedPhases))
    _variant_t SucceedPhases;
    __declspec(property(get=GetFirstPhase,put=PutFirstPhase))
    long FirstPhase;
    __declspec(property(get=GetActionType,put=PutActionType))
    ACTION_TYPE ActionType;
    __declspec(property(get=GetUpdtCnt,put=PutUpdtCnt))
    long UpdtCnt;
    __declspec(property(get=GetPersonId,put=PutPersonId))
    double PersonId;
    __declspec(property(get=GetEncntrId,put=PutEncntrId))
    double EncntrId;
    __declspec(property(get=GetPlanId,put=PutPlanId))
    double PlanId;
    __declspec(property(get=GetPlanStatusCd,put=PutPlanStatusCd))
    double PlanStatusCd;
    __declspec(property(get=GetReviewRequiredSignatureCount,put=PutReviewRequiredSignatureCount))
    long ReviewRequiredSignatureCount;
    __declspec(property(get=GetSelfProtocolReview,put=PutSelfProtocolReview))
    long SelfProtocolReview;
    __declspec(property(get=GetInitiated,put=PutInitiated))
    long Initiated;
    __declspec(property(get=GetStartDtTm,put=PutStartDtTm))
    DATE StartDtTm;
    __declspec(property(get=GetCalcEndDtTm,put=PutCalcEndDtTm))
    DATE CalcEndDtTm;
    __declspec(property(get=GetActUpdtCnt,put=PutActUpdtCnt))
    long ActUpdtCnt;
    __declspec(property(get=GetCalcPlanStatusCd,put=PutCalcPlanStatusCd))
    double CalcPlanStatusCd;
    __declspec(property(get=GetIntermediateReviewRequestPersonnelId,put=PutIntermediateReviewRequestPersonnelId))
    double IntermediateReviewRequestPersonnelId;
    __declspec(property(get=GetIntermediateReviewToPersonnelId,put=PutIntermediateReviewToPersonnelId))
    double IntermediateReviewToPersonnelId;
    __declspec(property(get=GetIntermediateReviewToPoolId,put=PutIntermediateReviewToPoolId))
    double IntermediateReviewToPoolId;
    __declspec(property(get=GetIntermediateReviewRequestNameFullFormatted,put=PutIntermediateReviewRequestNameFullFormatted))
    _bstr_t IntermediateReviewRequestNameFullFormatted;
    __declspec(property(get=GetIntermediateReviewToNameFullFormatted,put=PutIntermediateReviewToNameFullFormatted))
    _bstr_t IntermediateReviewToNameFullFormatted;
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetIntermediateReviewUTCReviewDtTm,put=PutIntermediateReviewUTCReviewDtTm))
    IDispatchPtr IntermediateReviewUTCReviewDtTm;
    __declspec(property(get=GetPhaseType,put=PutPhaseType))
    PLAN_TYPE PhaseType;
    __declspec(property(get=GetPlanStatusDisp,put=PutPlanStatusDisp))
    _bstr_t PlanStatusDisp;
    __declspec(property(get=GetPlanStatusMean,put=PutPlanStatusMean))
    _bstr_t PlanStatusMean;
    __declspec(property(get=GetCalcPlanStatusDisp,put=PutCalcPlanStatusDisp))
    _bstr_t CalcPlanStatusDisp;
    __declspec(property(get=GetCalcPlanStatusMean,put=PutCalcPlanStatusMean))
    _bstr_t CalcPlanStatusMean;
    __declspec(property(get=GetDurationUnitMean,put=PutDurationUnitMean))
    _bstr_t DurationUnitMean;
    __declspec(property(get=GetIntermediateReviewStatusFlag,put=PutIntermediateReviewStatusFlag))
    PROTOCOL_REVIEW_STATUS_FLAG IntermediateReviewStatusFlag;
    __declspec(property(get=GetActionCollection))
    IUnknownPtr ActionCollection;
    __declspec(property(get=GetLastActionSeq,put=PutLastActionSeq))
    long LastActionSeq;
    __declspec(property(get=GetIgnoreMOEWFromMpageOrderActivateWorkflow,put=PutIgnoreMOEWFromMpageOrderActivateWorkflow))
    long IgnoreMOEWFromMpageOrderActivateWorkflow;
    __declspec(property(get=GetLinkedPhaseInd,put=PutLinkedPhaseInd))
    long LinkedPhaseInd;
    __declspec(property(get=GetCatalogInd,put=PutCatalogInd))
    long CatalogInd;
    __declspec(property(get=GetNeedProtocolReviewAccept,put=PutNeedProtocolReviewAccept))
    long NeedProtocolReviewAccept;
    __declspec(property(get=GetDisplayMethodCd,put=PutDisplayMethodCd))
    double DisplayMethodCd;
    __declspec(property(get=GetOrderDtTm,put=PutOrderDtTm))
    DATE OrderDtTm;
    __declspec(property(get=GetDisplayMethodDisp,put=PutDisplayMethodDisp))
    _bstr_t DisplayMethodDisp;
    __declspec(property(get=GetDisplayMethodMean,put=PutDisplayMethodMean))
    _bstr_t DisplayMethodMean;
    __declspec(property(get=GetRemovedReltns,put=PutRemovedReltns))
    _variant_t RemovedReltns;
    __declspec(property(get=GetReplicatedOriginal,put=PutReplicatedOriginal))
    long ReplicatedOriginal;
    __declspec(property(get=GetReplicatedCopy,put=PutReplicatedCopy))
    long ReplicatedCopy;
    __declspec(property(get=GetTZExistInd,put=PutTZExistInd))
    long TZExistInd;
    __declspec(property(get=GetCompRUpdated,put=PutCompRUpdated))
    short CompRUpdated;
    __declspec(property(get=GetParentDispatch,put=PutParentDispatch))
    IDispatchPtr ParentDispatch;
    __declspec(property(get=GetActOutcomesExistInd,put=PutActOutcomesExistInd))
    long ActOutcomesExistInd;
    __declspec(property(get=GetRefOwnerPersonId,put=PutRefOwnerPersonId))
    double RefOwnerPersonId;
    __declspec(property(get=GetRefOwnerName,put=PutRefOwnerName))
    _bstr_t RefOwnerName;
    __declspec(property(get=GetCalcTimeZeroDtTm,put=PutCalcTimeZeroDtTm))
    DATE CalcTimeZeroDtTm;
    __declspec(property(get=GetGroupUpdtFlag,put=PutGroupUpdtFlag))
    short GroupUpdtFlag;
    __declspec(property(get=GetStartedInd,put=PutStartedInd))
    long StartedInd;
    __declspec(property(get=GetStartOffsetExistInd,put=PutStartOffsetExistInd))
    long StartOffsetExistInd;
    __declspec(property(get=GetComponentLoaded,put=PutComponentLoaded))
    COMP_LOADING_STATUS ComponentLoaded;
    __declspec(property(get=GetOrderMatched,put=PutOrderMatched))
    long OrderMatched;
    __declspec(property(get=GetDCReasonCd,put=PutDCReasonCd))
    double DCReasonCd;
    __declspec(property(get=GetSubPhaseExistInd,put=PutSubPhaseExistInd))
    long SubPhaseExistInd;
    __declspec(property(get=GetSubPhases,put=PutSubPhases))
    _variant_t SubPhases;
    __declspec(property(get=GetLastActionPrsnlName,put=PutLastActionPrsnlName))
    _bstr_t LastActionPrsnlName;
    __declspec(property(get=GetLastActionDtTm,put=PutLastActionDtTm))
    DATE LastActionDtTm;
    __declspec(property(get=GetSubphaseCompDispatch,put=PutSubphaseCompDispatch))
    IDispatchPtr SubphaseCompDispatch;
    __declspec(property(get=GetNewSubPhaseExists,put=PutNewSubPhaseExists))
    long NewSubPhaseExists;
    __declspec(property(get=GetParentPhaseDesc,put=PutParentPhaseDesc))
    _bstr_t ParentPhaseDesc;
    __declspec(property(get=GetHideFlexedCompInd,put=PutHideFlexedCompInd))
    long HideFlexedCompInd;
    __declspec(property(get=GetChemoInd,put=PutChemoInd))
    long ChemoInd;
    __declspec(property(get=GetChemoRelatedInd,put=PutChemoRelatedInd))
    long ChemoRelatedInd;
    __declspec(property(get=GetFacilityAccessInd,put=PutFacilityAccessInd))
    long FacilityAccessInd;
    __declspec(property(get=GetProActiveOutcomeExistInd,put=PutProActiveOutcomeExistInd))
    long ProActiveOutcomeExistInd;
    __declspec(property(get=GetTaperGroupOrderId,put=PutTaperGroupOrderId))
    double TaperGroupOrderId;
    __declspec(property(get=GetUTCOrderDtTm,put=PutUTCOrderDtTm))
    IDispatchPtr UTCOrderDtTm;
    __declspec(property(get=GetUTCStartDtTm,put=PutUTCStartDtTm))
    IDispatchPtr UTCStartDtTm;
    __declspec(property(get=GetUTCCalcEndDtTm,put=PutUTCCalcEndDtTm))
    IDispatchPtr UTCCalcEndDtTm;
    __declspec(property(get=GetUTCLastActionDtTm,put=PutUTCLastActionDtTm))
    IDispatchPtr UTCLastActionDtTm;
    __declspec(property(get=GetUTCCalcTimeZeroDtTm,put=PutUTCCalcTimeZeroDtTm))
    IDispatchPtr UTCCalcTimeZeroDtTm;
    __declspec(property(get=GetHighAlertAvail,put=PutHighAlertAvail))
    long HighAlertAvail;
    __declspec(property(get=GetAutoDisplayHighAlert,put=PutAutoDisplayHighAlert))
    long AutoDisplayHighAlert;
    __declspec(property(get=GetCopyForwardOriginal,put=PutCopyForwardOriginal))
    long CopyForwardOriginal;
    __declspec(property(get=GetCopyForwardCopy,put=PutCopyForwardCopy))
    long CopyForwardCopy;
    __declspec(property(get=GetIncluded,put=PutIncluded))
    long Included;
    __declspec(property(get=GetOrderStartDtTmExceptionCollection))
    IUnknownPtr OrderStartDtTmExceptionCollection;
    __declspec(property(get=GetAutoInitiateInd,put=PutAutoInitiateInd))
    long AutoInitiateInd;
    __declspec(property(get=GetCheckAlertsOnPlanning,put=PutCheckAlertsOnPlanning))
    long CheckAlertsOnPlanning;
    __declspec(property(get=GetCheckAlertsOnUpdates,put=PutCheckAlertsOnUpdates))
    long CheckAlertsOnUpdates;
    __declspec(property(get=GetAlertsLastCheckedDisplay,put=PutAlertsLastCheckedDisplay))
    _bstr_t AlertsLastCheckedDisplay;
    __declspec(property(get=GetOffsetQty,put=PutOffsetQty))
    long OffsetQty;
    __declspec(property(get=GetOffsetUnitCd,put=PutOffsetUnitCd))
    double OffsetUnitCd;
    __declspec(property(get=GetOffsetAnchorPhaseId,put=PutOffsetAnchorPhaseId))
    double OffsetAnchorPhaseId;
    __declspec(property(get=GetDefaultActionInpatientNowCd,put=PutDefaultActionInpatientNowCd))
    double DefaultActionInpatientNowCd;
    __declspec(property(get=GetDefaultActionInpatientFutureCd,put=PutDefaultActionInpatientFutureCd))
    double DefaultActionInpatientFutureCd;
    __declspec(property(get=GetDefaultActionOutpatientNowCd,put=PutDefaultActionOutpatientNowCd))
    double DefaultActionOutpatientNowCd;
    __declspec(property(get=GetDefaultActionOutpatientFutureCd,put=PutDefaultActionOutpatientFutureCd))
    double DefaultActionOutpatientFutureCd;
    __declspec(property(get=GetOptionalInd,put=PutOptionalInd))
    long OptionalInd;
    __declspec(property(get=GetScheduledFacilityCd,put=PutScheduledFacilityCd))
    double ScheduledFacilityCd;
    __declspec(property(get=GetScheduledNursingUnitCd,put=PutScheduledNursingUnitCd))
    double ScheduledNursingUnitCd;
    __declspec(property(get=GetAllowFuturePhaseInd,put=PutAllowFuturePhaseInd))
    long AllowFuturePhaseInd;
    __declspec(property(get=GetStartDateTimeEstimatedInd,put=PutStartDateTimeEstimatedInd))
    long StartDateTimeEstimatedInd;
    __declspec(property(get=GetEndDateTimeEstimatedInd,put=PutEndDateTimeEstimatedInd))
    long EndDateTimeEstimatedInd;
    __declspec(property(get=GetOrderNowInd,put=PutOrderNowInd))
    long OrderNowInd;
    __declspec(property(get=GetFutureInitiateInd,put=PutFutureInitiateInd))
    long FutureInitiateInd;
    __declspec(property(get=GetInactivateOffsetInd,put=PutInactivateOffsetInd))
    long InactivateOffsetInd;
    __declspec(property(get=GetActivateInd,put=PutActivateInd))
    long ActivateInd;
    __declspec(property(get=GetSucceedPhaseId,put=PutSucceedPhaseId))
    double SucceedPhaseId;
    __declspec(property(get=GetPrecedePhaseId,put=PutPrecedePhaseId))
    double PrecedePhaseId;
    __declspec(property(get=GetTreatmentPeriodCustomLabel,put=PutTreatmentPeriodCustomLabel))
    _bstr_t TreatmentPeriodCustomLabel;
    __declspec(property(get=GetTreatmentPeriodNumber,put=PutTreatmentPeriodNumber))
    long TreatmentPeriodNumber;
    __declspec(property(get=GetProtocolPhaseId,put=PutProtocolPhaseId))
    double ProtocolPhaseId;
    __declspec(property(get=GetGroupedPhasesNotLoaded,put=PutGroupedPhasesNotLoaded))
    long GroupedPhasesNotLoaded;
    __declspec(property(get=GetReviewRoutingInd,put=PutReviewRoutingInd))
    long ReviewRoutingInd;
    __declspec(property(get=GetCurrentReviewStatusFlag,put=PutCurrentReviewStatusFlag))
    PROTOCOL_REVIEW_STATUS_FLAG CurrentReviewStatusFlag;
    __declspec(property(get=GetPendingReviewStatusFlag,put=PutPendingReviewStatusFlag))
    PROTOCOL_REVIEW_STATUS_FLAG PendingReviewStatusFlag;
    __declspec(property(get=GetReviewReasonCd,put=PutReviewReasonCd))
    double ReviewReasonCd;
    __declspec(property(get=GetReviewComment,put=PutReviewComment))
    _bstr_t ReviewComment;
    __declspec(property(get=GetIsProtocolReviewDirty,put=PutIsProtocolReviewDirty))
    long IsProtocolReviewDirty;
    __declspec(property(get=GetReviewRejectPrsnlName,put=PutReviewRejectPrsnlName))
    _bstr_t ReviewRejectPrsnlName;
    __declspec(property(get=GetRequestPersonnelId,put=PutRequestPersonnelId))
    double RequestPersonnelId;
    __declspec(property(get=GetToPersonnelId,put=PutToPersonnelId))
    double ToPersonnelId;
    __declspec(property(get=GetRequestNameFullFormatted,put=PutRequestNameFullFormatted))
    _bstr_t RequestNameFullFormatted;
    __declspec(property(get=GetToNameFullFormatted,put=PutToNameFullFormatted))
    _bstr_t ToNameFullFormatted;
    __declspec(property(get=GetUTCReviewDtTm,put=PutUTCReviewDtTm))
    IDispatchPtr UTCReviewDtTm;
    __declspec(property(get=GetParentPhaseDispatch,put=PutParentPhaseDispatch))
    IDispatchPtr ParentPhaseDispatch;
    __declspec(property(get=GetPathwayClassCd,put=PutPathwayClassCd))
    double PathwayClassCd;
    __declspec(property(get=GetSubPhaseStyle,put=PutSubPhaseStyle))
    ESubPhaseStyle SubPhaseStyle;
    __declspec(property(get=GetPathwayGroupId,put=PutPathwayGroupId))
    double PathwayGroupId;
    __declspec(property(get=GetPrimaryPhaseInd,put=PutPrimaryPhaseInd))
    long PrimaryPhaseInd;
    __declspec(property(get=GetDefaultStartTime,put=PutDefaultStartTime))
    _bstr_t DefaultStartTime;
    __declspec(property(get=GetProcessingStatus,put=PutProcessingStatus))
    EPhaseProcessingStatus ProcessingStatus;
    __declspec(property(get=GetPathwayMissingReasonFlag,put=PutPathwayMissingReasonFlag))
    long PathwayMissingReasonFlag;
    __declspec(property(get=GetParentComponentUUID,put=PutParentComponentUUID))
    _bstr_t ParentComponentUUID;
    __declspec(property(get=GetParentPhaseCatalogId,put=PutParentPhaseCatalogId))
    double ParentPhaseCatalogId;
    __declspec(property(get=GetUUID,put=PutUUID))
    _bstr_t UUID;
    __declspec(property(get=GetWarnings,put=PutWarnings))
    long Warnings;
    __declspec(property(get=GetContainsPersonMismatchInd,put=PutContainsPersonMismatchInd))
    long ContainsPersonMismatchInd;
    __declspec(property(get=GetRescheduleReasonAcceptFlag,put=PutRescheduleReasonAcceptFlag))
    short RescheduleReasonAcceptFlag;
    __declspec(property(get=GetSupervisingPhysicianId,put=PutSupervisingPhysicianId))
    double SupervisingPhysicianId;
    __declspec(property(get=GetProviderId,put=PutProviderId))
    double ProviderId;
    __declspec(property(get=GetProviderIdSetUsingPrompt,put=PutProviderIdSetUsingPrompt))
    long ProviderIdSetUsingPrompt;
    __declspec(property(get=GetSupervisingActPrsnlId,put=PutSupervisingActPrsnlId))
    double SupervisingActPrsnlId;
    __declspec(property(get=GetToPoolId,put=PutToPoolId))
    double ToPoolId;
    __declspec(property(get=GetHoldInd,put=PutHoldInd))
    long HoldInd;
    __declspec(property(get=GetSkipInd,put=PutSkipInd))
    long SkipInd;
    __declspec(property(get=GetResumeInd,put=PutResumeInd))
    long ResumeInd;
    __declspec(property(get=GetOpenByDefaultInd,put=PutOpenByDefaultInd))
    long OpenByDefaultInd;
    __declspec(property(get=GetAllowActivateAllInd,put=PutAllowActivateAllInd))
    long AllowActivateAllInd;
    __declspec(property(get=GetIgnoreSupervisingPhysicianPrompt,put=PutIgnoreSupervisingPhysicianPrompt))
    long IgnoreSupervisingPhysicianPrompt;
    __declspec(property(get=GetPhaseDetailStatusCd,put=PutPhaseDetailStatusCd))
    double PhaseDetailStatusCd;
    __declspec(property(get=GetPhaseDetailStatusMean,put=PutPhaseDetailStatusMean))
    _bstr_t PhaseDetailStatusMean;
    __declspec(property(get=GetPhaseDetailStatusDisp,put=PutPhaseDetailStatusDisp))
    _bstr_t PhaseDetailStatusDisp;
    __declspec(property(get=GetIsCopySourceTreatmentPeriod,put=PutIsCopySourceTreatmentPeriod))
    long IsCopySourceTreatmentPeriod;
    __declspec(property(get=GetIsSourceTreatmentPeriod,put=PutIsSourceTreatmentPeriod))
    long IsSourceTreatmentPeriod;
    __declspec(property(get=GetIsSucceedTreatmentPeriod,put=PutIsSucceedTreatmentPeriod))
    long IsSucceedTreatmentPeriod;
    __declspec(property(get=GetCopySourceTreatmentPeriodId,put=PutCopySourceTreatmentPeriodId))
    double CopySourceTreatmentPeriodId;
    __declspec(property(get=GetIsFirstTreatmentPeriod,put=PutIsFirstTreatmentPeriod))
    long IsFirstTreatmentPeriod;
    __declspec(property(get=GetIsPhaseStartFromAPrecomponentOrder,put=PutIsPhaseStartFromAPrecomponentOrder))
    long IsPhaseStartFromAPrecomponentOrder;

    //
    // Wrapper methods for error-handling
    //

    double GetPlanCatalogId ( );
    void PutPlanCatalogId (
        double pVal );
    double GetDurationUnitCd ( );
    void PutDurationUnitCd (
        double pVal );
    long GetDuration ( );
    void PutDuration (
        long pVal );
    _bstr_t GetDurationDesc ( );
    void PutDurationDesc (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    long GetSequence ( );
    void PutSequence (
        long pVal );
    IUnknownPtr GetComponentCollection ( );
    HRESULT AddComponent (
        IDispatch * lpComponent );
    _variant_t GetPreceedPhases ( );
    void PutPreceedPhases (
        const _variant_t & pVal );
    _variant_t GetSucceedPhases ( );
    void PutSucceedPhases (
        const _variant_t & pVal );
    long GetFirstPhase ( );
    void PutFirstPhase (
        long pVal );
    ACTION_TYPE GetActionType ( );
    void PutActionType (
        ACTION_TYPE pVal );
    long GetUpdtCnt ( );
    void PutUpdtCnt (
        long pVal );
    double GetPersonId ( );
    void PutPersonId (
        double pVal );
    double GetEncntrId ( );
    void PutEncntrId (
        double pVal );
    double GetPlanId ( );
    void PutPlanId (
        double pVal );
    double GetPlanStatusCd ( );
    void PutPlanStatusCd (
        double pVal );
    HRESULT Resequence (
        struct IComponent * pComponent,
        VARIANT_BOOL bMoveUp );
    HRESULT RemoveComponent (
        struct IComponent * pComponent );
    long GetInitiated ( );
    void PutInitiated (
        long pVal );
    DATE GetStartDtTm ( );
    void PutStartDtTm (
        DATE pVal );
    DATE GetCalcEndDtTm ( );
    void PutCalcEndDtTm (
        DATE pVal );
    long GetActUpdtCnt ( );
    void PutActUpdtCnt (
        long pVal );
    double GetCalcPlanStatusCd ( );
    void PutCalcPlanStatusCd (
        double pVal );
    IUnknownPtr get_RemovedComponentCollection ( );
    HRESULT AddRemovedComponent (
        IDispatch * lpComponent );
    HRESULT MoveClinSubCategory (
        double dSourceCd,
        double dDestCd,
        double dClinicalCatCd );
    HRESULT Copy (
        struct IPhase * pPhase );
    long IsEqual (
        struct IPhase * pPhase );
    _variant_t GetKey ( );
    IComponentPtr FindOrderComponent (
        LONG_PTR hPvOrderObj );
    PLAN_TYPE GetPhaseType ( );
    void PutPhaseType (
        PLAN_TYPE pVal );
    _bstr_t GetPlanStatusDisp ( );
    void PutPlanStatusDisp (
        _bstr_t pVal );
    _bstr_t GetPlanStatusMean ( );
    void PutPlanStatusMean (
        _bstr_t pVal );
    _bstr_t GetCalcPlanStatusDisp ( );
    void PutCalcPlanStatusDisp (
        _bstr_t pVal );
    _bstr_t GetCalcPlanStatusMean ( );
    void PutCalcPlanStatusMean (
        _bstr_t pVal );
    _bstr_t GetDurationUnitMean ( );
    void PutDurationUnitMean (
        _bstr_t pVal );
    HRESULT AddPlanAction (
        struct IPlanAction * pPlanAction );
    IUnknownPtr GetActionCollection ( );
    long AreComponentsInitiated ( );
    long IsComponentInPhase (
        struct IComponent * pComponent );
    HRESULT RemoveAllPlanActions ( );
    long GetCatalogInd ( );
    void PutCatalogInd (
        long pVal );
    HRESULT CalculateEndDtTm ( );
    _bstr_t GetPhaseStatusDisp ( );
    double GetDisplayMethodCd ( );
    void PutDisplayMethodCd (
        double pVal );
    DATE GetOrderDtTm ( );
    void PutOrderDtTm (
        DATE pVal );
    _bstr_t GetDisplayMethodDisp ( );
    void PutDisplayMethodDisp (
        _bstr_t pVal );
    _bstr_t GetDisplayMethodMean ( );
    void PutDisplayMethodMean (
        _bstr_t pVal );
    _variant_t GetRemovedReltns ( );
    void PutRemovedReltns (
        const _variant_t & pVal );
    long GetReplicatedOriginal ( );
    void PutReplicatedOriginal (
        long pVal );
    long GetReplicatedCopy ( );
    void PutReplicatedCopy (
        long pVal );
    HRESULT ResetRemovedReltns ( );
    long GetTZExistInd ( );
    void PutTZExistInd (
        long pVal );
    long HasOffset ( );
    HRESULT ClearTZLRelationship ( );
    IComponentPtr FindTZComponent ( );
    short GetCompRUpdated ( );
    void PutCompRUpdated (
        short pVal );
    IComponentPtr GetEarliestOffsetComponent ( );
    IComponentPtr FindOrderComponentById (
        double orderId );
    IComponentPtr FindComponentById (
        double compId );
    IDispatchPtr GetParentDispatch ( );
    void PutParentDispatch (
        IDispatch * pVal );
    long GetActOutcomesExistInd ( );
    void PutActOutcomesExistInd (
        long pVal );
    double GetRefOwnerPersonId ( );
    void PutRefOwnerPersonId (
        double pVal );
    _bstr_t GetRefOwnerName ( );
    void PutRefOwnerName (
        _bstr_t pVal );
    DATE GetCalcTimeZeroDtTm ( );
    void PutCalcTimeZeroDtTm (
        DATE pVal );
    IDispatchPtr GetGroupCollection ( );
    HRESULT AddGroup (
        struct IGroup * pIGroup );
    int GetGroupCount ( );
    short GetGroupUpdtFlag ( );
    void PutGroupUpdtFlag (
        short pVal );
    long GetStartedInd ( );
    void PutStartedInd (
        long pVal );
    long GetStartOffsetExistInd ( );
    void PutStartOffsetExistInd (
        long pVal );
    COMP_LOADING_STATUS GetComponentLoaded ( );
    void PutComponentLoaded (
        COMP_LOADING_STATUS pVal );
    long GetOrderMatched ( );
    void PutOrderMatched (
        long pVal );
    double GetDCReasonCd ( );
    void PutDCReasonCd (
        double pVal );
    long GetSubPhaseExistInd ( );
    void PutSubPhaseExistInd (
        long pVal );
    _variant_t GetSubPhases ( );
    void PutSubPhases (
        const _variant_t & pVal );
    HRESULT RemoveSubPhase (
        double dVal );
    long IsDuplicateSubPhase (
        double dVal );
    _bstr_t GetLastActionPrsnlName ( );
    void PutLastActionPrsnlName (
        _bstr_t pVal );
    DATE GetLastActionDtTm ( );
    void PutLastActionDtTm (
        DATE pVal );
    IDispatchPtr GetSubphaseCompDispatch ( );
    void PutSubphaseCompDispatch (
        IDispatch * pVal );
    long GetNewSubPhaseExists ( );
    void PutNewSubPhaseExists (
        long pVal );
    _bstr_t GetParentPhaseDesc ( );
    void PutParentPhaseDesc (
        _bstr_t pVal );
    long GetHideFlexedCompInd ( );
    void PutHideFlexedCompInd (
        long pVal );
    long GetNomenReltnCount ( );
    _bstr_t GetDiagnosisDisplay ( );
    long IsADuplicateDiagnosis (
        _bstr_t conceptCKI,
        double nomId );
    HRESULT GetDiagnosisBySeq (
        long lSeq,
        LONG_PTR lVal );
    HRESULT GetDiagnosisByDiagId (
        double diagId,
        LONG_PTR lVal );
    HRESULT AddDiagnosis (
        LONG_PTR pVal );
    HRESULT UpdateDiagnosis (
        LONG_PTR pVal );
    HRESULT RemoveDiagnosis (
        LONG_PTR pVal );
    long GetRemovedNomenReltnCount ( );
    HRESULT GetRemovedDiagnosisAt (
        int Index,
        LONG_PTR pVal );
    long GetChemoInd ( );
    void PutChemoInd (
        long pVal );
    long GetChemoRelatedInd ( );
    void PutChemoRelatedInd (
        long pVal );
    HRESULT SetSubPhaseCompChemoRelatedInd (
        long bInd );
    HRESULT SetSubPhaseCompCPGInd (
        long bInd );
    HRESULT RemoveCPGComponentLinks ( );
    long GetFacilityAccessInd ( );
    void PutFacilityAccessInd (
        long pVal );
    long GetProActiveOutcomeExistInd ( );
    void PutProActiveOutcomeExistInd (
        long pVal );
    double GetTaperGroupOrderId ( );
    void PutTaperGroupOrderId (
        double pVal );
    long IsPhasePlanned ( );
    int GetSubphaseNormalizedDoseStatus ( );
    IDispatchPtr GetUTCOrderDtTm ( );
    void PutUTCOrderDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCStartDtTm ( );
    void PutUTCStartDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCCalcEndDtTm ( );
    void PutUTCCalcEndDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCLastActionDtTm ( );
    void PutUTCLastActionDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCCalcTimeZeroDtTm ( );
    void PutUTCCalcTimeZeroDtTm (
        IDispatch * pVal );
    long GetHighAlertAvail ( );
    void PutHighAlertAvail (
        long pVal );
    long GetAutoDisplayHighAlert ( );
    void PutAutoDisplayHighAlert (
        long pVal );
    HRESULT RemovePhaseDiagnoses ( );
    HRESULT FixDiagnosisSequence ( );
    long GetCopyForwardOriginal ( );
    void PutCopyForwardOriginal (
        long pVal );
    long GetCopyForwardCopy ( );
    void PutCopyForwardCopy (
        long pVal );
    HRESULT ClearAllSubPhases ( );
    long GetIncluded ( );
    void PutIncluded (
        long pVal );
    long AreComponentsSkipped ( );
    HRESULT AddOrderStartDtTmException (
        struct IComponent * pComponent );
    IUnknownPtr GetOrderStartDtTmExceptionCollection ( );
    long GetAutoInitiateInd ( );
    void PutAutoInitiateInd (
        long pVal );
    IPhasePtr GetParentPhase ( );
    long GetAutoInitiateIndForPhaseAndSubPhase ( );
    long GetComponentCountWithFilters (
        COMPONENT_COUNT_FLAG eFlag );
    long GetCheckAlertsOnPlanning ( );
    void PutCheckAlertsOnPlanning (
        long pVal );
    long GetCheckAlertsOnUpdates ( );
    void PutCheckAlertsOnUpdates (
        long pVal );
    _bstr_t GetAlertsLastCheckedDisplay ( );
    void PutAlertsLastCheckedDisplay (
        _bstr_t pVal );
    long HasModifiedSubphase ( );
    HRESULT ResequenceComponents ( );
    long GetOffsetQty ( );
    void PutOffsetQty (
        long pVal );
    double GetOffsetUnitCd ( );
    void PutOffsetUnitCd (
        double pVal );
    double GetOffsetAnchorPhaseId ( );
    void PutOffsetAnchorPhaseId (
        double pVal );
    HRESULT AddOffsetAnchoredPhase (
        double newVal );
    HRESULT RemoveOffsetAnchoredPhase (
        double oldVal );
    HRESULT ClearOffsetAnchoredPhases ( );
    HRESULT GetOffsetAnchoredPhases (
        LONG_PTR lAnchoredPhases );
    double GetDefaultActionInpatientNowCd ( );
    void PutDefaultActionInpatientNowCd (
        double pVal );
    double GetDefaultActionInpatientFutureCd ( );
    void PutDefaultActionInpatientFutureCd (
        double pVal );
    double GetDefaultActionOutpatientNowCd ( );
    void PutDefaultActionOutpatientNowCd (
        double pVal );
    double GetDefaultActionOutpatientFutureCd ( );
    void PutDefaultActionOutpatientFutureCd (
        double pVal );
    long GetOptionalInd ( );
    void PutOptionalInd (
        long pVal );
    double GetScheduledFacilityCd ( );
    void PutScheduledFacilityCd (
        double pVal );
    double GetScheduledNursingUnitCd ( );
    void PutScheduledNursingUnitCd (
        double pVal );
    long GetAllowFuturePhaseInd ( );
    void PutAllowFuturePhaseInd (
        long pVal );
    long GetStartDateTimeEstimatedInd ( );
    void PutStartDateTimeEstimatedInd (
        long pDateTimeEstimatedInd );
    long GetEndDateTimeEstimatedInd ( );
    void PutEndDateTimeEstimatedInd (
        long pEndDateTimeEstimatedInd );
    long GetOrderNowInd ( );
    void PutOrderNowInd (
        long pOrderNowInd );
    long GetFutureInitiateInd ( );
    void PutFutureInitiateInd (
        long pFutureInitiateInd );
    long IsAutoInitiateAvailable ( );
    long GetInactivateOffsetInd ( );
    void PutInactivateOffsetInd (
        long pInactivateOffsetInd );
    long AreAllComponentsExcluded ( );
    long GetActivateInd ( );
    void PutActivateInd (
        long pActivateInd );
    long CanUnlockStartDateTime ( );
    double GetSucceedPhaseId ( );
    void PutSucceedPhaseId (
        double pSucceedKeyId );
    double GetPrecedePhaseId ( );
    void PutPrecedePhaseId (
        double pPrecedeKeyId );
    long GetStatus ( );
    HRESULT GetSubPhasesVector (
        LONG_PTR lSubphasesVector );
    HRESULT PutSubPhasesVector (
        LONG_PTR lSubphasesVector );
    HRESULT AddPendingAction (
        struct IPlanAction * pPlanAction );
    INT_PTRX GetPendingActionSize ( );
    IPlanActionPtr GetPendingActionAt (
        INT_PTRX iIndex );
    HRESULT AddTreatmentPeriod (
        long lPeriodNumber,
        double dKey );
    double GetTreatmentPeriod (
        long lPeriodNumber );
    HRESULT RemoveTreatmentPeriod (
        long lPeriodNumber );
    HRESULT GetTreatmentPeriods (
        LONG_PTR lTreatmentPeriodsVector );
    HRESULT RemoveTreatmentSchedule ( );
    HRESULT AddTreatmentLinkedComponent (
        double dComponentId );
    long IsComponentLinkedToTreatment (
        double dComponentId );
    HRESULT RemoveTreatmentLinkedComponent (
        double dComponentId );
    HRESULT GetTreatmentLinkedComponents (
        LONG_PTR lTreatmentLinkedComponentsVector );
    _bstr_t GetTreatmentPeriodCustomLabel ( );
    void PutTreatmentPeriodCustomLabel (
        _bstr_t pVal );
    long HasTreatmentSchedule ( );
    _bstr_t BuildTreatmentScheduleDisplay ( );
    _bstr_t BuildComponentTreatmentScheduleDisplay (
        double dComponentId );
    long GetTreatmentPeriodNumber ( );
    void PutTreatmentPeriodNumber (
        long pVal );
    double GetProtocolPhaseId ( );
    void PutProtocolPhaseId (
        double pVal );
    IComponentPtr FindComponentByProtocolGroupNbr (
        double dProtocolGroupNbr );
    long GetGroupedPhasesNotLoaded ( );
    void PutGroupedPhasesNotLoaded (
        long pVal );
    IDispatchPtr GetOffsetTimeSpan ( );
    long GetReviewRoutingInd ( );
    void PutReviewRoutingInd (
        long pVal );
    PROTOCOL_REVIEW_STATUS_FLAG GetCurrentReviewStatusFlag ( );
    void PutCurrentReviewStatusFlag (
        PROTOCOL_REVIEW_STATUS_FLAG pVal );
    PROTOCOL_REVIEW_STATUS_FLAG GetPendingReviewStatusFlag ( );
    void PutPendingReviewStatusFlag (
        PROTOCOL_REVIEW_STATUS_FLAG pVal );
    double GetReviewReasonCd ( );
    void PutReviewReasonCd (
        double pVal );
    _bstr_t GetReviewComment ( );
    void PutReviewComment (
        _bstr_t pVal );
    long GetIsProtocolReviewDirty ( );
    void PutIsProtocolReviewDirty (
        long pVal );
    long IsProtocolRoutingForReview ( );
    _bstr_t GetReviewRejectPrsnlName ( );
    void PutReviewRejectPrsnlName (
        _bstr_t pVal );
    long IsPendingProtocolReview ( );
    double GetRequestPersonnelId ( );
    void PutRequestPersonnelId (
        double pVal );
    double GetToPersonnelId ( );
    void PutToPersonnelId (
        double pVal );
    _bstr_t GetRequestNameFullFormatted ( );
    void PutRequestNameFullFormatted (
        _bstr_t pVal );
    _bstr_t GetToNameFullFormatted ( );
    void PutToNameFullFormatted (
        _bstr_t pVal );
    IDispatchPtr GetUTCReviewDtTm ( );
    void PutUTCReviewDtTm (
        IDispatch * pVal );
    IDispatchPtr GetParentPhaseDispatch ( );
    void PutParentPhaseDispatch (
        IDispatch * pPhase );
    _bstr_t GetTreatmentPeriodLabels ( );
    double GetPathwayClassCd ( );
    void PutPathwayClassCd (
        double pVal );
    long HasComopnentInCPG ( );
    HRESULT InsertComponentAt (
        IDispatch * lpComponent,
        long lIndex );
    ESubPhaseStyle GetSubPhaseStyle ( );
    void PutSubPhaseStyle (
        ESubPhaseStyle pVal );
    long IsPhaseLinkedToComfirmedAppointment ( );
    double GetPathwayGroupId ( );
    void PutPathwayGroupId (
        double pVal );
    long GetPrimaryPhaseInd ( );
    void PutPrimaryPhaseInd (
        long pPrimaryPhaseInd );
    _bstr_t GetDefaultStartTime ( );
    void PutDefaultStartTime (
        _bstr_t pDefaultStartTime );
    EPhaseProcessingStatus GetProcessingStatus ( );
    void PutProcessingStatus (
        EPhaseProcessingStatus pVal );
    long GetPathwayMissingReasonFlag ( );
    void PutPathwayMissingReasonFlag (
        long pVal );
    long SuppressAllActionExceptVoid ( );
    _bstr_t GetParentComponentUUID ( );
    void PutParentComponentUUID (
        _bstr_t pVal );
    double GetParentPhaseCatalogId ( );
    void PutParentPhaseCatalogId (
        double pVal );
    HRESULT AddSucceedPhase (
        double dPhaseId );
    HRESULT AddSubPhase (
        double dPhaseId );
    _bstr_t GetUUID ( );
    void PutUUID (
        _bstr_t pVal );
    long GetWarnings ( );
    void PutWarnings (
        long pVal );
    long GetContainsPersonMismatchInd ( );
    void PutContainsPersonMismatchInd (
        long pVal );
    short GetRescheduleReasonAcceptFlag ( );
    void PutRescheduleReasonAcceptFlag (
        short pVal );
    HRESULT RemovePendingAction (
        struct IPlanAction * pPlanAction );
    double GetSupervisingPhysicianId ( );
    void PutSupervisingPhysicianId (
        double pVal );
    double GetProviderId ( );
    void PutProviderId (
        double pVal );
    long GetProviderIdSetUsingPrompt ( );
    void PutProviderIdSetUsingPrompt (
        long pVal );
    HRESULT MaintainSupervisingPhysicianOnPhase ( );
    double GetSupervisingActPrsnlId ( );
    void PutSupervisingActPrsnlId (
        double pVal );
    HRESULT AddDotComponentModification (
        LONG_PTR lDotComponentModification );
    HRESULT RemoveDotComponentModification (
        double dKey );
    HRESULT GetDotComponentModification (
        double dKey,
        LONG_PTR lDotComponentModification );
    HRESULT RemoveAllDotComponentModifications ( );
    HRESULT GetAllDotComponentModifications (
        LONG_PTR lDotComponentModificationVector );
    HRESULT GetDotComponentModificationComponentRelations (
        LONG_PTR lComponentRelations );
    long HasDotComponentModifications ( );
    long HasTreatmentPeriodDotComponentModifications ( );
    long ValidateTimeZeroOffsets ( );
    double GetToPoolId ( );
    void PutToPoolId (
        double pVal );
    HRESULT RemoveSucceedPhaseId (
        double dPhaseId );
    long HasSucceedPhaseId (
        double dPhaseId );
    long IsPhaseInProposalStatus ( );
    long GetHoldInd ( );
    void PutHoldInd (
        long pVal );
    long GetSkipInd ( );
    void PutSkipInd (
        long pVal );
    long IsPhaseInProtocolReview ( );
    long GetResumeInd ( );
    void PutResumeInd (
        long pVal );
    HRESULT AddReviewToPhase (
        struct IReview * pIReview );
    IUnknownPtr GetReviewCollection ( );
    long HasModifiedTreatmentPeriod ( );
    long GetOpenByDefaultInd ( );
    void PutOpenByDefaultInd (
        long pVal );
    long GetAllowActivateAllInd ( );
    void PutAllowActivateAllInd (
        long pVal );
    long GetIgnoreSupervisingPhysicianPrompt ( );
    void PutIgnoreSupervisingPhysicianPrompt (
        long pVal );
    void PutPhaseDetailStatusCd (
        double pVal );
    double GetPhaseDetailStatusCd ( );
    void PutPhaseDetailStatusMean (
        _bstr_t pVal );
    _bstr_t GetPhaseDetailStatusMean ( );
    void PutPhaseDetailStatusDisp (
        _bstr_t pVal );
    _bstr_t GetPhaseDetailStatusDisp ( );
    _bstr_t GetTreatmentPeriodDetailedStatusDisplay (
        struct IPhase * pPhase );
    long GetIsCopySourceTreatmentPeriod ( );
    void PutIsCopySourceTreatmentPeriod (
        long pVal );
    long GetIsSourceTreatmentPeriod ( );
    void PutIsSourceTreatmentPeriod (
        long pVal );
    long GetIsSucceedTreatmentPeriod ( );
    void PutIsSucceedTreatmentPeriod (
        long pVal );
    double GetCopySourceTreatmentPeriodId ( );
    void PutCopySourceTreatmentPeriodId (
        double pVal );
    long GetIsFirstTreatmentPeriod ( );
    void PutIsFirstTreatmentPeriod (
        long pVal );
    HRESULT ToggleComponentPhaseRelationship (
        double dActComponentId );
    HRESULT GetComponentPhaseRelationships (
        LONG_PTR lComponentPathwayRelationshipVector );
    long IsComponentRelatedToTreatmentPeriod (
        double dActComponentId );
    HRESULT ClearTreatmentLinkedComponents ( );
    HRESULT ClearSucceedPhases ( );
    HRESULT RemoveAllComponentPhaseRelationships ( );
    long IsCopiedTreatmentPeriod ( );
    long IsAdhocTreatmentPeriod ( );
    long GetIsPhaseStartFromAPrecomponentOrder ( );
    void PutIsPhaseStartFromAPrecomponentOrder (
        long pVal );
    long IsSigningIntoPendingProtocolReview ( );
    long HasSubphaseWithPendingActionType (
        ACTION_TYPE eActionType );
    HRESULT GetLinkedTreatmentPeriods (
        struct IComponent * pIProtocolComponent,
        LONG_PTR lLinkedTreatmentPeriodsVector );
    long GetNextComponentSequence ( );
    void PutNextComponentSequence (
        long pVal );
    HRESULT GetLinkedSchedulableComponents (
        LONG_PTR lLinkedSchedulableComponents );
    HRESULT GetLinkingSchedulingPhases (
        LONG_PTR lLinkingSchedulingPhases );
    long DoesSchedulingLinkageExistWithComponent (
        double dComponentId );
    long GetReviewRequiredSignatureCount ( );
    void PutReviewRequiredSignatureCount (
        long pVal );
    long GetSelfProtocolReview ( );
    void PutSelfProtocolReview (
        long pVal );
    double GetIntermediateReviewRequestPersonnelId ( );
    void PutIntermediateReviewRequestPersonnelId (
        double pVal );
    double GetIntermediateReviewToPersonnelId ( );
    void PutIntermediateReviewToPersonnelId (
        double pVal );
    double GetIntermediateReviewToPoolId ( );
    void PutIntermediateReviewToPoolId (
        double pVal );
    _bstr_t GetIntermediateReviewRequestNameFullFormatted ( );
    void PutIntermediateReviewRequestNameFullFormatted (
        _bstr_t pVal );
    _bstr_t GetIntermediateReviewToNameFullFormatted ( );
    void PutIntermediateReviewToNameFullFormatted (
        _bstr_t pVal );
    IDispatchPtr GetIntermediateReviewUTCReviewDtTm ( );
    void PutIntermediateReviewUTCReviewDtTm (
        IDispatch * pVal );
    HRESULT CopyCurrentProtocolReviewToIntermediateProtocolReview ( );
    HRESULT ClearIntermediateProtocolReview ( );
    PROTOCOL_REVIEW_STATUS_FLAG GetIntermediateReviewStatusFlag ( );
    void PutIntermediateReviewStatusFlag (
        PROTOCOL_REVIEW_STATUS_FLAG pVal );
    IPhasePtr GetLastTreatmentPeriod ( );
    HRESULT RemoveMembersFromGroup (
        struct IComponent * pComponent );
    long GetLastActionSeq ( );
    void PutLastActionSeq (
        long pVal );
    HRESULT UpdateTZIndOnDot ( );
    long GetIgnoreMOEWFromMpageOrderActivateWorkflow ( );
    void PutIgnoreMOEWFromMpageOrderActivateWorkflow (
        long pVal );
    long IsPhaseEmpty ( );
    long GetLinkedPhaseInd ( );
    void PutLinkedPhaseInd (
        long pVal );
    long GetNeedProtocolReviewAccept ( );
    void PutNeedProtocolReviewAccept (
        long pVal );
    long IsPhaseRestricted ( );
    long HasRestrictedComponent ( );
    HRESULT SetHasRestrictedComponent (
        long bHasRestrictedComponent );
    HRESULT UpdatePhaseStatusToPlannedPending ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlanCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanCatalogId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DurationDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationDesc (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddComponent (
        /*[in]*/ IDispatch * lpComponent ) = 0;
      virtual HRESULT __stdcall get_PreceedPhases (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PreceedPhases (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SucceedPhases (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SucceedPhases (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_FirstPhase (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPhase (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ ACTION_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ ACTION_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PersonId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PersonId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EncntrId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EncntrId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlanId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlanStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Resequence (
        /*[in]*/ struct IComponent * pComponent,
        /*[in]*/ VARIANT_BOOL bMoveUp ) = 0;
      virtual HRESULT __stdcall raw_RemoveComponent (
        /*[in]*/ struct IComponent * pComponent ) = 0;
      virtual HRESULT __stdcall get_Initiated (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Initiated (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StartDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_StartDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_CalcEndDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_CalcEndDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_ActUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CalcPlanStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CalcPlanStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_get_RemovedComponentCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddRemovedComponent (
        /*[in]*/ IDispatch * lpComponent ) = 0;
      virtual HRESULT __stdcall raw_MoveClinSubCategory (
        /*[in]*/ double dSourceCd,
        /*[in]*/ double dDestCd,
        /*[in]*/ double dClinicalCatCd ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IPhase * pPhase ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IPhase * pPhase,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindOrderComponent (
        /*[in]*/ LONG_PTR hPvOrderObj,
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall get_PhaseType (
        /*[out,retval]*/ PLAN_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_PhaseType (
        /*[in]*/ PLAN_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_PlanStatusDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanStatusDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanStatusMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanStatusMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CalcPlanStatusDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CalcPlanStatusDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CalcPlanStatusMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CalcPlanStatusMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPlanAction (
        /*[in]*/ struct IPlanAction * pPlanAction ) = 0;
      virtual HRESULT __stdcall get_ActionCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AreComponentsInitiated (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsComponentInPhase (
        /*[in]*/ struct IComponent * pComponent,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllPlanActions ( ) = 0;
      virtual HRESULT __stdcall get_CatalogInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateEndDtTm ( ) = 0;
      virtual HRESULT __stdcall raw_GetPhaseStatusDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMethodCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMethodCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OrderDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMethodDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMethodDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMethodMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMethodMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RemovedReltns (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RemovedReltns (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ReplicatedOriginal (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ReplicatedOriginal (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ReplicatedCopy (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ReplicatedCopy (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetRemovedReltns ( ) = 0;
      virtual HRESULT __stdcall get_TZExistInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TZExistInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_HasOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTZLRelationship ( ) = 0;
      virtual HRESULT __stdcall raw_FindTZComponent (
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall get_CompRUpdated (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_CompRUpdated (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall raw_GetEarliestOffsetComponent (
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall raw_FindOrderComponentById (
        /*[in]*/ double orderId,
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall raw_FindComponentById (
        /*[in]*/ double compId,
        /*[out,retval]*/ struct IComponent * * ppComponent ) = 0;
      virtual HRESULT __stdcall get_ParentDispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentDispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_ActOutcomesExistInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActOutcomesExistInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RefOwnerPersonId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefOwnerPersonId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RefOwnerName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RefOwnerName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CalcTimeZeroDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_CalcTimeZeroDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall raw_GetGroupCollection (
        /*[out,retval]*/ IDispatch * * pDisp ) = 0;
      virtual HRESULT __stdcall raw_AddGroup (
        /*[in]*/ struct IGroup * pIGroup ) = 0;
      virtual HRESULT __stdcall raw_GetGroupCount (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_GroupUpdtFlag (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupUpdtFlag (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_StartedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StartedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StartOffsetExistInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StartOffsetExistInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentLoaded (
        /*[out,retval]*/ COMP_LOADING_STATUS * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentLoaded (
        /*[in]*/ COMP_LOADING_STATUS pVal ) = 0;
      virtual HRESULT __stdcall get_OrderMatched (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderMatched (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DCReasonCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DCReasonCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SubPhaseExistInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPhaseExistInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SubPhases (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPhases (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubPhase (
        /*[in]*/ double dVal ) = 0;
      virtual HRESULT __stdcall raw_IsDuplicateSubPhase (
        /*[in]*/ double dVal,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LastActionPrsnlName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LastActionPrsnlName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LastActionDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_LastActionDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_SubphaseCompDispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_SubphaseCompDispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_NewSubPhaseExists (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NewSubPhaseExists (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ParentPhaseDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentPhaseDesc (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HideFlexedCompInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HideFlexedCompInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNomenReltnCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_GetDiagnosisDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsADuplicateDiagnosis (
        /*[in]*/ BSTR conceptCKI,
        /*[in]*/ double nomId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDiagnosisBySeq (
        /*[in]*/ long lSeq,
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall raw_GetDiagnosisByDiagId (
        /*[in]*/ double diagId,
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall raw_AddDiagnosis (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateDiagnosis (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveDiagnosis (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRemovedNomenReltnCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_GetRemovedDiagnosisAt (
        /*[in]*/ int Index,
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChemoInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChemoInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChemoRelatedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChemoRelatedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSubPhaseCompChemoRelatedInd (
        /*[in]*/ long bInd ) = 0;
      virtual HRESULT __stdcall raw_SetSubPhaseCompCPGInd (
        /*[in]*/ long bInd ) = 0;
      virtual HRESULT __stdcall raw_RemoveCPGComponentLinks ( ) = 0;
      virtual HRESULT __stdcall get_FacilityAccessInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FacilityAccessInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProActiveOutcomeExistInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProActiveOutcomeExistInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TaperGroupOrderId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TaperGroupOrderId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPhasePlanned (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSubphaseNormalizedDoseStatus (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCOrderDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCOrderDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCStartDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCStartDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCCalcEndDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCCalcEndDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCLastActionDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCLastActionDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCCalcTimeZeroDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCCalcTimeZeroDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_HighAlertAvail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HighAlertAvail (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AutoDisplayHighAlert (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoDisplayHighAlert (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_RemovePhaseDiagnoses ( ) = 0;
      virtual HRESULT __stdcall raw_FixDiagnosisSequence ( ) = 0;
      virtual HRESULT __stdcall get_CopyForwardOriginal (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CopyForwardOriginal (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CopyForwardCopy (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CopyForwardCopy (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearAllSubPhases ( ) = 0;
      virtual HRESULT __stdcall get_Included (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Included (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AreComponentsSkipped (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOrderStartDtTmException (
        /*[in]*/ struct IComponent * pComponent ) = 0;
      virtual HRESULT __stdcall get_OrderStartDtTmExceptionCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_AutoInitiateInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoInitiateInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetParentPhase (
        /*[out,retval]*/ struct IPhase * * pPhase ) = 0;
      virtual HRESULT __stdcall raw_GetAutoInitiateIndForPhaseAndSubPhase (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentCountWithFilters (
        /*[in]*/ COMPONENT_COUNT_FLAG eFlag,
        /*[out,retval]*/ long * lIncludedCount ) = 0;
      virtual HRESULT __stdcall get_CheckAlertsOnPlanning (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CheckAlertsOnPlanning (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CheckAlertsOnUpdates (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CheckAlertsOnUpdates (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AlertsLastCheckedDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlertsLastCheckedDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_HasModifiedSubphase (
        /*[out,retval]*/ long * pHasModifiedSubphase ) = 0;
      virtual HRESULT __stdcall raw_ResequenceComponents ( ) = 0;
      virtual HRESULT __stdcall get_OffsetQty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetQty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetAnchorPhaseId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetAnchorPhaseId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOffsetAnchoredPhase (
        /*[in]*/ double newVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOffsetAnchoredPhase (
        /*[in]*/ double oldVal ) = 0;
      virtual HRESULT __stdcall raw_ClearOffsetAnchoredPhases ( ) = 0;
      virtual HRESULT __stdcall raw_GetOffsetAnchoredPhases (
        /*[in]*/ LONG_PTR lAnchoredPhases ) = 0;
      virtual HRESULT __stdcall get_DefaultActionInpatientNowCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultActionInpatientNowCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultActionInpatientFutureCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultActionInpatientFutureCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultActionOutpatientNowCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultActionOutpatientNowCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultActionOutpatientFutureCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultActionOutpatientFutureCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OptionalInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OptionalInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ScheduledFacilityCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScheduledFacilityCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScheduledNursingUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScheduledNursingUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AllowFuturePhaseInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowFuturePhaseInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StartDateTimeEstimatedInd (
        /*[out,retval]*/ long * pDateTimeEstimatedInd ) = 0;
      virtual HRESULT __stdcall put_StartDateTimeEstimatedInd (
        /*[in]*/ long pDateTimeEstimatedInd ) = 0;
      virtual HRESULT __stdcall get_EndDateTimeEstimatedInd (
        /*[out,retval]*/ long * pEndDateTimeEstimatedInd ) = 0;
      virtual HRESULT __stdcall put_EndDateTimeEstimatedInd (
        /*[in]*/ long pEndDateTimeEstimatedInd ) = 0;
      virtual HRESULT __stdcall get_OrderNowInd (
        /*[out,retval]*/ long * pOrderNowInd ) = 0;
      virtual HRESULT __stdcall put_OrderNowInd (
        /*[in]*/ long pOrderNowInd ) = 0;
      virtual HRESULT __stdcall get_FutureInitiateInd (
        /*[out,retval]*/ long * pFutureInitiateInd ) = 0;
      virtual HRESULT __stdcall put_FutureInitiateInd (
        /*[in]*/ long pFutureInitiateInd ) = 0;
      virtual HRESULT __stdcall raw_IsAutoInitiateAvailable (
        /*[out,retval]*/ long * pIsAutoInitiateAvailable ) = 0;
      virtual HRESULT __stdcall get_InactivateOffsetInd (
        /*[out,retval]*/ long * pInactivateOffsetInd ) = 0;
      virtual HRESULT __stdcall put_InactivateOffsetInd (
        /*[in]*/ long pInactivateOffsetInd ) = 0;
      virtual HRESULT __stdcall raw_AreAllComponentsExcluded (
        /*[out,retval]*/ long * pAllComponentsAreExcluded ) = 0;
      virtual HRESULT __stdcall get_ActivateInd (
        /*[out,retval]*/ long * pActivateInd ) = 0;
      virtual HRESULT __stdcall put_ActivateInd (
        /*[in]*/ long pActivateInd ) = 0;
      virtual HRESULT __stdcall raw_CanUnlockStartDateTime (
        /*[out,retval]*/ long * pUnlock ) = 0;
      virtual HRESULT __stdcall get_SucceedPhaseId (
        /*[out,retval]*/ double * pSucceedKeyId ) = 0;
      virtual HRESULT __stdcall put_SucceedPhaseId (
        /*[in]*/ double pSucceedKeyId ) = 0;
      virtual HRESULT __stdcall get_PrecedePhaseId (
        /*[out,retval]*/ double * pPrecedeKeyId ) = 0;
      virtual HRESULT __stdcall put_PrecedePhaseId (
        /*[in]*/ double pPrecedeKeyId ) = 0;
      virtual HRESULT __stdcall raw_GetStatus (
        /*[out,retval]*/ long * pPhaseStatusMask ) = 0;
      virtual HRESULT __stdcall raw_GetSubPhasesVector (
        /*[in]*/ LONG_PTR lSubphasesVector ) = 0;
      virtual HRESULT __stdcall raw_PutSubPhasesVector (
        /*[in]*/ LONG_PTR lSubphasesVector ) = 0;
      virtual HRESULT __stdcall raw_AddPendingAction (
        /*[in]*/ struct IPlanAction * pPlanAction ) = 0;
      virtual HRESULT __stdcall raw_GetPendingActionSize (
        /*[out,retval]*/ INT_PTRX * pSize ) = 0;
      virtual HRESULT __stdcall raw_GetPendingActionAt (
        /*[in]*/ INT_PTRX iIndex,
        /*[out,retval]*/ struct IPlanAction * * pPlanAction ) = 0;
      virtual HRESULT __stdcall raw_AddTreatmentPeriod (
        /*[in]*/ long lPeriodNumber,
        /*[in]*/ double dKey ) = 0;
      virtual HRESULT __stdcall raw_GetTreatmentPeriod (
        /*[in]*/ long lPeriodNumber,
        /*[out,retval]*/ double * pKey ) = 0;
      virtual HRESULT __stdcall raw_RemoveTreatmentPeriod (
        /*[in]*/ long lPeriodNumber ) = 0;
      virtual HRESULT __stdcall raw_GetTreatmentPeriods (
        /*[in]*/ LONG_PTR lTreatmentPeriodsVector ) = 0;
      virtual HRESULT __stdcall raw_RemoveTreatmentSchedule ( ) = 0;
      virtual HRESULT __stdcall raw_AddTreatmentLinkedComponent (
        /*[in]*/ double dComponentId ) = 0;
      virtual HRESULT __stdcall raw_IsComponentLinkedToTreatment (
        /*[in]*/ double dComponentId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveTreatmentLinkedComponent (
        /*[in]*/ double dComponentId ) = 0;
      virtual HRESULT __stdcall raw_GetTreatmentLinkedComponents (
        /*[in]*/ LONG_PTR lTreatmentLinkedComponentsVector ) = 0;
      virtual HRESULT __stdcall get_TreatmentPeriodCustomLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TreatmentPeriodCustomLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_HasTreatmentSchedule (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_BuildTreatmentScheduleDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_BuildComponentTreatmentScheduleDisplay (
        /*[in]*/ double dComponentId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TreatmentPeriodNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TreatmentPeriodNumber (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProtocolPhaseId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtocolPhaseId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_FindComponentByProtocolGroupNbr (
        /*[in]*/ double dProtocolGroupNbr,
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall get_GroupedPhasesNotLoaded (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupedPhasesNotLoaded (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOffsetTimeSpan (
        /*[out,retval]*/ IDispatch * * pTimeSpan ) = 0;
      virtual HRESULT __stdcall get_ReviewRoutingInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ReviewRoutingInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentReviewStatusFlag (
        /*[out,retval]*/ PROTOCOL_REVIEW_STATUS_FLAG * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentReviewStatusFlag (
        /*[in]*/ PROTOCOL_REVIEW_STATUS_FLAG pVal ) = 0;
      virtual HRESULT __stdcall get_PendingReviewStatusFlag (
        /*[out,retval]*/ PROTOCOL_REVIEW_STATUS_FLAG * pVal ) = 0;
      virtual HRESULT __stdcall put_PendingReviewStatusFlag (
        /*[in]*/ PROTOCOL_REVIEW_STATUS_FLAG pVal ) = 0;
      virtual HRESULT __stdcall get_ReviewReasonCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReviewReasonCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReviewComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReviewComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsProtocolReviewDirty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsProtocolReviewDirty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsProtocolRoutingForReview (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReviewRejectPrsnlName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReviewRejectPrsnlName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPendingProtocolReview (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_RequestPersonnelId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RequestPersonnelId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ToPersonnelId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ToPersonnelId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RequestNameFullFormatted (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RequestNameFullFormatted (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ToNameFullFormatted (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ToNameFullFormatted (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UTCReviewDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCReviewDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_ParentPhaseDispatch (
        /*[out,retval]*/ IDispatch * * pPhase ) = 0;
      virtual HRESULT __stdcall put_ParentPhaseDispatch (
        /*[in]*/ IDispatch * pPhase ) = 0;
      virtual HRESULT __stdcall raw_GetTreatmentPeriodLabels (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayClassCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayClassCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_HasComopnentInCPG (
        /*[out,retval]*/ long * pHasComponentInCPG ) = 0;
      virtual HRESULT __stdcall raw_InsertComponentAt (
        /*[in]*/ IDispatch * lpComponent,
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall get_SubPhaseStyle (
        /*[out,retval]*/ ESubPhaseStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPhaseStyle (
        /*[in]*/ ESubPhaseStyle pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseLinkedToComfirmedAppointment (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayGroupId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayGroupId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryPhaseInd (
        /*[out,retval]*/ long * pPrimaryPhaseInd ) = 0;
      virtual HRESULT __stdcall put_PrimaryPhaseInd (
        /*[in]*/ long pPrimaryPhaseInd ) = 0;
      virtual HRESULT __stdcall get_DefaultStartTime (
        /*[out,retval]*/ BSTR * pDefaultStartTime ) = 0;
      virtual HRESULT __stdcall put_DefaultStartTime (
        /*[in]*/ BSTR pDefaultStartTime ) = 0;
      virtual HRESULT __stdcall get_ProcessingStatus (
        /*[out,retval]*/ EPhaseProcessingStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_ProcessingStatus (
        /*[in]*/ EPhaseProcessingStatus pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayMissingReasonFlag (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayMissingReasonFlag (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_SuppressAllActionExceptVoid (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ParentComponentUUID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentComponentUUID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ParentPhaseCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentPhaseCatalogId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSucceedPhase (
        /*[in]*/ double dPhaseId ) = 0;
      virtual HRESULT __stdcall raw_AddSubPhase (
        /*[in]*/ double dPhaseId ) = 0;
      virtual HRESULT __stdcall get_UUID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UUID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Warnings (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Warnings (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ContainsPersonMismatchInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ContainsPersonMismatchInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RescheduleReasonAcceptFlag (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_RescheduleReasonAcceptFlag (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall raw_RemovePendingAction (
        /*[in]*/ struct IPlanAction * pPlanAction ) = 0;
      virtual HRESULT __stdcall get_SupervisingPhysicianId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SupervisingPhysicianId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderIdSetUsingPrompt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderIdSetUsingPrompt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_MaintainSupervisingPhysicianOnPhase ( ) = 0;
      virtual HRESULT __stdcall get_SupervisingActPrsnlId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SupervisingActPrsnlId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AddDotComponentModification (
        /*[in]*/ LONG_PTR lDotComponentModification ) = 0;
      virtual HRESULT __stdcall raw_RemoveDotComponentModification (
        /*[in]*/ double dKey ) = 0;
      virtual HRESULT __stdcall raw_GetDotComponentModification (
        /*[in]*/ double dKey,
        /*[in]*/ LONG_PTR lDotComponentModification ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllDotComponentModifications ( ) = 0;
      virtual HRESULT __stdcall raw_GetAllDotComponentModifications (
        /*[in]*/ LONG_PTR lDotComponentModificationVector ) = 0;
      virtual HRESULT __stdcall raw_GetDotComponentModificationComponentRelations (
        /*[in]*/ LONG_PTR lComponentRelations ) = 0;
      virtual HRESULT __stdcall raw_HasDotComponentModifications (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasTreatmentPeriodDotComponentModifications (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ValidateTimeZeroOffsets (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ToPoolId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ToPoolId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveSucceedPhaseId (
        /*[in]*/ double dPhaseId ) = 0;
      virtual HRESULT __stdcall raw_HasSucceedPhaseId (
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseInProposalStatus (
        /*[out,retval]*/ long * pIsPhaseInProposalStatus ) = 0;
      virtual HRESULT __stdcall get_HoldInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HoldInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SkipInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SkipInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseInProtocolReview (
        /*[out,retval]*/ long * pIsPhaseInProtocolReview ) = 0;
      virtual HRESULT __stdcall get_ResumeInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResumeInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddReviewToPhase (
        /*[in]*/ struct IReview * pIReview ) = 0;
      virtual HRESULT __stdcall raw_GetReviewCollection (
        /*[out,retval]*/ IUnknown * * pIReviewCollection ) = 0;
      virtual HRESULT __stdcall raw_HasModifiedTreatmentPeriod (
        /*[out,retval]*/ long * pHasModifiedTreatmentPeriod ) = 0;
      virtual HRESULT __stdcall get_OpenByDefaultInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OpenByDefaultInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AllowActivateAllInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowActivateAllInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreSupervisingPhysicianPrompt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreSupervisingPhysicianPrompt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall put_PhaseDetailStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PhaseDetailStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PhaseDetailStatusMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhaseDetailStatusMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PhaseDetailStatusDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhaseDetailStatusDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTreatmentPeriodDetailedStatusDisplay (
        /*[in]*/ struct IPhase * pPhase,
        /*[out,retval]*/ BSTR * newVal ) = 0;
      virtual HRESULT __stdcall get_IsCopySourceTreatmentPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCopySourceTreatmentPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsSourceTreatmentPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSourceTreatmentPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsSucceedTreatmentPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSucceedTreatmentPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CopySourceTreatmentPeriodId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CopySourceTreatmentPeriodId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsFirstTreatmentPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFirstTreatmentPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ToggleComponentPhaseRelationship (
        /*[in]*/ double dActComponentId ) = 0;
      virtual HRESULT __stdcall raw_GetComponentPhaseRelationships (
        /*[in]*/ LONG_PTR lComponentPathwayRelationshipVector ) = 0;
      virtual HRESULT __stdcall raw_IsComponentRelatedToTreatmentPeriod (
        /*[in]*/ double dActComponentId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTreatmentLinkedComponents ( ) = 0;
      virtual HRESULT __stdcall raw_ClearSucceedPhases ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllComponentPhaseRelationships ( ) = 0;
      virtual HRESULT __stdcall raw_IsCopiedTreatmentPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsAdhocTreatmentPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsPhaseStartFromAPrecomponentOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPhaseStartFromAPrecomponentOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsSigningIntoPendingProtocolReview (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasSubphaseWithPendingActionType (
        /*[in]*/ ACTION_TYPE eActionType,
        /*[out,retval]*/ long * pHasSubphaseWithPendingActionType ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedTreatmentPeriods (
        /*[in]*/ struct IComponent * pIProtocolComponent,
        /*[in]*/ LONG_PTR lLinkedTreatmentPeriodsVector ) = 0;
      virtual HRESULT __stdcall get_NextComponentSequence (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NextComponentSequence (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedSchedulableComponents (
        /*[in]*/ LONG_PTR lLinkedSchedulableComponents ) = 0;
      virtual HRESULT __stdcall raw_GetLinkingSchedulingPhases (
        /*[in]*/ LONG_PTR lLinkingSchedulingPhases ) = 0;
      virtual HRESULT __stdcall raw_DoesSchedulingLinkageExistWithComponent (
        /*[in]*/ double dComponentId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReviewRequiredSignatureCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ReviewRequiredSignatureCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SelfProtocolReview (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SelfProtocolReview (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewRequestPersonnelId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewRequestPersonnelId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewToPersonnelId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewToPersonnelId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewToPoolId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewToPoolId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewRequestNameFullFormatted (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewRequestNameFullFormatted (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewToNameFullFormatted (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewToNameFullFormatted (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewUTCReviewDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewUTCReviewDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyCurrentProtocolReviewToIntermediateProtocolReview ( ) = 0;
      virtual HRESULT __stdcall raw_ClearIntermediateProtocolReview ( ) = 0;
      virtual HRESULT __stdcall get_IntermediateReviewStatusFlag (
        /*[out,retval]*/ PROTOCOL_REVIEW_STATUS_FLAG * pVal ) = 0;
      virtual HRESULT __stdcall put_IntermediateReviewStatusFlag (
        /*[in]*/ PROTOCOL_REVIEW_STATUS_FLAG pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLastTreatmentPeriod (
        /*[out,retval]*/ struct IPhase * * ppLastTreatmentPeriod ) = 0;
      virtual HRESULT __stdcall raw_RemoveMembersFromGroup (
        /*[in]*/ struct IComponent * pComponent ) = 0;
      virtual HRESULT __stdcall get_LastActionSeq (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LastActionSeq (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateTZIndOnDot ( ) = 0;
      virtual HRESULT __stdcall get_IgnoreMOEWFromMpageOrderActivateWorkflow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreMOEWFromMpageOrderActivateWorkflow (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseEmpty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkedPhaseInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkedPhaseInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NeedProtocolReviewAccept (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NeedProtocolReviewAccept (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseRestricted (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasRestrictedComponent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasRestrictedComponent (
        /*[in]*/ long bHasRestrictedComponent ) = 0;
      virtual HRESULT __stdcall raw_UpdatePhaseStatusToPlannedPending ( ) = 0;
};

struct __declspec(uuid("72eb3d41-e1ea-4c64-b1a1-16af8e344ef0"))
IPlan : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlanCatalogId,put=PutPlanCatalogId))
    double PlanCatalogId;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetActiveInd,put=PutActiveInd))
    long ActiveInd;
    __declspec(property(get=GetCrossEncntrInd,put=PutCrossEncntrInd))
    long CrossEncntrInd;
    __declspec(property(get=GetRefTextExist))
    long RefTextExist;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetCommentExist,put=PutCommentExist))
    long CommentExist;
    __declspec(property(get=GetVersionNum,put=PutVersionNum))
    _bstr_t VersionNum;
    __declspec(property(get=GetPlanType,put=PutPlanType))
    PLAN_TYPE PlanType;
    __declspec(property(get=GetPhaseCollection))
    IUnknownPtr PhaseCollection;
    __declspec(property(get=GetReferenceContentPtr))
    IUnknownPtr ReferenceContentPtr;
    __declspec(property(get=GetNeedVersioning,put=PutNeedVersioning))
    long NeedVersioning;
    __declspec(property(get=GetActionType,put=PutActionType))
    ACTION_TYPE ActionType;
    __declspec(property(get=GetRelModified,put=PutRelModified))
    long RelModified;
    __declspec(property(get=GetUpdtCnt,put=PutUpdtCnt))
    long UpdtCnt;
    __declspec(property(get=GetCommentTextId,put=PutCommentTextId))
    double CommentTextId;
    __declspec(property(get=GetVersion,put=PutVersion))
    long Version;
    __declspec(property(get=GetCommentUpdtCnt,put=PutCommentUpdtCnt))
    long CommentUpdtCnt;
    __declspec(property(get=GetCommentModified,put=PutCommentModified))
    long CommentModified;
    __declspec(property(get=GetCommentRemoved,put=PutCommentRemoved))
    long CommentRemoved;
    __declspec(property(get=GetPlanId,put=PutPlanId))
    double PlanId;
    __declspec(property(get=GetPersonId,put=PutPersonId))
    double PersonId;
    __declspec(property(get=GetRemovedPhaseCollection))
    IUnknownPtr RemovedPhaseCollection;
    __declspec(property(get=GetCheckRefTextExist,put=PutCheckRefTextExist))
    long CheckRefTextExist;
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetCatalogInd,put=PutCatalogInd))
    long CatalogInd;
    __declspec(property(get=GetPlanTypeCd,put=PutPlanTypeCd))
    double PlanTypeCd;
    __declspec(property(get=GetDisplayMethodCd,put=PutDisplayMethodCd))
    double DisplayMethodCd;
    __declspec(property(get=GetPlanTypeDisp,put=PutPlanTypeDisp))
    _bstr_t PlanTypeDisp;
    __declspec(property(get=GetPlanTypeMean,put=PutPlanTypeMean))
    _bstr_t PlanTypeMean;
    __declspec(property(get=GetPlanZone,put=PutPlanZone))
    PLAN_ZONE PlanZone;
    __declspec(property(get=GetSortDtTm,put=PutSortDtTm))
    DATE SortDtTm;
    __declspec(property(get=GetPlanClassCd,put=PutPlanClassCd))
    double PlanClassCd;
    __declspec(property(get=GetPlanClassDisp,put=PutPlanClassDisp))
    _bstr_t PlanClassDisp;
    __declspec(property(get=GetPlanClassMean,put=PutPlanClassMean))
    _bstr_t PlanClassMean;
    __declspec(property(get=GetDisplayMethodDisp,put=PutDisplayMethodDisp))
    _bstr_t DisplayMethodDisp;
    __declspec(property(get=GetDisplayMethodMean,put=PutDisplayMethodMean))
    _bstr_t DisplayMethodMean;
    __declspec(property(get=GetRefTextModified,put=PutRefTextModified))
    long RefTextModified;
    __declspec(property(get=GetPlanEvidenceReltnId,put=PutPlanEvidenceReltnId))
    double PlanEvidenceReltnId;
    __declspec(property(get=GetNewEvidence,put=PutNewEvidence))
    long NewEvidence;
    __declspec(property(get=GetBegEffectiveDtTm,put=PutBegEffectiveDtTm))
    DATE BegEffectiveDtTm;
    __declspec(property(get=GetEndEffectiveDtTm,put=PutEndEffectiveDtTm))
    DATE EndEffectiveDtTm;
    __declspec(property(get=GetRefOwnerPersonId,put=PutRefOwnerPersonId))
    double RefOwnerPersonId;
    __declspec(property(get=GetFlexFacilityDisp))
    _bstr_t FlexFacilityDisp;
    __declspec(property(get=GetFlexingFacilityCodeAt))
    double FlexingFacilityCodeAt[];
    __declspec(property(get=GetFlexingCount))
    long FlexingCount;
    __declspec(property(get=GetAllFacilityInd,put=PutAllFacilityInd))
    long AllFacilityInd;
    __declspec(property(get=GetDisplayDescription,put=PutDisplayDescription))
    _bstr_t DisplayDescription;
    __declspec(property(get=GetVirtualViewPosAt))
    double VirtualViewPosAt[];
    __declspec(property(get=GetFacilityDisplayAt))
    _bstr_t FacilityDisplayAt[];
    __declspec(property(get=GetProblemDiagChanged,put=PutProblemDiagChanged))
    long ProblemDiagChanged;
    __declspec(property(get=GetProblemDiagCount))
    long ProblemDiagCount;
    __declspec(property(get=GetProblemDiagDisplayAt))
    _bstr_t ProblemDiagDisplayAt[];
    __declspec(property(get=GetProblemDiagNomenIdAt))
    double ProblemDiagNomenIdAt[];
    __declspec(property(get=GetProblemDiagConceptCKIAt))
    _bstr_t ProblemDiagConceptCKIAt[];
    __declspec(property(get=GetRemoveReftextInd,put=PutRemoveReftextInd))
    long RemoveReftextInd;
    __declspec(property(get=GetPhaseReferenceContentPtr))
    IUnknownPtr PhaseReferenceContentPtr[];
    __declspec(property(get=GetSubPhaseInd,put=PutSubPhaseInd))
    long SubPhaseInd;
    __declspec(property(get=GetHideFlexedCompInd,put=PutHideFlexedCompInd))
    long HideFlexedCompInd;
    __declspec(property(get=GetUsingCycleNbr,put=PutUsingCycleNbr))
    long UsingCycleNbr;
    __declspec(property(get=GetCycleNbr,put=PutCycleNbr))
    long CycleNbr;
    __declspec(property(get=GetDefaultViewMean,put=PutDefaultViewMean))
    _bstr_t DefaultViewMean;
    __declspec(property(get=GetPropagateDiagInd,put=PutPropagateDiagInd))
    long PropagateDiagInd;
    __declspec(property(get=GetStandardCycleNbr,put=PutStandardCycleNbr))
    long StandardCycleNbr;
    __declspec(property(get=GetOrigCycleNbr,put=PutOrigCycleNbr))
    long OrigCycleNbr;
    __declspec(property(get=GetChemoRelatedInd,put=PutChemoRelatedInd))
    long ChemoRelatedInd;
    __declspec(property(get=GetChemoInd,put=PutChemoInd))
    long ChemoInd;
    __declspec(property(get=GetProviderPromptInd,put=PutProviderPromptInd))
    long ProviderPromptInd;
    __declspec(property(get=GetProviderId,put=PutProviderId))
    double ProviderId;
    __declspec(property(get=GetCommunicationTypeCd,put=PutCommunicationTypeCd))
    double CommunicationTypeCd;
    __declspec(property(get=GetUTCSortDtTm,put=PutUTCSortDtTm))
    IDispatchPtr UTCSortDtTm;
    __declspec(property(get=GetSuggestedPlan,put=PutSuggestedPlan))
    IDispatchPtr SuggestedPlan;
    __declspec(property(get=GetAllowCopyForwardInd,put=PutAllowCopyForwardInd))
    long AllowCopyForwardInd;
    __declspec(property(get=GetNewestVersion,put=PutNewestVersion))
    long NewestVersion;
    __declspec(property(get=GetNewestVersionPathwayCatId,put=PutNewestVersionPathwayCatId))
    double NewestVersionPathwayCatId;
    __declspec(property(get=GetNewestVersionActiveInd,put=PutNewestVersionActiveInd))
    long NewestVersionActiveInd;
    __declspec(property(get=GetPlanActionLoaded,put=PutPlanActionLoaded))
    long PlanActionLoaded;
    __declspec(property(get=GetCycleBeginNbr,put=PutCycleBeginNbr))
    long CycleBeginNbr;
    __declspec(property(get=GetCycleEndNbr,put=PutCycleEndNbr))
    long CycleEndNbr;
    __declspec(property(get=GetCycleLabelCd,put=PutCycleLabelCd))
    double CycleLabelCd;
    __declspec(property(get=GetCycleDisplayEndInd,put=PutCycleDisplayEndInd))
    short CycleDisplayEndInd;
    __declspec(property(get=GetCycleLockEndInd,put=PutCycleLockEndInd))
    short CycleLockEndInd;
    __declspec(property(get=GetCycleIncrementNbr,put=PutCycleIncrementNbr))
    long CycleIncrementNbr;
    __declspec(property(get=GetDefaultVisitTypeFlag,put=PutDefaultVisitTypeFlag))
    DEFAULT_VISIT_TYPE_FLAG DefaultVisitTypeFlag;
    __declspec(property(get=GetPromptOnSelectionInd,put=PutPromptOnSelectionInd))
    long PromptOnSelectionInd;
    __declspec(property(get=GetExpectedCycleNbr,put=PutExpectedCycleNbr))
    long ExpectedCycleNbr;
    __declspec(property(get=GetPrimarySynonymId,put=PutPrimarySynonymId))
    double PrimarySynonymId;
    __declspec(property(get=GetPrimarySynonymModified,put=PutPrimarySynonymModified))
    long PrimarySynonymModified;
    __declspec(property(get=GetCurrentSynonym,put=PutCurrentSynonym))
    _bstr_t CurrentSynonym;
    __declspec(property(get=GetTrialPlanDescription,put=PutTrialPlanDescription))
    _bstr_t TrialPlanDescription;
    __declspec(property(get=GetComponentGroupReferenceContentPtr))
    IUnknownPtr ComponentGroupReferenceContentPtr[];
    __declspec(property(get=GetRegimenElementId,put=PutRegimenElementId))
    double RegimenElementId;
    __declspec(property(get=GetVersionStatus,put=PutVersionStatus))
    EPlanVersionStatus VersionStatus;
    __declspec(property(get=GetUUID,put=PutUUID))
    _bstr_t UUID;
    __declspec(property(get=GetCustomizedPlanId,put=PutCustomizedPlanId))
    double CustomizedPlanId;
    __declspec(property(get=GetPathwayCustomizationPlanName,put=PutPathwayCustomizationPlanName))
    _bstr_t PathwayCustomizationPlanName;
    __declspec(property(get=GetPathwayReferencePlanName,put=PutPathwayReferencePlanName))
    _bstr_t PathwayReferencePlanName;
    __declspec(property(get=GetRestrictedActionsBitmask,put=PutRestrictedActionsBitmask))
    long RestrictedActionsBitmask;
    __declspec(property(get=GetAllowProposal,put=PutAllowProposal))
    long AllowProposal;
    __declspec(property(get=GetOpenByDefaultInd,put=PutOpenByDefaultInd))
    long OpenByDefaultInd;
    __declspec(property(get=GetVersionPlanCatalogId,put=PutVersionPlanCatalogId))
    double VersionPlanCatalogId;
    __declspec(property(get=GetProviderName,put=PutProviderName))
    _bstr_t ProviderName;
    __declspec(property(get=GetAllowSaveAsMyFavorite,put=PutAllowSaveAsMyFavorite))
    long AllowSaveAsMyFavorite;
    __declspec(property(get=GetOverrideMRDOnPlanInd,put=PutOverrideMRDOnPlanInd))
    long OverrideMRDOnPlanInd;

    //
    // Wrapper methods for error-handling
    //

    double GetPlanCatalogId ( );
    void PutPlanCatalogId (
        double pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    long GetActiveInd ( );
    void PutActiveInd (
        long pVal );
    long GetCrossEncntrInd ( );
    void PutCrossEncntrInd (
        long pVal );
    long GetRefTextExist ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t pVal );
    long GetCommentExist ( );
    void PutCommentExist (
        long pVal );
    _bstr_t GetVersionNum ( );
    void PutVersionNum (
        _bstr_t pVal );
    PLAN_TYPE GetPlanType ( );
    void PutPlanType (
        PLAN_TYPE pVal );
    HRESULT AddPhase (
        IDispatch * lpPhase );
    IUnknownPtr GetPhaseCollection ( );
    IUnknownPtr GetReferenceContentPtr ( );
    long GetNeedVersioning ( );
    void PutNeedVersioning (
        long pVal );
    ACTION_TYPE GetActionType ( );
    void PutActionType (
        ACTION_TYPE pVal );
    long GetRelModified ( );
    void PutRelModified (
        long pVal );
    long GetUpdtCnt ( );
    void PutUpdtCnt (
        long pVal );
    double GetCommentTextId ( );
    void PutCommentTextId (
        double pVal );
    long GetVersion ( );
    void PutVersion (
        long pVal );
    long GetCommentUpdtCnt ( );
    void PutCommentUpdtCnt (
        long pVal );
    long GetCommentModified ( );
    void PutCommentModified (
        long pVal );
    long GetCommentRemoved ( );
    void PutCommentRemoved (
        long pVal );
    double GetPlanId ( );
    void PutPlanId (
        double pVal );
    double GetPersonId ( );
    void PutPersonId (
        double pVal );
    HRESULT RemovePhase (
        struct IPhase * pIPhase );
    IUnknownPtr GetRemovedPhaseCollection ( );
    long GetCheckRefTextExist ( );
    void PutCheckRefTextExist (
        long pVal );
    HRESULT AddRemovedPhase (
        IDispatch * lpPhase );
    HRESULT Copy (
        struct IPlan * pPlan );
    long IsEqual (
        struct IPlan * pPlan );
    _variant_t GetKey ( );
    IComponentPtr FindOrderComponent (
        LONG_PTR hPvOrderObj );
    IPhasePtr FindComponentPhase (
        struct IComponent * pComponent );
    long GetCatalogInd ( );
    void PutCatalogInd (
        long pVal );
    double GetPlanTypeCd ( );
    void PutPlanTypeCd (
        double pVal );
    double GetDisplayMethodCd ( );
    void PutDisplayMethodCd (
        double pVal );
    _bstr_t GetPlanTypeDisp ( );
    void PutPlanTypeDisp (
        _bstr_t pVal );
    _bstr_t GetPlanTypeMean ( );
    void PutPlanTypeMean (
        _bstr_t pVal );
    PLAN_ZONE GetPlanZone ( );
    void PutPlanZone (
        PLAN_ZONE pVal );
    DATE GetSortDtTm ( );
    void PutSortDtTm (
        DATE pVal );
    double GetPlanClassCd ( );
    void PutPlanClassCd (
        double pVal );
    _bstr_t GetPlanClassDisp ( );
    void PutPlanClassDisp (
        _bstr_t pVal );
    _bstr_t GetPlanClassMean ( );
    void PutPlanClassMean (
        _bstr_t pVal );
    _bstr_t GetDisplayMethodDisp ( );
    void PutDisplayMethodDisp (
        _bstr_t pVal );
    _bstr_t GetDisplayMethodMean ( );
    void PutDisplayMethodMean (
        _bstr_t pVal );
    long GetRefTextModified ( );
    void PutRefTextModified (
        long pVal );
    double GetPlanEvidenceReltnId ( );
    void PutPlanEvidenceReltnId (
        double pVal );
    long GetNewEvidence ( );
    void PutNewEvidence (
        long pVal );
    DATE GetBegEffectiveDtTm ( );
    void PutBegEffectiveDtTm (
        DATE pVal );
    DATE GetEndEffectiveDtTm ( );
    void PutEndEffectiveDtTm (
        DATE pVal );
    IComponentPtr FindOrderComponentById (
        double orderId );
    IComponentPtr FindComponentById (
        double compId );
    double GetRefOwnerPersonId ( );
    void PutRefOwnerPersonId (
        double pVal );
    HRESULT SetFacilityFlexing (
        const _variant_t & cv,
        const _variant_t & disp );
    _bstr_t GetFlexFacilityDisp ( );
    double GetFlexingFacilityCodeAt (
        int idx );
    long GetFlexingCount ( );
    long GetAllFacilityInd ( );
    void PutAllFacilityInd (
        long pVal );
    _bstr_t GetDisplayDescription ( );
    void PutDisplayDescription (
        _bstr_t pVal );
    double GetVirtualViewPosAt (
        int Index );
    _bstr_t FindZynxEvidenceLocatorByPhaseId (
        double id );
    _bstr_t FindZynxEvidenceLocatorByClinCat (
        double clinCatCd,
        double clinSubCatCd );
    _bstr_t FindZynxEvidenceLocatorByCompId (
        double id );
    HRESULT AddPwEvidenceReltn (
        LONG_PTR pVal );
    _bstr_t GetFacilityDisplayAt (
        int Index );
    long AddProblemDiagnosis (
        IDispatch * lpDisp );
    HRESULT RemoveProblemDiagnosis (
        int Index );
    long GetProblemDiagChanged ( );
    void PutProblemDiagChanged (
        long pVal );
    long GetProblemDiagCount ( );
    _bstr_t GetProblemDiagDisplayAt (
        int Index );
    double GetProblemDiagNomenIdAt (
        int Index );
    _bstr_t GetProblemDiagConceptCKIAt (
        int Index );
    long GetRemoveReftextInd ( );
    void PutRemoveReftextInd (
        long pVal );
    _bstr_t FindZynxEvidenceLocatorByPhaseClinCat (
        double phaseId,
        double clinCatCd );
    _bstr_t FindZynxEvidenceLocatorByPhaseClinSubCat (
        double phaseId,
        double clinSubCatCd );
    double FindReferenceManualByPhaseId (
        double phaseId );
    IUnknownPtr GetPhaseReferenceContentPtr (
        double phaseId );
    long GetPwEvidenceReltn (
        PLAN_EVIDENCE_LEVEL level,
        double dVal,
        double dClinCat,
        double dClinSubCat,
        _bstr_t sType,
        LONG_PTR lVal );
    long GetPwEvidenceCount ( );
    HRESULT GetPwEvidenceAt (
        int Index,
        LONG_PTR lVal );
    HRESULT RemovePwEvidenceReltn (
        LONG_PTR lVal );
    HRESULT UpdatePwEvidenceReltn (
        LONG_PTR lVal );
    HRESULT CreatRefTextContentPtrs ( );
    long GetSubPhaseInd ( );
    void PutSubPhaseInd (
        long pVal );
    long GetHideFlexedCompInd ( );
    void PutHideFlexedCompInd (
        long pVal );
    IGroupPtr GetCPGroupPtr (
        double dGroupNbr );
    HRESULT AddGroup (
        struct IGroup * pIGroup );
    IDispatchPtr GetGroupCollection ( );
    int GetGroupCount ( );
    HRESULT RemoveGroup (
        struct IGroup * pGroup );
    long GetUsingCycleNbr ( );
    void PutUsingCycleNbr (
        long pVal );
    long GetCycleNbr ( );
    void PutCycleNbr (
        long pVal );
    _bstr_t GetDefaultViewMean ( );
    void PutDefaultViewMean (
        _bstr_t pVal );
    long GetPropagateDiagInd ( );
    void PutPropagateDiagInd (
        long pVal );
    long GetStandardCycleNbr ( );
    void PutStandardCycleNbr (
        long pVal );
    long GetOrigCycleNbr ( );
    void PutOrigCycleNbr (
        long pVal );
    long GetChemoRelatedInd ( );
    void PutChemoRelatedInd (
        long pVal );
    long GetChemoInd ( );
    void PutChemoInd (
        long pVal );
    long GetProviderPromptInd ( );
    void PutProviderPromptInd (
        long pVal );
    double GetProviderId ( );
    void PutProviderId (
        double pVal );
    double GetCommunicationTypeCd ( );
    void PutCommunicationTypeCd (
        double pVal );
    IDispatchPtr GetUTCSortDtTm ( );
    void PutUTCSortDtTm (
        IDispatch * pVal );
    _bstr_t BuildRTF ( );
    IDispatchPtr GetSuggestedPlan ( );
    void PutSuggestedPlan (
        IDispatch * pVal );
    long GetAllowCopyForwardInd ( );
    void PutAllowCopyForwardInd (
        long pVal );
    long GetNewestVersion ( );
    void PutNewestVersion (
        long pVal );
    double GetNewestVersionPathwayCatId ( );
    void PutNewestVersionPathwayCatId (
        double pVal );
    long GetNewestVersionActiveInd ( );
    void PutNewestVersionActiveInd (
        long pVal );
    COMP_LOADING_STATUS GetComponentLoaded ( );
    HRESULT SetEventSetNamesByPhaseId (
        double dPhaseId,
        LONG_PTR lEventSetNames );
    HRESULT GetEventSetNamesByPhaseId (
        double dPhaseId,
        LONG_PTR * lEventSetNames );
    long PhaseHasEventSetNames (
        double dPhaseId );
    IPhasePtr GetAutoInitiatePhase ( );
    IPhasePtr GetCarePlanPhase ( );
    HRESULT RemoveOldPwEvidenceReltnForCopyPlan (
        LONG_PTR lVal );
    long GetPlanActionLoaded ( );
    void PutPlanActionLoaded (
        long pVal );
    long GetCycleBeginNbr ( );
    void PutCycleBeginNbr (
        long pVal );
    long GetCycleEndNbr ( );
    void PutCycleEndNbr (
        long pVal );
    double GetCycleLabelCd ( );
    void PutCycleLabelCd (
        double pVal );
    short GetCycleDisplayEndInd ( );
    void PutCycleDisplayEndInd (
        short pVal );
    short GetCycleLockEndInd ( );
    void PutCycleLockEndInd (
        short pVal );
    long GetCycleIncrementNbr ( );
    void PutCycleIncrementNbr (
        long pVal );
    long HasPhaseOffsets ( );
    HRESULT RemoveAllPhaseOffsets ( );
    DEFAULT_VISIT_TYPE_FLAG GetDefaultVisitTypeFlag ( );
    void PutDefaultVisitTypeFlag (
        DEFAULT_VISIT_TYPE_FLAG pVal );
    long GetPromptOnSelectionInd ( );
    void PutPromptOnSelectionInd (
        long pVal );
    IPhasePtr GetPhaseByKey (
        double dPhaseId );
    HRESULT GetSchedulablePhasesByComponentId (
        double dComponentId,
        LONG_PTR larrPhases );
    HRESULT GetNonSchedulablePhases (
        LONG_PTR larrPhases );
    HRESULT UpdateSchedulablePhasesForComponent (
        IDispatch * pComponent,
        LONG_PTR larrPhases );
    HRESULT RemoveCompPathwayRelationsByPhase (
        IDispatch * pPhase );
    HRESULT GetCompPathwayRelations (
        LONG_PTR larrCompPathwayRelations );
    HRESULT SetCompPathwayRelations (
        LONG_PTR larrCompPathwayRelations );
    long GetExpectedCycleNbr ( );
    void PutExpectedCycleNbr (
        long pVal );
    long HasOrderingDefaults ( );
    HRESULT AddCompPathwayRelations (
        LONG_PTR larrCompPathwayRelations );
    IComponentPtr GetSchedulableComponentByPhaseId (
        double dPhaseId );
    HRESULT GetSequencedPhaseArray (
        LONG_PTR larrPhases );
    HRESULT GetFakeInitiatePendingPhases (
        LONG_PTR larrPhases );
    long IsPhaseSchedulable (
        double dPhaseId );
    long IsComponentSchedulable (
        double dComponentId );
    IPhasePtr GetEarliestSchedulablePhaseByComponentId (
        double dComponentId );
    long IsComponentLinkedToSpecificPhase (
        double dComponentId,
        double dPhaseId );
    HRESULT GetSynonyms (
        LONG_PTR larrSynonyms );
    HRESULT SetSynonyms (
        LONG_PTR larrSynonyms );
    double GetPrimarySynonymId ( );
    void PutPrimarySynonymId (
        double pVal );
    long GetPrimarySynonymModified ( );
    void PutPrimarySynonymModified (
        long pVal );
    _bstr_t GetCurrentSynonym ( );
    void PutCurrentSynonym (
        _bstr_t pVal );
    _bstr_t GetSynonymById (
        double dSynonymId );
    HRESULT RemovePhaseByKey (
        double dKey );
    _bstr_t GetTrialPlanDescription ( );
    void PutTrialPlanDescription (
        _bstr_t pVal );
    IPhasePtr GetFirstPhase ( );
    double GetEarliestOffsetInMinutes (
        struct IPhase * pPhase );
    long HasProtocolPhase ( );
    IUnknownPtr GetComponentGroupReferenceContentPtr (
        IDispatch * pComponent );
    double GetRegimenElementId ( );
    void PutRegimenElementId (
        double pVal );
    EPlanVersionStatus GetVersionStatus ( );
    void PutVersionStatus (
        EPlanVersionStatus pVal );
    _bstr_t GetUUID ( );
    void PutUUID (
        _bstr_t pVal );
    double GetCustomizedPlanId ( );
    void PutCustomizedPlanId (
        double pVal );
    HRESULT GetSchedulableComponentsIdsByPhaseId (
        double dPhaseId,
        LONG_PTR lComponentsIdsVector );
    HRESULT GetSchedulablePhasesIdsByComponentId (
        double dComponentId,
        LONG_PTR lPhasesIdsVector );
    HRESULT GetMultipleIncludedComponentsLinkedToOnePhase (
        LONG_PTR lComponentsByPhaseMap );
    IComponentPtr GetConflictingIncludedSchedulableComponent (
        struct IComponent * pIComponent );
    HRESULT SwitchCompPathRelationsIds (
        LONG_PTR lIdsMap );
    long DuplicateProblemDiagnosis (
        _bstr_t sCKI );
    _bstr_t GetPathwayCustomizationPlanName ( );
    void PutPathwayCustomizationPlanName (
        _bstr_t pVal );
    _bstr_t GetPathwayReferencePlanName ( );
    void PutPathwayReferencePlanName (
        _bstr_t pVal );
    int ClearSchedulablePhasesForComponent (
        IDispatch * pComponent );
    long IsAnIVSequence (
        IV_SEQUENCE_STATUS eSequenceStatus );
    HRESULT AddReview (
        struct IReview * pIReview );
    IReviewPtr GetReview (
        EPowerPlanReviewType powerPlanReviewType );
    IUnknownPtr GetReviewCollection ( );
    long GetRestrictedActionsBitmask ( );
    void PutRestrictedActionsBitmask (
        long lRestrictedActionsBitmask );
    long GetAllowProposal ( );
    void PutAllowProposal (
        long pAllowProposal );
    long GetOpenByDefaultInd ( );
    void PutOpenByDefaultInd (
        long pVal );
    IPhasePtr GetPhaseToOpenByDefault ( );
    double GetVersionPlanCatalogId ( );
    void PutVersionPlanCatalogId (
        double pVal );
    HRESULT AddAdhocSchedulingLink (
        double dActComponentId,
        double dTreatmentPeriodId );
    long IsPhaseLinkedToExcludedSchedulableComponents (
        IDispatch * pPhaseDispatch );
    HRESULT GetPhaseLinkedSchedulableComponents (
        double dPhaseId,
        LONG_PTR lLinkedSchedulableComponents );
    long IsComponentLinkedToSpecificPhaseEx (
        double dComponentId,
        double dPhaseId );
    _bstr_t GetProviderName ( );
    void PutProviderName (
        _bstr_t pVal );
    LONG_PTR GetProtocolReviewPhaseIds ( );
    long GetAllowSaveAsMyFavorite ( );
    void PutAllowSaveAsMyFavorite (
        long pSaveAsMyFavorite );
    LONG_PTR GetSchedulingLinkedPhaseIdsByComponentIdMap ( );
    long GetOverrideMRDOnPlanInd ( );
    void PutOverrideMRDOnPlanInd (
        long pOverrideMRDOnPlanInd );
    long DoesPlanHaveMultiplePhases ( );
    HRESULT GetLinkedPhaseList (
        LONG_PTR lLinkedPhaseList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlanCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanCatalogId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CrossEncntrInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossEncntrInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RefTextExist (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CommentExist (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CommentExist (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VersionNum (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionNum (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanType (
        /*[out,retval]*/ PLAN_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanType (
        /*[in]*/ PLAN_TYPE pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPhase (
        /*[in]*/ IDispatch * lpPhase ) = 0;
      virtual HRESULT __stdcall get_PhaseCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceContentPtr (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_NeedVersioning (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NeedVersioning (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ ACTION_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ ACTION_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_RelModified (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RelModified (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CommentTextId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CommentTextId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CommentUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CommentUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CommentModified (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CommentModified (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CommentRemoved (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CommentRemoved (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PlanId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PersonId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PersonId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_RemovePhase (
        /*[in]*/ struct IPhase * pIPhase ) = 0;
      virtual HRESULT __stdcall get_RemovedPhaseCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_CheckRefTextExist (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CheckRefTextExist (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddRemovedPhase (
        /*[in]*/ IDispatch * lpPhase ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IPlan * pPlan ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IPlan * pPlan,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindOrderComponent (
        /*[in]*/ LONG_PTR hPvOrderObj,
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall raw_FindComponentPhase (
        /*[in]*/ struct IComponent * pComponent,
        /*[out,retval]*/ struct IPhase * * pPhase ) = 0;
      virtual HRESULT __stdcall get_CatalogInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PlanTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMethodCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMethodCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlanTypeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanTypeDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanZone (
        /*[out,retval]*/ PLAN_ZONE * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanZone (
        /*[in]*/ PLAN_ZONE pVal ) = 0;
      virtual HRESULT __stdcall get_SortDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_SortDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_PlanClassCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanClassCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlanClassDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanClassDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanClassMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanClassMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMethodDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMethodDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMethodMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayMethodMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RefTextModified (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefTextModified (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PlanEvidenceReltnId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanEvidenceReltnId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NewEvidence (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NewEvidence (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BegEffectiveDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_BegEffectiveDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_EndEffectiveDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_EndEffectiveDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall raw_FindOrderComponentById (
        /*[in]*/ double orderId,
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall raw_FindComponentById (
        /*[in]*/ double compId,
        /*[out,retval]*/ struct IComponent * * ppComponent ) = 0;
      virtual HRESULT __stdcall get_RefOwnerPersonId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefOwnerPersonId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFacilityFlexing (
        /*[in]*/ VARIANT cv,
        /*[in]*/ VARIANT disp ) = 0;
      virtual HRESULT __stdcall get_FlexFacilityDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FlexingFacilityCodeAt (
        /*[in]*/ int idx,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_FlexingCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AllFacilityInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AllFacilityInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayDescription (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayDescription (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VirtualViewPosAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindZynxEvidenceLocatorByPhaseId (
        /*[in]*/ double id,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindZynxEvidenceLocatorByClinCat (
        /*[in]*/ double clinCatCd,
        /*[in]*/ double clinSubCatCd,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindZynxEvidenceLocatorByCompId (
        /*[in]*/ double id,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPwEvidenceReltn (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall get_FacilityDisplayAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddProblemDiagnosis (
        /*[in]*/ IDispatch * lpDisp,
        /*[out,retval]*/ long * pDup ) = 0;
      virtual HRESULT __stdcall raw_RemoveProblemDiagnosis (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get_ProblemDiagChanged (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProblemDiagChanged (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProblemDiagCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ProblemDiagDisplayAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ProblemDiagNomenIdAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ProblemDiagConceptCKIAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveReftextInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveReftextInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_FindZynxEvidenceLocatorByPhaseClinCat (
        /*[in]*/ double phaseId,
        /*[in]*/ double clinCatCd,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindZynxEvidenceLocatorByPhaseClinSubCat (
        /*[in]*/ double phaseId,
        /*[in]*/ double clinSubCatCd,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindReferenceManualByPhaseId (
        /*[in]*/ double phaseId,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PhaseReferenceContentPtr (
        /*[in]*/ double phaseId,
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPwEvidenceReltn (
        /*[in]*/ PLAN_EVIDENCE_LEVEL level,
        /*[in]*/ double dVal,
        /*[in]*/ double dClinCat,
        /*[in]*/ double dClinSubCat,
        /*[in]*/ BSTR sType,
        /*[in]*/ LONG_PTR lVal,
        /*[out,retval]*/ long * bFound ) = 0;
      virtual HRESULT __stdcall raw_GetPwEvidenceCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPwEvidenceAt (
        /*[in]*/ int Index,
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall raw_RemovePwEvidenceReltn (
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall raw_UpdatePwEvidenceReltn (
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall raw_CreatRefTextContentPtrs ( ) = 0;
      virtual HRESULT __stdcall get_SubPhaseInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPhaseInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HideFlexedCompInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HideFlexedCompInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCPGroupPtr (
        /*[in]*/ double dGroupNbr,
        /*[out,retval]*/ struct IGroup * * ppIGroup ) = 0;
      virtual HRESULT __stdcall raw_AddGroup (
        /*[in]*/ struct IGroup * pIGroup ) = 0;
      virtual HRESULT __stdcall raw_GetGroupCollection (
        /*[out,retval]*/ IDispatch * * pDisp ) = 0;
      virtual HRESULT __stdcall raw_GetGroupCount (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_RemoveGroup (
        /*[in]*/ struct IGroup * pGroup ) = 0;
      virtual HRESULT __stdcall get_UsingCycleNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UsingCycleNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CycleNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultViewMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultViewMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PropagateDiagInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PropagateDiagInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StandardCycleNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StandardCycleNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_OrigCycleNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OrigCycleNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChemoRelatedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChemoRelatedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChemoInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChemoInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderPromptInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderPromptInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CommunicationTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CommunicationTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UTCSortDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCSortDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall raw_BuildRTF (
        /*[out,retval]*/ BSTR * pPlanRTF ) = 0;
      virtual HRESULT __stdcall get_SuggestedPlan (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_SuggestedPlan (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_AllowCopyForwardInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowCopyForwardInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NewestVersion (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NewestVersion (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NewestVersionPathwayCatId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NewestVersionPathwayCatId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NewestVersionActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NewestVersionActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentLoaded (
        /*[out,retval]*/ COMP_LOADING_STATUS * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEventSetNamesByPhaseId (
        /*[in]*/ double dPhaseId,
        /*[in]*/ LONG_PTR lEventSetNames ) = 0;
      virtual HRESULT __stdcall raw_GetEventSetNamesByPhaseId (
        /*[in]*/ double dPhaseId,
        /*[out]*/ LONG_PTR * lEventSetNames ) = 0;
      virtual HRESULT __stdcall raw_PhaseHasEventSetNames (
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAutoInitiatePhase (
        /*[out,retval]*/ struct IPhase * * pPhase ) = 0;
      virtual HRESULT __stdcall raw_GetCarePlanPhase (
        /*[out,retval]*/ struct IPhase * * pPhase ) = 0;
      virtual HRESULT __stdcall raw_RemoveOldPwEvidenceReltnForCopyPlan (
        /*[in]*/ LONG_PTR lVal ) = 0;
      virtual HRESULT __stdcall get_PlanActionLoaded (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanActionLoaded (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CycleBeginNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleBeginNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CycleEndNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleEndNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CycleLabelCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleLabelCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CycleDisplayEndInd (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleDisplayEndInd (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_CycleLockEndInd (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleLockEndInd (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_CycleIncrementNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CycleIncrementNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_HasPhaseOffsets (
        /*[out,retval]*/ long * pHasPhaseOffsets ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllPhaseOffsets ( ) = 0;
      virtual HRESULT __stdcall get_DefaultVisitTypeFlag (
        /*[out,retval]*/ DEFAULT_VISIT_TYPE_FLAG * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultVisitTypeFlag (
        /*[in]*/ DEFAULT_VISIT_TYPE_FLAG pVal ) = 0;
      virtual HRESULT __stdcall get_PromptOnSelectionInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PromptOnSelectionInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPhaseByKey (
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ struct IPhase * * pPhase ) = 0;
      virtual HRESULT __stdcall raw_GetSchedulablePhasesByComponentId (
        /*[in]*/ double dComponentId,
        /*[in]*/ LONG_PTR larrPhases ) = 0;
      virtual HRESULT __stdcall raw_GetNonSchedulablePhases (
        /*[in]*/ LONG_PTR larrPhases ) = 0;
      virtual HRESULT __stdcall raw_UpdateSchedulablePhasesForComponent (
        /*[in]*/ IDispatch * pComponent,
        /*[in]*/ LONG_PTR larrPhases ) = 0;
      virtual HRESULT __stdcall raw_RemoveCompPathwayRelationsByPhase (
        /*[in]*/ IDispatch * pPhase ) = 0;
      virtual HRESULT __stdcall raw_GetCompPathwayRelations (
        /*[in]*/ LONG_PTR larrCompPathwayRelations ) = 0;
      virtual HRESULT __stdcall raw_SetCompPathwayRelations (
        /*[in]*/ LONG_PTR larrCompPathwayRelations ) = 0;
      virtual HRESULT __stdcall get_ExpectedCycleNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpectedCycleNbr (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_HasOrderingDefaults (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddCompPathwayRelations (
        /*[in]*/ LONG_PTR larrCompPathwayRelations ) = 0;
      virtual HRESULT __stdcall raw_GetSchedulableComponentByPhaseId (
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ struct IComponent * * pComponent ) = 0;
      virtual HRESULT __stdcall raw_GetSequencedPhaseArray (
        /*[in]*/ LONG_PTR larrPhases ) = 0;
      virtual HRESULT __stdcall raw_GetFakeInitiatePendingPhases (
        /*[in]*/ LONG_PTR larrPhases ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseSchedulable (
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsComponentSchedulable (
        /*[in]*/ double dComponentId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetEarliestSchedulablePhaseByComponentId (
        /*[in]*/ double dComponentId,
        /*[out,retval]*/ struct IPhase * * pIPhase ) = 0;
      virtual HRESULT __stdcall raw_IsComponentLinkedToSpecificPhase (
        /*[in]*/ double dComponentId,
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSynonyms (
        /*[in]*/ LONG_PTR larrSynonyms ) = 0;
      virtual HRESULT __stdcall raw_SetSynonyms (
        /*[in]*/ LONG_PTR larrSynonyms ) = 0;
      virtual HRESULT __stdcall get_PrimarySynonymId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PrimarySynonymId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PrimarySynonymModified (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PrimarySynonymModified (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentSynonym (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentSynonym (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSynonymById (
        /*[in]*/ double dSynonymId,
        /*[out,retval]*/ BSTR * sSynonym ) = 0;
      virtual HRESULT __stdcall raw_RemovePhaseByKey (
        /*[in]*/ double dKey ) = 0;
      virtual HRESULT __stdcall get_TrialPlanDescription (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TrialPlanDescription (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFirstPhase (
        /*[out,retval]*/ struct IPhase * * pFirstPhase ) = 0;
      virtual HRESULT __stdcall raw_GetEarliestOffsetInMinutes (
        /*[in]*/ struct IPhase * pPhase,
        /*[out,retval]*/ double * pEarliestOffset ) = 0;
      virtual HRESULT __stdcall raw_HasProtocolPhase (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentGroupReferenceContentPtr (
        /*[in]*/ IDispatch * pComponent,
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_RegimenElementId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RegimenElementId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VersionStatus (
        /*[out,retval]*/ EPlanVersionStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionStatus (
        /*[in]*/ EPlanVersionStatus pVal ) = 0;
      virtual HRESULT __stdcall get_UUID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UUID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CustomizedPlanId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomizedPlanId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSchedulableComponentsIdsByPhaseId (
        /*[in]*/ double dPhaseId,
        /*[in]*/ LONG_PTR lComponentsIdsVector ) = 0;
      virtual HRESULT __stdcall raw_GetSchedulablePhasesIdsByComponentId (
        /*[in]*/ double dComponentId,
        /*[in]*/ LONG_PTR lPhasesIdsVector ) = 0;
      virtual HRESULT __stdcall raw_GetMultipleIncludedComponentsLinkedToOnePhase (
        /*[in]*/ LONG_PTR lComponentsByPhaseMap ) = 0;
      virtual HRESULT __stdcall raw_GetConflictingIncludedSchedulableComponent (
        /*[in]*/ struct IComponent * pIComponent,
        /*[out,retval]*/ struct IComponent * * ppIComponent ) = 0;
      virtual HRESULT __stdcall raw_SwitchCompPathRelationsIds (
        /*[in]*/ LONG_PTR lIdsMap ) = 0;
      virtual HRESULT __stdcall raw_DuplicateProblemDiagnosis (
        /*[in]*/ BSTR sCKI,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayCustomizationPlanName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayCustomizationPlanName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayReferencePlanName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayReferencePlanName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSchedulablePhasesForComponent (
        /*[in]*/ IDispatch * pComponent,
        /*[out,retval]*/ int * pNumberOfClearedSchedulablePhases ) = 0;
      virtual HRESULT __stdcall raw_IsAnIVSequence (
        /*[in]*/ IV_SEQUENCE_STATUS eSequenceStatus,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddReview (
        /*[in]*/ struct IReview * pIReview ) = 0;
      virtual HRESULT __stdcall raw_GetReview (
        /*[in]*/ EPowerPlanReviewType powerPlanReviewType,
        /*[out,retval]*/ struct IReview * * ppIReview ) = 0;
      virtual HRESULT __stdcall raw_GetReviewCollection (
        /*[out,retval]*/ IUnknown * * pIReviewCollection ) = 0;
      virtual HRESULT __stdcall get_RestrictedActionsBitmask (
        /*[out,retval]*/ long * lRestrictedActionsBitmask ) = 0;
      virtual HRESULT __stdcall put_RestrictedActionsBitmask (
        /*[in]*/ long lRestrictedActionsBitmask ) = 0;
      virtual HRESULT __stdcall get_AllowProposal (
        /*[out,retval]*/ long * pAllowProposal ) = 0;
      virtual HRESULT __stdcall put_AllowProposal (
        /*[in]*/ long pAllowProposal ) = 0;
      virtual HRESULT __stdcall get_OpenByDefaultInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OpenByDefaultInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPhaseToOpenByDefault (
        /*[out,retval]*/ struct IPhase * * pIPhase ) = 0;
      virtual HRESULT __stdcall get_VersionPlanCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionPlanCatalogId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AddAdhocSchedulingLink (
        /*[in]*/ double dActComponentId,
        /*[in]*/ double dTreatmentPeriodId ) = 0;
      virtual HRESULT __stdcall raw_IsPhaseLinkedToExcludedSchedulableComponents (
        /*[in]*/ IDispatch * pPhaseDispatch,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPhaseLinkedSchedulableComponents (
        /*[in]*/ double dPhaseId,
        /*[in]*/ LONG_PTR lLinkedSchedulableComponents ) = 0;
      virtual HRESULT __stdcall raw_IsComponentLinkedToSpecificPhaseEx (
        /*[in]*/ double dComponentId,
        /*[in]*/ double dPhaseId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProviderName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetProtocolReviewPhaseIds (
        /*[out,retval]*/ LONG_PTR * plPhaseIds ) = 0;
      virtual HRESULT __stdcall get_AllowSaveAsMyFavorite (
        /*[out,retval]*/ long * pSaveAsMyFavorite ) = 0;
      virtual HRESULT __stdcall put_AllowSaveAsMyFavorite (
        /*[in]*/ long pSaveAsMyFavorite ) = 0;
      virtual HRESULT __stdcall raw_GetSchedulingLinkedPhaseIdsByComponentIdMap (
        /*[out,retval]*/ LONG_PTR * plPhaseIdsByComponentIdMap ) = 0;
      virtual HRESULT __stdcall get_OverrideMRDOnPlanInd (
        /*[out,retval]*/ long * pOverrideMRDOnPlanInd ) = 0;
      virtual HRESULT __stdcall put_OverrideMRDOnPlanInd (
        /*[in]*/ long pOverrideMRDOnPlanInd ) = 0;
      virtual HRESULT __stdcall raw_DoesPlanHaveMultiplePhases (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedPhaseList (
        /*[in]*/ LONG_PTR lLinkedPhaseList ) = 0;
};

struct __declspec(uuid("fe4e48d9-bfe5-453a-b725-34161a397962"))
IPlanLookUp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlanCatalogId))
    double PlanCatalogId[];
    __declspec(property(get=GetPlanDescription))
    _bstr_t PlanDescription[];
    __declspec(property(get=GetPlanVersionNum))
    _bstr_t PlanVersionNum[];
    __declspec(property(get=GetActiveInd))
    long ActiveInd[];
    __declspec(property(get=GetOldVerCatalogId))
    double OldVerCatalogId[][];
    __declspec(property(get=GetOldVerDescription))
    _bstr_t OldVerDescription[][];
    __declspec(property(get=GetOldVersionNum))
    _bstr_t OldVersionNum[][];
    __declspec(property(get=GetOldVerActiveInd))
    long OldVerActiveInd[][];
    __declspec(property(get=GetPlanEvidenceReltnId))
    double PlanEvidenceReltnId[];
    __declspec(property(get=GetPlanDisplayDescription))
    _bstr_t PlanDisplayDescription[];
    __declspec(property(get=GetPlanEvidenceLocator))
    _bstr_t PlanEvidenceLocator[];
    __declspec(property(get=GetFacilityFlexingInd,put=PutFacilityFlexingInd))
    short FacilityFlexingInd;
    __declspec(property(get=GetPrsnlPlanDescription))
    _bstr_t PrsnlPlanDescription[];
    __declspec(property(get=GetPowerTrialName))
    _bstr_t PowerTrialName[];
    __declspec(property(get=GetVersionStatus))
    EPlanVersionStatus VersionStatus[];
    __declspec(property(get=GetOldVersionStatus))
    EPlanVersionStatus OldVersionStatus[][];
    __declspec(property(get=GetVirtualViewOffset,put=PutVirtualViewOffset))
    long VirtualViewOffset;
    __declspec(property(get=GetfacilityCd,put=PutfacilityCd))
    double facilityCd;
    __declspec(property(get=GetBeginEffectiveDate))
    DATE BeginEffectiveDate[];
    __declspec(property(get=GetEndEffectiveDate))
    DATE EndEffectiveDate[];
    __declspec(property(get=GetPhaseCatalogId))
    double PhaseCatalogId[][];
    __declspec(property(get=GetPhaseDescription))
    _bstr_t PhaseDescription[][];
    __declspec(property(get=GetUpdtCnt))
    long UpdtCnt[];
    __declspec(property(get=GetAllFacilityAccessInd))
    long AllFacilityAccessInd[];
    __declspec(property(get=GetFacilityAccessList))
    _variant_t FacilityAccessList[];
    __declspec(property(get=GetSkipSubPhaseInd,put=PutSkipSubPhaseInd))
    long SkipSubPhaseInd;

    //
    // Wrapper methods for error-handling
    //

    int StartSearch (
        _bstr_t sSearchString );
    double GetPlanCatalogId (
        int Index );
    _bstr_t GetPlanDescription (
        int Index );
    _bstr_t GetPlanVersionNum (
        int Index );
    long GetActiveInd (
        int Index );
    int GetOldVersionCnt (
        int Index );
    double GetOldVerCatalogId (
        int Index,
        int verIndex );
    _bstr_t GetOldVerDescription (
        int Index,
        int verIndex );
    _bstr_t GetOldVersionNum (
        int Index,
        int verIndex );
    long GetOldVerActiveInd (
        int Index,
        int verIndex );
    IUnknownPtr SelectPlan (
        int Index,
        int verIndex );
    HRESULT LoadPlanDetails (
        struct IPlan * pPlan );
    double GetPlanEvidenceReltnId (
        int Index );
    HRESULT LoadPhaseDetails (
        struct IPhase * pPhase );
    int SearchPlansByFacility (
        _bstr_t sSearch,
        double facilityCd );
    _bstr_t GetPlanDisplayDescription (
        int Index );
    _bstr_t GetPlanEvidenceLocator (
        int Index );
    IUnknownPtr SelectPrsnlPlan (
        int Index );
    _bstr_t GetPrsnlPlanDescription (
        int Index );
    HRESULT SearchProblemDiagnosesPlans (
        long bProblem,
        long bDiagnoses,
        double dPatientId,
        double dEncounterId );
    OUTCOME_ACT_STATUS SynchProblemDxPlans ( );
    LONG_PTR GetPlanCountByNomenclatureId (
        double nomenclatureId );
    HRESULT GetNomenclaturePlanArray (
        double nomenclatureId,
        VARIANT * pPlanArray );
    IUnknownPtr SelectPlanByCatId (
        double pathwayCatalogId );
    long GetVirtualViewOffset ( );
    void PutVirtualViewOffset (
        long pVal );
    double GetfacilityCd ( );
    void PutfacilityCd (
        double pVal );
    int SearchAllPlans (
        _bstr_t sSearchString );
    IPlanPtr CopyPlan (
        int Index,
        int verIndex );
    int SearchPlanPhase (
        _bstr_t sSearchString );
    double GetPhaseCatalogId (
        int planIdx,
        int phaseIdx );
    _bstr_t GetPhaseDescription (
        int planIdx,
        int phaseIdx );
    long GetPhaseCount (
        int planIdx );
    IDispatchPtr CopyComponents (
        struct IPlan * pPlan,
        struct IPhase * pPhase );
    int FindParentIndex (
        double dPhaseCatId );
    int SearchSubPhasePlan (
        _bstr_t sSearchString );
    long GetAllFacilityAccessInd (
        int Index );
    _variant_t GetFacilityAccessList (
        int Index );
    long GetSkipSubPhaseInd ( );
    void PutSkipSubPhaseInd (
        long pVal );
    HRESULT LoadPlanPhase (
        struct IPlan * pPlan,
        struct IPhase * pPhase );
    HRESULT QuitAllJobs ( );
    HRESULT GetActivePlanCycles (
        struct IPlan * pPlan );
    int GetLatestCycleIndex ( );
    long GetPlanCycleCount ( );
    _bstr_t GetLatestCyclePrsnl ( );
    DATE GetLatestCycleOrderDtTm ( );
    long CheckForDuplicateCycle (
        long lCycleNbr );
    long GetLatestCycleNbr ( );
    LONG_PTR GetSearchResult (
        int Index );
    long GetSearchResultCount ( );
    HRESULT GetPrsnlPlanSearchResult (
        int Index,
        LONG_PTR * pResult );
    _variant_t GetProbDxNomenIds ( );
    IDispatchPtr GetUTCLatestCycleOrderDtTm ( );
    int SearchPlansByFacilityEx2 (
        _bstr_t sSearch,
        unsigned int searchType,
        double facilityCd,
        int maxResults,
        double dPatientId,
        double dEncounterId,
        long bSearchCustomizedPlans );
    int SearchPrsnlPlansEx (
        double dUserId,
        double dPatientId,
        double dEncounterId );
    long SearchPreviousTreatments (
        double dPatientId,
        double dEncounterId,
        double dFacilityCd );
    HRESULT SearchProbDxPlansEx (
        long bProblems,
        long bDiagnoses,
        long bPrevTreatments,
        double dPatientId,
        double dEncounterId );
    short GetFacilityFlexingInd ( );
    void PutFacilityFlexingInd (
        short pVal );
    IUnknownPtr SelectPlanByCatIdWithPatientInfo (
        double dPathwayCatalogId,
        double dPersonId,
        double dEncounterId );
    long GetLatestCycleExpectedNbr ( );
    double GetLatestCycleLabelCd ( );
    _bstr_t GetLatestCycleProviderName ( );
    _bstr_t GetLatestCycleCommunicationType ( );
    _bstr_t GetLatestCycleGroupDesc ( );
    _bstr_t GetPowerTrialName (
        int iIndex );
    int StartSearchWithTrials (
        _bstr_t sSearchString );
    EPlanVersionStatus GetVersionStatus (
        int iIndex );
    EPlanVersionStatus GetOldVersionStatus (
        int iIndex,
        int iVersionIndex );
    long SearchInTestPlans (
        double dFacilityCd );
    LONG_PTR GetInTestPlanSearchResult (
        int Index );
    int LoadPlanVersions (
        double dPlanCatalogId );
    DATE GetBeginEffectiveDate (
        int iIndex );
    DATE GetEndEffectiveDate (
        int iIndex );
    long GetUpdtCnt (
        int iIndex );
    IPlanPtr LoadCatalogPlanWithCustomization (
        double dPlanCatalogId,
        double dCustomizedPlanId,
        double dLocationCd,
        long bLoadForPlanTool,
        long bPrefetchActivityIds,
        long bReplaceCatalogIds,
        LONG_PTR lsErrorReport );
    IPlanPtr LoadCatalogPlanFromSearchResult (
        int iIndex,
        int iVersionIndex,
        long bReplaceCatalogIds );
    LONG_PTR QueryCustomizedPlans (
        LONG_PTR lQueryCustomizedPlansCriteria );
    int SearchPersonalizedPlans (
        double dPatientId,
        double dEncounterId );
    LONG_PTR GetPersonalizedPlanSearchResult (
        int iIndex );
    IPlanPtr LoadCatalogPlanUsingPatientDataWithCustomization (
        double dPlanCatalogId,
        double dCustomizedPlanId,
        double dLocationCd,
        long bLoadForPlanTool,
        long bPrefetchActivityIds,
        long bReplaceCatalogIds,
        double dPatientId,
        double dEncounterId,
        double dProviderPatientRelationCd,
        LONG_PTR lsErrorReport );
    IPlanPtr LoadCatalogPlan (
        LONG_PTR lQueryReferencePowerPlansCriteria );
    long ReplicatePhaseAndAddToPlan (
        struct IPhase * pPhase,
        struct IPlan * pPlan,
        double dPatientId,
        double dEncounterId );
    long LoadSubPhaseDetailsAndAddToPlan (
        struct IPhase * pSubPhase,
        struct IPlan * pPlan,
        double dPatientId,
        double dEncounterId );
    int SearchPersonalizedPlansWithString (
        _bstr_t searchStr,
        int iSearchStringType,
        double dPatientId,
        double dEncounterId );
    HRESULT SetProblemsList (
        IDispatch * pDispatch );
    HRESULT SetDiagnosesList (
        IDispatch * pDispatch );
    long SearchPreviousTreatmentsWithoutLimit (
        double dPatientId,
        double dEncounterId,
        double dFacilityCd );
    LONG_PTR GetComponentIdMap ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartSearch (
        /*[in]*/ BSTR sSearchString,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_PlanCatalogId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PlanDescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PlanVersionNum (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveInd (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOldVersionCnt (
        /*[in]*/ int Index,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_OldVerCatalogId (
        /*[in]*/ int Index,
        /*[in]*/ int verIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_OldVerDescription (
        /*[in]*/ int Index,
        /*[in]*/ int verIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OldVersionNum (
        /*[in]*/ int Index,
        /*[in]*/ int verIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OldVerActiveInd (
        /*[in]*/ int Index,
        /*[in]*/ int verIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectPlan (
        /*[in]*/ int Index,
        /*[in]*/ int verIndex,
        /*[out,retval]*/ IUnknown * * ppIPlan ) = 0;
      virtual HRESULT __stdcall raw_LoadPlanDetails (
        /*[in]*/ struct IPlan * pPlan ) = 0;
      virtual HRESULT __stdcall get_PlanEvidenceReltnId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadPhaseDetails (
        /*[in]*/ struct IPhase * pPhase ) = 0;
      virtual HRESULT __stdcall raw_SearchPlansByFacility (
        /*[in]*/ BSTR sSearch,
        /*[in]*/ double facilityCd,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_PlanDisplayDescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PlanEvidenceLocator (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectPrsnlPlan (
        /*[in]*/ int Index,
        /*[out,retval]*/ IUnknown * * ppIPlan ) = 0;
      virtual HRESULT __stdcall get_PrsnlPlanDescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchProblemDiagnosesPlans (
        /*[in]*/ long bProblem,
        /*[in]*/ long bDiagnoses,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId ) = 0;
      virtual HRESULT __stdcall raw_SynchProblemDxPlans (
        /*[out,retval]*/ OUTCOME_ACT_STATUS * pStatus ) = 0;
      virtual HRESULT __stdcall raw_GetPlanCountByNomenclatureId (
        /*[in]*/ double nomenclatureId,
        /*[out,retval]*/ LONG_PTR * pCount ) = 0;
      virtual HRESULT __stdcall raw_GetNomenclaturePlanArray (
        /*[in]*/ double nomenclatureId,
        /*[in]*/ VARIANT * pPlanArray ) = 0;
      virtual HRESULT __stdcall raw_SelectPlanByCatId (
        /*[in]*/ double pathwayCatalogId,
        /*[out,retval]*/ IUnknown * * ppIPlan ) = 0;
      virtual HRESULT __stdcall get_VirtualViewOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VirtualViewOffset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_facilityCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_facilityCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchAllPlans (
        /*[in]*/ BSTR sSearchString,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_CopyPlan (
        /*[in]*/ int Index,
        /*[in]*/ int verIndex,
        /*[out,retval]*/ struct IPlan * * ppPlan ) = 0;
      virtual HRESULT __stdcall raw_SearchPlanPhase (
        /*[in]*/ BSTR sSearchString,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_PhaseCatalogId (
        /*[in]*/ int planIdx,
        /*[in]*/ int phaseIdx,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PhaseDescription (
        /*[in]*/ int planIdx,
        /*[in]*/ int phaseIdx,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPhaseCount (
        /*[in]*/ int planIdx,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyComponents (
        /*[in]*/ struct IPlan * pPlan,
        /*[in]*/ struct IPhase * pPhase,
        /*[out,retval]*/ IDispatch * * pDisp ) = 0;
      virtual HRESULT __stdcall raw_FindParentIndex (
        /*[in]*/ double dPhaseCatId,
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchSubPhasePlan (
        /*[in]*/ BSTR sSearchString,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_AllFacilityAccessInd (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FacilityAccessList (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_SkipSubPhaseInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SkipSubPhaseInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadPlanPhase (
        /*[in]*/ struct IPlan * pPlan,
        /*[in]*/ struct IPhase * pPhase ) = 0;
      virtual HRESULT __stdcall raw_QuitAllJobs ( ) = 0;
      virtual HRESULT __stdcall raw_GetActivePlanCycles (
        /*[in]*/ struct IPlan * pPlan ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleIndex (
        /*[out,retval]*/ int * pIndex ) = 0;
      virtual HRESULT __stdcall raw_GetPlanCycleCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCyclePrsnl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleOrderDtTm (
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall raw_CheckForDuplicateCycle (
        /*[in]*/ long lCycleNbr,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSearchResult (
        /*[in]*/ int Index,
        /*[out,retval]*/ LONG_PTR * pResult ) = 0;
      virtual HRESULT __stdcall raw_GetSearchResultCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_GetPrsnlPlanSearchResult (
        /*[in]*/ int Index,
        /*[out]*/ LONG_PTR * pResult ) = 0;
      virtual HRESULT __stdcall raw_GetProbDxNomenIds (
        /*[out,retval]*/ VARIANT * nomenIdArr ) = 0;
      virtual HRESULT __stdcall raw_GetUTCLatestCycleOrderDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchPlansByFacilityEx2 (
        /*[in]*/ BSTR sSearch,
        /*[in]*/ unsigned int searchType,
        /*[in]*/ double facilityCd,
        /*[in]*/ int maxResults,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[in]*/ long bSearchCustomizedPlans,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_SearchPrsnlPlansEx (
        /*[in]*/ double dUserId,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_SearchPreviousTreatments (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[in]*/ double dFacilityCd,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_SearchProbDxPlansEx (
        /*[in]*/ long bProblems,
        /*[in]*/ long bDiagnoses,
        /*[in]*/ long bPrevTreatments,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId ) = 0;
      virtual HRESULT __stdcall get_FacilityFlexingInd (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_FacilityFlexingInd (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectPlanByCatIdWithPatientInfo (
        /*[in]*/ double dPathwayCatalogId,
        /*[in]*/ double dPersonId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ IUnknown * * ppIPlan ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleExpectedNbr (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleLabelCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleProviderName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleCommunicationType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestCycleGroupDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PowerTrialName (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ BSTR * pPowerTrialName ) = 0;
      virtual HRESULT __stdcall raw_StartSearchWithTrials (
        /*[in]*/ BSTR sSearchString,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_VersionStatus (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ EPlanVersionStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_OldVersionStatus (
        /*[in]*/ int iIndex,
        /*[in]*/ int iVersionIndex,
        /*[out,retval]*/ EPlanVersionStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchInTestPlans (
        /*[in]*/ double dFacilityCd,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_GetInTestPlanSearchResult (
        /*[in]*/ int Index,
        /*[out,retval]*/ LONG_PTR * pResult ) = 0;
      virtual HRESULT __stdcall raw_LoadPlanVersions (
        /*[in]*/ double dPlanCatalogId,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get_BeginEffectiveDate (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall get_EndEffectiveDate (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ long * pUpdtCnt ) = 0;
      virtual HRESULT __stdcall raw_LoadCatalogPlanWithCustomization (
        /*[in]*/ double dPlanCatalogId,
        /*[in]*/ double dCustomizedPlanId,
        /*[in]*/ double dLocationCd,
        /*[in]*/ long bLoadForPlanTool,
        /*[in]*/ long bPrefetchActivityIds,
        /*[in]*/ long bReplaceCatalogIds,
        /*[in]*/ LONG_PTR lsErrorReport,
        /*[out,retval]*/ struct IPlan * * ppPlan ) = 0;
      virtual HRESULT __stdcall raw_LoadCatalogPlanFromSearchResult (
        /*[in]*/ int iIndex,
        /*[in]*/ int iVersionIndex,
        /*[in]*/ long bReplaceCatalogIds,
        /*[out,retval]*/ struct IPlan * * ppPlan ) = 0;
      virtual HRESULT __stdcall raw_QueryCustomizedPlans (
        /*[in]*/ LONG_PTR lQueryCustomizedPlansCriteria,
        /*[out,retval]*/ LONG_PTR * pCustomizedPlanPtrList ) = 0;
      virtual HRESULT __stdcall raw_SearchPersonalizedPlans (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_GetPersonalizedPlanSearchResult (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ LONG_PTR * pResult ) = 0;
      virtual HRESULT __stdcall raw_LoadCatalogPlanUsingPatientDataWithCustomization (
        /*[in]*/ double dPlanCatalogId,
        /*[in]*/ double dCustomizedPlanId,
        /*[in]*/ double dLocationCd,
        /*[in]*/ long bLoadForPlanTool,
        /*[in]*/ long bPrefetchActivityIds,
        /*[in]*/ long bReplaceCatalogIds,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[in]*/ double dProviderPatientRelationCd,
        /*[in]*/ LONG_PTR lsErrorReport,
        /*[out,retval]*/ struct IPlan * * ppPlan ) = 0;
      virtual HRESULT __stdcall raw_LoadCatalogPlan (
        /*[in]*/ LONG_PTR lQueryReferencePowerPlansCriteria,
        /*[out,retval]*/ struct IPlan * * ppPlan ) = 0;
      virtual HRESULT __stdcall raw_ReplicatePhaseAndAddToPlan (
        /*[in]*/ struct IPhase * pPhase,
        /*[in]*/ struct IPlan * pPlan,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pResult ) = 0;
      virtual HRESULT __stdcall raw_LoadSubPhaseDetailsAndAddToPlan (
        /*[in]*/ struct IPhase * pSubPhase,
        /*[in]*/ struct IPlan * pPlan,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pResult ) = 0;
      virtual HRESULT __stdcall raw_SearchPersonalizedPlansWithString (
        /*[in]*/ BSTR searchStr,
        /*[in]*/ int iSearchStringType,
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_SetProblemsList (
        /*[in]*/ IDispatch * pDispatch ) = 0;
      virtual HRESULT __stdcall raw_SetDiagnosesList (
        /*[in]*/ IDispatch * pDispatch ) = 0;
      virtual HRESULT __stdcall raw_SearchPreviousTreatmentsWithoutLimit (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[in]*/ double dFacilityCd,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_GetComponentIdMap (
        /*[out,retval]*/ LONG_PTR * pCompIdMap ) = 0;
};

struct __declspec(uuid("d6fd9c03-4e96-483f-93b3-0e876399eeff"))
Plan;
    // [ default ] interface IPlan

struct __declspec(uuid("0bdfa94a-ecc6-4858-b356-483655e65d08"))
Phase;
    // interface IProVideObject
    // [ default ] interface IPhase
    // [ default, source ] interface IProVideObjectEvent

struct __declspec(uuid("41faebc3-1a90-11d3-968c-00c0e310724c"))
IProVideObjectEvent : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Locked ( );
    HRESULT Unlocked ( );
    HRESULT Changed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Locked ( ) = 0;
      virtual HRESULT __stdcall raw_Unlocked ( ) = 0;
      virtual HRESULT __stdcall raw_Changed ( ) = 0;
};

struct __declspec(uuid("227aa138-29cc-4590-9fd5-629dfa788b7c"))
Component;
    // interface IProVideObject
    // [ default ] interface IComponent
    // [ default, source ] interface IProVideObjectEvent

struct __declspec(uuid("c31a9c7b-df6f-44df-836c-e4ac122e95a3"))
OrderSentence;
    // interface IProVideObject
    // [ default ] interface IOrderSentence

struct __declspec(uuid("c91777d7-dd5d-4523-914e-128378e59c52"))
OrderLookUp;
    // [ default ] interface IOrderLookUp

struct __declspec(uuid("60130dd8-66eb-40b9-b992-62fe289a0807"))
IOrderLookUp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCatalogCd))
    double CatalogCd[];
    __declspec(property(get=GetMnemonic))
    _bstr_t Mnemonic[];
    __declspec(property(get=GetCatalogTypeCd))
    double CatalogTypeCd[];
    __declspec(property(get=GetSynonymId))
    double SynonymId[];
    __declspec(property(get=GetOrderTypeFlag))
    short OrderTypeFlag[];
    __declspec(property(put=PutCatTypeCd))
    double CatTypeCd;
    __declspec(property(put=PutActTypeCd))
    double ActTypeCd;
    __declspec(property(put=PutMnemonicTypeCd))
    double MnemonicTypeCd;
    __declspec(property(get=GetClinCategoryCd))
    double ClinCategoryCd[];
    __declspec(property(get=GetClinSubCategoryCd,put=PutClinSubCategoryCd))
    double ClinSubCategoryCd[];
    __declspec(property(get=GetChildCodeValue,put=PutChildCodeValue))
    double ChildCodeValue[][];
    __declspec(property(get=GetChildCodeDisplay,put=PutChildCodeDisplay))
    _bstr_t ChildCodeDisplay[][];
    __declspec(property(get=GetParentClinCatCd))
    double ParentClinCatCd[];
    __declspec(property(get=GetHasClinSubCat,put=PutHasClinSubCat))
    long HasClinSubCat[];
    __declspec(property(get=GetVirtualViewAt))
    _bstr_t VirtualViewAt[];
    __declspec(property(get=GetAllFacilityAccessInd))
    long AllFacilityAccessInd[];
    __declspec(property(get=GetFacilityAccessList))
    _variant_t FacilityAccessList[];
    __declspec(property(get=GetCSCatalogCd))
    double CSCatalogCd[];
    __declspec(property(get=GetCSMnemonic))
    _bstr_t CSMnemonic[];
    __declspec(property(get=GetCSComponentTypeCd))
    double CSComponentTypeCd[][];
    __declspec(property(get=GetCSComponentMnemonic))
    _bstr_t CSComponentMnemonic[][];
    __declspec(property(get=GetCSComponentClinCatCd,put=PutCSComponentClinCatCd))
    double CSComponentClinCatCd[][];
    __declspec(property(get=GetCSComponentOrdSentId))
    double CSComponentOrdSentId[][];
    __declspec(property(get=GetCSComponentOrdSentDisp))
    _bstr_t CSComponentOrdSentDisp[][];
    __declspec(property(get=GetCSComponentClinSubCatCd,put=PutCSComponentClinSubCatCd))
    double CSComponentClinSubCatCd[][];
    __declspec(property(get=GetCSComponentImported,put=PutCSComponentImported))
    long CSComponentImported[][];
    __declspec(property(get=GetCSComponentOrdTypeFlag))
    int CSComponentOrdTypeFlag[][];
    __declspec(property(get=GetCSComponentOutLabel,put=PutCSComponentOutLabel))
    _bstr_t CSComponentOutLabel[][];
    __declspec(property(get=GetCSRefText))
    _bstr_t CSRefText[];
    __declspec(property(get=GetOrderRxMask))
    long OrderRxMask[];
    __declspec(property(get=GetIntermittentInd))
    short IntermittentInd[];

    //
    // Wrapper methods for error-handling
    //

    long SearchOrderable (
        _bstr_t sSearch );
    double GetCatalogCd (
        int Index );
    _bstr_t GetMnemonic (
        int Index );
    double GetCatalogTypeCd (
        int Index );
    double GetSynonymId (
        int Index );
    short GetOrderTypeFlag (
        int Index );
    void PutCatTypeCd (
        double _arg1 );
    void PutActTypeCd (
        double _arg1 );
    void PutMnemonicTypeCd (
        double _arg1 );
    IUnknownPtr SelectOrderable (
        int Index );
    double GetClinCategoryCd (
        int Index );
    double GetClinSubCategoryCd (
        int Index );
    void PutClinSubCategoryCd (
        int Index,
        double pVal );
    long GetClinSubCatCode (
        const _variant_t & newVal );
    long GetChildCodeValueCount (
        int Index );
    double GetChildCodeValue (
        int parentIndex,
        int childIndex );
    void PutChildCodeValue (
        int parentIndex,
        int childIndex,
        double pVal );
    _bstr_t GetChildCodeDisplay (
        int parentIndex,
        int childIndex );
    void PutChildCodeDisplay (
        int parentIndex,
        int childIndex,
        _bstr_t pVal );
    double GetParentClinCatCd (
        int Index );
    long GetHasClinSubCat (
        long Index );
    void PutHasClinSubCat (
        long Index,
        long pVal );
    _bstr_t GetVirtualViewAt (
        int Index );
    long GetAllFacilityAccessInd (
        int Index );
    _variant_t GetFacilityAccessList (
        int Index );
    long SearchCareset (
        _bstr_t sSearch );
    double GetCSCatalogCd (
        int Index );
    _bstr_t GetCSMnemonic (
        int Index );
    long LoadCSComponents (
        int Index );
    double GetCSComponentTypeCd (
        int Index,
        int compIndex );
    _bstr_t GetCSComponentMnemonic (
        int Index,
        int compIndex );
    double GetCSComponentClinCatCd (
        int Index,
        int compIndex );
    void PutCSComponentClinCatCd (
        int Index,
        int compIndex,
        double pVal );
    double GetCSComponentOrdSentId (
        int Index,
        int compIndex );
    _bstr_t GetCSComponentOrdSentDisp (
        int Index,
        int compIndex );
    double GetCSComponentClinSubCatCd (
        int Index,
        int compIndex );
    void PutCSComponentClinSubCatCd (
        int Index,
        int compIndex,
        double pVal );
    long GetCSComponentImported (
        int Index,
        int compIndex );
    void PutCSComponentImported (
        int Index,
        int compIndex,
        long pVal );
    int GetCSComponentOrdTypeFlag (
        int Index,
        int compIndex );
    _bstr_t GetCSComponentOutLabel (
        int Index,
        int compIndex );
    void PutCSComponentOutLabel (
        int Index,
        int compIndex,
        _bstr_t pVal );
    IDispatchPtr SelectCSOrders (
        int Index );
    _bstr_t GetCSRefText (
        int Index );
    long SearchPrescription (
        _bstr_t sSearch );
    IUnknownPtr SelectPrescription (
        int Index );
    long GetOrderRxMask (
        int Index );
    short GetIntermittentInd (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SearchOrderable (
        /*[in]*/ BSTR sSearch,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_CatalogCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Mnemonic (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogTypeCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SynonymId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_OrderTypeFlag (
        /*[in]*/ int Index,
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_CatTypeCd (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_ActTypeCd (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_MnemonicTypeCd (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall raw_SelectOrderable (
        /*[in]*/ int Index,
        /*[out,retval]*/ IUnknown * * ppIComponent ) = 0;
      virtual HRESULT __stdcall get_ClinCategoryCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ClinSubCategoryCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinSubCategoryCd (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetClinSubCatCode (
        /*[in]*/ VARIANT newVal,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetChildCodeValueCount (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ChildCodeValue (
        /*[in]*/ int parentIndex,
        /*[in]*/ int childIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ChildCodeValue (
        /*[in]*/ int parentIndex,
        /*[in]*/ int childIndex,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ChildCodeDisplay (
        /*[in]*/ int parentIndex,
        /*[in]*/ int childIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChildCodeDisplay (
        /*[in]*/ int parentIndex,
        /*[in]*/ int childIndex,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ParentClinCatCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_HasClinSubCat (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HasClinSubCat (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VirtualViewAt (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AllFacilityAccessInd (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FacilityAccessList (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchCareset (
        /*[in]*/ BSTR sSearch,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_CSCatalogCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CSMnemonic (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadCSComponents (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_CSComponentTypeCd (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentMnemonic (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentClinCatCd (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CSComponentClinCatCd (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentOrdSentId (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentOrdSentDisp (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentClinSubCatCd (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CSComponentClinSubCatCd (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentImported (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CSComponentImported (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentOrdTypeFlag (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_CSComponentOutLabel (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CSComponentOutLabel (
        /*[in]*/ int Index,
        /*[in]*/ int compIndex,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectCSOrders (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * ppICompCol ) = 0;
      virtual HRESULT __stdcall get_CSRefText (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchPrescription (
        /*[in]*/ BSTR sSearch,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_SelectPrescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ IUnknown * * ppIComponent ) = 0;
      virtual HRESULT __stdcall get_OrderRxMask (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IntermittentInd (
        /*[in]*/ int Index,
        /*[out,retval]*/ short * pVal ) = 0;
};

struct __declspec(uuid("ffea43f1-366a-4de7-b1a9-9db56a46d972"))
IIngredient : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetMnemonic,put=PutMnemonic))
    _bstr_t Mnemonic;
    __declspec(property(get=GetSynonymId,put=PutSynonymId))
    double SynonymId;
    __declspec(property(get=GetOrderSentenceId,put=PutOrderSentenceId))
    double OrderSentenceId;
    __declspec(property(get=GetOrderSentenceDisplay,put=PutOrderSentenceDisplay))
    _bstr_t OrderSentenceDisplay;
    __declspec(property(get=GetOeFormatId,put=PutOeFormatId))
    double OeFormatId;
    __declspec(property(get=GetCatalogCd,put=PutCatalogCd))
    double CatalogCd;
    __declspec(property(get=GetSentCommentId,put=PutSentCommentId))
    double SentCommentId;
    __declspec(property(get=GetSentComment,put=PutSentComment))
    _bstr_t SentComment;
    __declspec(property(get=GetCompSeq,put=PutCompSeq))
    long CompSeq;
    __declspec(property(get=GetXMLDosageInformation,put=PutXMLDosageInformation))
    _bstr_t XMLDosageInformation;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMnemonic ( );
    void PutMnemonic (
        _bstr_t pVal );
    double GetSynonymId ( );
    void PutSynonymId (
        double pVal );
    double GetOrderSentenceId ( );
    void PutOrderSentenceId (
        double pVal );
    _bstr_t GetOrderSentenceDisplay ( );
    void PutOrderSentenceDisplay (
        _bstr_t pVal );
    double GetOeFormatId ( );
    void PutOeFormatId (
        double pVal );
    HRESULT Copy (
        struct IIngredient * pIIngredient );
    HRESULT IsEqual (
        struct IIngredient * pIIngre,
        long * pBool );
    double GetCatalogCd ( );
    void PutCatalogCd (
        double pVal );
    HRESULT RemoveOrderSentence ( );
    double GetSentCommentId ( );
    void PutSentCommentId (
        double pVal );
    _bstr_t GetSentComment ( );
    void PutSentComment (
        _bstr_t pVal );
    long GetCompSeq ( );
    void PutCompSeq (
        long pVal );
    HRESULT AddOrderSentence (
        struct IOrderSentence * pOrderSent );
    IOrderSentencePtr GetOrderSentencePtr ( );
    _bstr_t GetXMLDosageInformation ( );
    void PutXMLDosageInformation (
        _bstr_t pVal );
    long IsOrdDetailEqual (
        struct IIngredient * pIIngre );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mnemonic (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Mnemonic (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SynonymId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SynonymId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentenceId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentenceId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OrderSentenceDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OrderSentenceDisplay (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OeFormatId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OeFormatId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        struct IIngredient * pIIngredient ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        struct IIngredient * pIIngre,
        long * pBool ) = 0;
      virtual HRESULT __stdcall get_CatalogCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOrderSentence ( ) = 0;
      virtual HRESULT __stdcall get_SentCommentId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SentCommentId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SentComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SentComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CompSeq (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CompSeq (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOrderSentence (
        /*[in]*/ struct IOrderSentence * pOrderSent ) = 0;
      virtual HRESULT __stdcall raw_GetOrderSentencePtr (
        /*[out,retval]*/ struct IOrderSentence * * pOrderSent ) = 0;
      virtual HRESULT __stdcall get_XMLDosageInformation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_XMLDosageInformation (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_IsOrdDetailEqual (
        /*[in]*/ struct IIngredient * pIIngre,
        /*[out,retval]*/ long * pBool ) = 0;
};

struct __declspec(uuid("d95de9fd-42dd-445f-a411-8991c7fae16e"))
IVariance : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVarianceReltnId,put=PutVarianceReltnId))
    double VarianceReltnId;
    __declspec(property(get=GetParentEntityName,put=PutParentEntityName))
    _bstr_t ParentEntityName;
    __declspec(property(get=GetParentEntityId,put=PutParentEntityId))
    double ParentEntityId;
    __declspec(property(get=GetEventId,put=PutEventId))
    double EventId;
    __declspec(property(get=GetVarianceTypeCd,put=PutVarianceTypeCd))
    double VarianceTypeCd;
    __declspec(property(get=GetVarianceTypeDisp,put=PutVarianceTypeDisp))
    _bstr_t VarianceTypeDisp;
    __declspec(property(get=GetVarianceTypeMean,put=PutVarianceTypeMean))
    _bstr_t VarianceTypeMean;
    __declspec(property(get=GetActionCd,put=PutActionCd))
    double ActionCd;
    __declspec(property(get=GetActionDisp,put=PutActionDisp))
    _bstr_t ActionDisp;
    __declspec(property(get=GetActionMean,put=PutActionMean))
    _bstr_t ActionMean;
    __declspec(property(get=GetActionTextId,put=PutActionTextId))
    double ActionTextId;
    __declspec(property(get=GetActionText,put=PutActionText))
    _bstr_t ActionText;
    __declspec(property(get=GetReasonCd,put=PutReasonCd))
    double ReasonCd;
    __declspec(property(get=GetReasonDisp,put=PutReasonDisp))
    _bstr_t ReasonDisp;
    __declspec(property(get=GetReasonMean,put=PutReasonMean))
    _bstr_t ReasonMean;
    __declspec(property(get=GetReasonTextId,put=PutReasonTextId))
    double ReasonTextId;
    __declspec(property(get=GetReasonText,put=PutReasonText))
    _bstr_t ReasonText;
    __declspec(property(get=GetActiveInd,put=PutActiveInd))
    long ActiveInd;
    __declspec(property(get=GetActionType,put=PutActionType))
    ACTION_TYPE ActionType;
    __declspec(property(get=GetActionTextUpdtCnt,put=PutActionTextUpdtCnt))
    long ActionTextUpdtCnt;
    __declspec(property(get=GetReasonTextUpdtCnt,put=PutReasonTextUpdtCnt))
    long ReasonTextUpdtCnt;
    __declspec(property(get=GetVarianceUpdtCnt,put=PutVarianceUpdtCnt))
    long VarianceUpdtCnt;
    __declspec(property(put=PutKey))
    double Key;
    __declspec(property(get=GetNoteTextId,put=PutNoteTextId))
    double NoteTextId;
    __declspec(property(get=GetNoteText,put=PutNoteText))
    _bstr_t NoteText;
    __declspec(property(get=GetNoteTextUpdtCnt,put=PutNoteTextUpdtCnt))
    long NoteTextUpdtCnt;
    __declspec(property(get=GetPathwayId,put=PutPathwayId))
    double PathwayId;
    __declspec(property(get=GetDirty,put=PutDirty))
    long Dirty;
    __declspec(property(get=GetChartPrsnlId,put=PutChartPrsnlId))
    double ChartPrsnlId;
    __declspec(property(get=GetUnchartPrsnlId,put=PutUnchartPrsnlId))
    double UnchartPrsnlId;
    __declspec(property(get=GetChartDtTm,put=PutChartDtTm))
    DATE ChartDtTm;
    __declspec(property(get=GetUnchartDtTm,put=PutUnchartDtTm))
    DATE UnchartDtTm;
    __declspec(property(get=GetChartPrsnlName,put=PutChartPrsnlName))
    _bstr_t ChartPrsnlName;
    __declspec(property(get=GetUnchartPrsnlName,put=PutUnchartPrsnlName))
    _bstr_t UnchartPrsnlName;
    __declspec(property(get=GetUTCChartDtTm,put=PutUTCChartDtTm))
    IDispatchPtr UTCChartDtTm;
    __declspec(property(get=GetUTCUnchartDtTm,put=PutUTCUnchartDtTm))
    IDispatchPtr UTCUnchartDtTm;
    __declspec(property(get=GetOutcomeKey,put=PutOutcomeKey))
    double OutcomeKey;

    //
    // Wrapper methods for error-handling
    //

    long IsEqual (
        struct IVariance * pVar );
    HRESULT Copy (
        struct IVariance * pVar );
    double GetVarianceReltnId ( );
    void PutVarianceReltnId (
        double pVal );
    _bstr_t GetParentEntityName ( );
    void PutParentEntityName (
        _bstr_t pVal );
    double GetParentEntityId ( );
    void PutParentEntityId (
        double pVal );
    double GetEventId ( );
    void PutEventId (
        double pVal );
    double GetVarianceTypeCd ( );
    void PutVarianceTypeCd (
        double pVal );
    _bstr_t GetVarianceTypeDisp ( );
    void PutVarianceTypeDisp (
        _bstr_t pVal );
    _bstr_t GetVarianceTypeMean ( );
    void PutVarianceTypeMean (
        _bstr_t pVal );
    double GetActionCd ( );
    void PutActionCd (
        double pVal );
    _bstr_t GetActionDisp ( );
    void PutActionDisp (
        _bstr_t pVal );
    _bstr_t GetActionMean ( );
    void PutActionMean (
        _bstr_t pVal );
    double GetActionTextId ( );
    void PutActionTextId (
        double pVal );
    _bstr_t GetActionText ( );
    void PutActionText (
        _bstr_t pVal );
    double GetReasonCd ( );
    void PutReasonCd (
        double pVal );
    _bstr_t GetReasonDisp ( );
    void PutReasonDisp (
        _bstr_t pVal );
    _bstr_t GetReasonMean ( );
    void PutReasonMean (
        _bstr_t pVal );
    double GetReasonTextId ( );
    void PutReasonTextId (
        double pVal );
    _bstr_t GetReasonText ( );
    void PutReasonText (
        _bstr_t pVal );
    long GetActiveInd ( );
    void PutActiveInd (
        long pVal );
    ACTION_TYPE GetActionType ( );
    void PutActionType (
        ACTION_TYPE pVal );
    long GetActionTextUpdtCnt ( );
    void PutActionTextUpdtCnt (
        long pVal );
    long GetReasonTextUpdtCnt ( );
    void PutReasonTextUpdtCnt (
        long pVal );
    long GetVarianceUpdtCnt ( );
    void PutVarianceUpdtCnt (
        long pVal );
    void PutKey (
        double _arg1 );
    double GetNoteTextId ( );
    void PutNoteTextId (
        double pVal );
    _bstr_t GetNoteText ( );
    void PutNoteText (
        _bstr_t pVal );
    long GetNoteTextUpdtCnt ( );
    void PutNoteTextUpdtCnt (
        long pVal );
    double GetPathwayId ( );
    void PutPathwayId (
        double pVal );
    long GetDirty ( );
    void PutDirty (
        long pVal );
    double GetChartPrsnlId ( );
    void PutChartPrsnlId (
        double pVal );
    double GetUnchartPrsnlId ( );
    void PutUnchartPrsnlId (
        double pVal );
    DATE GetChartDtTm ( );
    void PutChartDtTm (
        DATE pVal );
    DATE GetUnchartDtTm ( );
    void PutUnchartDtTm (
        DATE pVal );
    _bstr_t GetChartPrsnlName ( );
    void PutChartPrsnlName (
        _bstr_t pVal );
    _bstr_t GetUnchartPrsnlName ( );
    void PutUnchartPrsnlName (
        _bstr_t pVal );
    IDispatchPtr GetUTCChartDtTm ( );
    void PutUTCChartDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCUnchartDtTm ( );
    void PutUTCUnchartDtTm (
        IDispatch * pVal );
    double GetOutcomeKey ( );
    void PutOutcomeKey (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IVariance * pVar,
        /*[out,retval]*/ long * pBool ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IVariance * pVar ) = 0;
      virtual HRESULT __stdcall get_VarianceReltnId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VarianceReltnId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParentEntityName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentEntityName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ParentEntityId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentEntityId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EventId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VarianceTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VarianceTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VarianceTypeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VarianceTypeDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VarianceTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VarianceTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionTextId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionTextId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReasonCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReasonCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReasonDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReasonDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReasonMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReasonMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReasonTextId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReasonTextId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReasonText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReasonText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ ACTION_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ ACTION_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_ActionTextUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionTextUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ReasonTextUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ReasonTextUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VarianceUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VarianceUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_NoteTextId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteTextId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NoteText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NoteTextUpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteTextUpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dirty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Dirty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChartPrsnlId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ChartPrsnlId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UnchartPrsnlId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UnchartPrsnlId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ChartDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_ChartDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_UnchartDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_UnchartDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_ChartPrsnlName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChartPrsnlName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UnchartPrsnlName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UnchartPrsnlName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UTCChartDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCChartDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCUnchartDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCUnchartDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_OutcomeKey (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeKey (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("17dc305d-fd51-4d19-99a7-ad75aae50f72"))
IIdMngr : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t GetIDs (
        int numIdsNeeded,
        _bstr_t compTypeMean );
    double GetActivityId (
        VARIANT * vIds );
    HRESULT GetIdsList (
        int lNumIdsNeeded,
        _bstr_t sCompTypeMean,
        LONG_PTR lIdsList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetIDs (
        /*[in]*/ int numIdsNeeded,
        /*[in]*/ BSTR compTypeMean,
        /*[out,retval]*/ VARIANT * vIds ) = 0;
      virtual HRESULT __stdcall raw_GetActivityId (
        /*[in]*/ VARIANT * vIds,
        /*[out,retval]*/ double * activityId ) = 0;
      virtual HRESULT __stdcall raw_GetIdsList (
        /*[in]*/ int lNumIdsNeeded,
        /*[in]*/ BSTR sCompTypeMean,
        /*[in]*/ LONG_PTR lIdsList ) = 0;
};

struct __declspec(uuid("81cd5e35-76be-416f-8635-ad7c0612938d"))
ClinCategory;
    // interface IProVideObject
    // [ default ] interface IClinCategory

struct __declspec(uuid("abe13c15-45e7-4958-81ef-7afd374d5caf"))
IClinCategory : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClinSubCatCode))
    double ClinSubCatCode[];
    __declspec(property(get=GetClinSubCatDisplay))
    _bstr_t ClinSubCatDisplay[];
    __declspec(property(get=GetClinicalCatCode,put=PutClinicalCatCode))
    double ClinicalCatCode;
    __declspec(property(get=GetClinCatDisp,put=PutClinCatDisp))
    _bstr_t ClinCatDisp;
    __declspec(property(get=GetClinCatMean,put=PutClinCatMean))
    _bstr_t ClinCatMean;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddClinSubCat (
        double dCodeValue,
        _bstr_t sDiaply,
        _bstr_t sDesc,
        _bstr_t sCDFMean );
    long GetClinSubCatCount ( );
    double GetClinSubCatCode (
        int Index );
    _bstr_t GetClinSubCatDisplay (
        int Index );
    double GetClinicalCatCode ( );
    void PutClinicalCatCode (
        double pVal );
    _bstr_t GetClinCatDisp ( );
    void PutClinCatDisp (
        _bstr_t pVal );
    HRESULT RemoveClinSubCat ( );
    _bstr_t GetClinCatMean ( );
    void PutClinCatMean (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddClinSubCat (
        /*[in]*/ double dCodeValue,
        /*[in]*/ BSTR sDiaply,
        /*[in]*/ BSTR sDesc,
        /*[in]*/ BSTR sCDFMean ) = 0;
      virtual HRESULT __stdcall raw_GetClinSubCatCount (
        /*[out,retval]*/ long * lCount ) = 0;
      virtual HRESULT __stdcall get_ClinSubCatCode (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ClinSubCatDisplay (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ClinicalCatCode (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinicalCatCode (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ClinCatDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinCatDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveClinSubCat ( ) = 0;
      virtual HRESULT __stdcall get_ClinCatMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinCatMean (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("7e2fcda5-70ea-4e5a-9d6f-87baac9681de"))
PlanAction;
    // [ default ] interface IPlanAction

struct __declspec(uuid("c6c7cbcc-c85f-4fe0-bc10-ae0ec177e87c"))
DTALookup;
    // [ default ] interface IDTALookup

struct __declspec(uuid("e1216ba2-228b-430b-ac35-5c03baaaec53"))
IDTALookup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutResultTypeFilters))
    _variant_t ResultTypeFilters;
    __declspec(property(get=GetDescription))
    _bstr_t Description[];
    __declspec(property(get=GetMnemonic))
    _bstr_t Mnemonic[];
    __declspec(property(get=GetUnitCodes))
    _variant_t UnitCodes[];
    __declspec(property(get=GetDataMap))
    IUnknownPtr DataMap[];
    __declspec(property(get=GetDTACd))
    double DTACd[];
    __declspec(property(get=GetAlphaResponses))
    IUnknownPtr AlphaResponses[];
    __declspec(property(get=GetOutcomeDescription))
    _bstr_t OutcomeDescription[];

    //
    // Wrapper methods for error-handling
    //

    long SearchDTA (
        _bstr_t sSearch );
    void PutResultTypeFilters (
        const _variant_t & _arg1 );
    _bstr_t GetDescription (
        int Index );
    _bstr_t GetMnemonic (
        int Index );
    IUnknownPtr SelectDTA (
        double taskAssayCd );
    _variant_t GetUnitCodes (
        double taskAssayCd );
    IUnknownPtr GetDataMap (
        double taskAssayCd );
    double GetDTACd (
        int Index );
    IUnknownPtr GetAlphaResponses (
        double taskAssayCd );
    IUnknownPtr LoadDTADetails (
        double taskAssayCd );
    HRESULT RemoveAllDTAs ( );
    IDispatchPtr GetDTA (
        double task_assay_cd );
    HRESULT LoadDTAs (
        IDispatch * lpDisp );
    long SearchOutcomeDTA (
        _bstr_t sSearch );
    IUnknownPtr SelectDTAByIndex (
        int idx );
    _bstr_t GetOutcomeDescription (
        int Index );
    HRESULT LoadDTAsEx (
        IDispatch * lpDisp,
        long hPatcon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SearchDTA (
        /*[in]*/ BSTR sSearch,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall put_ResultTypeFilters (
        /*[in]*/ VARIANT _arg1 ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Mnemonic (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectDTA (
        /*[in]*/ double taskAssayCd,
        /*[out,retval]*/ IUnknown * * ppIDTA ) = 0;
      virtual HRESULT __stdcall get_UnitCodes (
        /*[in]*/ double taskAssayCd,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_DataMap (
        /*[in]*/ double taskAssayCd,
        /*[out,retval]*/ IUnknown * * ppIDataMap ) = 0;
      virtual HRESULT __stdcall get_DTACd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_AlphaResponses (
        /*[in]*/ double taskAssayCd,
        /*[out,retval]*/ IUnknown * * ppIAlphaResponses ) = 0;
      virtual HRESULT __stdcall raw_LoadDTADetails (
        /*[in]*/ double taskAssayCd,
        /*[out,retval]*/ IUnknown * * ppIDTA ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllDTAs ( ) = 0;
      virtual HRESULT __stdcall raw_GetDTA (
        /*[in]*/ double task_assay_cd,
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDTAs (
        /*[in]*/ IDispatch * lpDisp ) = 0;
      virtual HRESULT __stdcall raw_SearchOutcomeDTA (
        /*[in]*/ BSTR sSearch,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_SelectDTAByIndex (
        /*[in]*/ int idx,
        /*[out,retval]*/ IUnknown * * ppIDTA ) = 0;
      virtual HRESULT __stdcall get_OutcomeDescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDTAsEx (
        /*[in]*/ IDispatch * lpDisp,
        /*[in]*/ long hPatcon ) = 0;
};

struct __declspec(uuid("f075fa40-b7e0-438a-baf5-3c14e442cb95"))
Outcome;
    // interface IProVideObject
    // [ default ] interface IOutcome

struct __declspec(uuid("89bbebfb-a415-4dc8-866e-cc854b055c7e"))
IOutcomeResult : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetClinEventId,put=PutClinEventId))
    double ClinEventId;
    __declspec(property(get=GetEventId,put=PutEventId))
    double EventId;
    __declspec(property(get=GetEventEndDtTm,put=PutEventEndDtTm))
    DATE EventEndDtTm;
    __declspec(property(get=GetResultVal,put=PutResultVal))
    _bstr_t ResultVal;
    __declspec(property(get=GetResultUnitCd,put=PutResultUnitCd))
    double ResultUnitCd;
    __declspec(property(get=GetResultUnitDisp,put=PutResultUnitDisp))
    _bstr_t ResultUnitDisp;
    __declspec(property(get=GetMetInd,put=PutMetInd))
    long MetInd;
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetResultStatusCd,put=PutResultStatusCd))
    double ResultStatusCd;
    __declspec(property(get=GetPerformDtTm,put=PutPerformDtTm))
    DATE PerformDtTm;
    __declspec(property(get=GetPerformPrsnlName,put=PutPerformPrsnlName))
    _bstr_t PerformPrsnlName;
    __declspec(property(get=GetUpdtCnt,put=PutUpdtCnt))
    long UpdtCnt;
    __declspec(property(get=GetEntryModeCd,put=PutEntryModeCd))
    double EntryModeCd;
    __declspec(property(get=GetParentDispatch,put=PutParentDispatch))
    IDispatchPtr ParentDispatch;
    __declspec(property(get=GetAccessionNbr,put=PutAccessionNbr))
    _bstr_t AccessionNbr;
    __declspec(property(get=GetUTCPerformDtTm,put=PutUTCPerformDtTm))
    IDispatchPtr UTCPerformDtTm;
    __declspec(property(get=GetUTCEventEndDtTm,put=PutUTCEventEndDtTm))
    IDispatchPtr UTCEventEndDtTm;
    __declspec(property(get=GetNomenStringFlag,put=PutNomenStringFlag))
    NOMENCLATURE_STRING_TYPE NomenStringFlag;
    __declspec(property(get=GetPreferredNomenDisp,put=PutPreferredNomenDisp))
    _bstr_t PreferredNomenDisp;
    __declspec(property(get=GetFormattedDisplay))
    _bstr_t FormattedDisplay;

    //
    // Wrapper methods for error-handling
    //

    double GetClinEventId ( );
    void PutClinEventId (
        double pVal );
    double GetEventId ( );
    void PutEventId (
        double pVal );
    DATE GetEventEndDtTm ( );
    void PutEventEndDtTm (
        DATE pVal );
    _bstr_t GetResultVal ( );
    void PutResultVal (
        _bstr_t pVal );
    double GetResultUnitCd ( );
    void PutResultUnitCd (
        double pVal );
    _bstr_t GetResultUnitDisp ( );
    void PutResultUnitDisp (
        _bstr_t pVal );
    long GetMetInd ( );
    void PutMetInd (
        long pVal );
    _variant_t GetKey ( );
    HRESULT Copy (
        struct IOutcomeResult * pOutcomeResult );
    double GetResultStatusCd ( );
    void PutResultStatusCd (
        double pVal );
    DATE GetPerformDtTm ( );
    void PutPerformDtTm (
        DATE pVal );
    _bstr_t GetPerformPrsnlName ( );
    void PutPerformPrsnlName (
        _bstr_t pVal );
    long GetUpdtCnt ( );
    void PutUpdtCnt (
        long pVal );
    double GetEntryModeCd ( );
    void PutEntryModeCd (
        double pVal );
    IDispatchPtr GetParentDispatch ( );
    void PutParentDispatch (
        IDispatch * pVal );
    _bstr_t GetAccessionNbr ( );
    void PutAccessionNbr (
        _bstr_t pVal );
    IDispatchPtr GetUTCPerformDtTm ( );
    void PutUTCPerformDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCEventEndDtTm ( );
    void PutUTCEventEndDtTm (
        IDispatch * pVal );
    NOMENCLATURE_STRING_TYPE GetNomenStringFlag ( );
    void PutNomenStringFlag (
        NOMENCLATURE_STRING_TYPE pVal );
    _bstr_t GetPreferredNomenDisp ( );
    void PutPreferredNomenDisp (
        _bstr_t pVal );
    _bstr_t GetFormattedDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ClinEventId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClinEventId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EventId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventEndDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_EventEndDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_ResultVal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultVal (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ResultUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ResultUnitDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultUnitDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MetInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MetInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IOutcomeResult * pOutcomeResult ) = 0;
      virtual HRESULT __stdcall get_ResultStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PerformDtTm (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_PerformDtTm (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_PerformPrsnlName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PerformPrsnlName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_EntryModeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EntryModeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParentDispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentDispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_AccessionNbr (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessionNbr (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UTCPerformDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCPerformDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCEventEndDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCEventEndDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_NomenStringFlag (
        /*[out,retval]*/ NOMENCLATURE_STRING_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_NomenStringFlag (
        /*[in]*/ NOMENCLATURE_STRING_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_PreferredNomenDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PreferredNomenDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FormattedDisplay (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("3390e561-ab77-4361-8227-3a3177b02048"))
IOutcome : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetExpectation,put=PutExpectation))
    _bstr_t Expectation;
    __declspec(property(get=GetTypeCd,put=PutTypeCd))
    double TypeCd;
    __declspec(property(get=GetActiveInd,put=PutActiveInd))
    long ActiveInd;
    __declspec(property(get=GetOutcomeActivityId,put=PutOutcomeActivityId))
    double OutcomeActivityId;
    __declspec(property(get=GetOutcomeCatalogId,put=PutOutcomeCatalogId))
    double OutcomeCatalogId;
    __declspec(property(get=GetDTACd,put=PutDTACd))
    double DTACd;
    __declspec(property(get=GetEventCd,put=PutEventCd))
    double EventCd;
    __declspec(property(get=GetClassCd,put=PutClassCd))
    double ClassCd;
    __declspec(property(get=GetResultTypeCd,put=PutResultTypeCd))
    double ResultTypeCd;
    __declspec(property(get=GetClassCdDisp,put=PutClassCdDisp))
    _bstr_t ClassCdDisp;
    __declspec(property(get=GetClassCdMean,put=PutClassCdMean))
    _bstr_t ClassCdMean;
    __declspec(property(get=GetResultTypeCdDisp,put=PutResultTypeCdDisp))
    _bstr_t ResultTypeCdDisp;
    __declspec(property(get=GetResultTypeCdMean,put=PutResultTypeCdMean))
    _bstr_t ResultTypeCdMean;
    __declspec(property(get=GetOperandMean,put=PutOperandMean))
    _bstr_t OperandMean;
    __declspec(property(get=GetUpdtCnt,put=PutUpdtCnt))
    long UpdtCnt;
    __declspec(property(get=GetOutcomeCatCriteriaId,put=PutOutcomeCatCriteriaId))
    double OutcomeCatCriteriaId[];
    __declspec(property(get=GetOutcomeCriteriaId,put=PutOutcomeCriteriaId))
    double OutcomeCriteriaId[];
    __declspec(property(get=GetOperatorCd,put=PutOperatorCd))
    double OperatorCd[];
    __declspec(property(get=GetResultValue,put=PutResultValue))
    double ResultValue[];
    __declspec(property(get=GetResultUnitCd,put=PutResultUnitCd))
    double ResultUnitCd[];
    __declspec(property(get=GetnomenclatureId,put=PutnomenclatureId))
    double nomenclatureId[];
    __declspec(property(get=GetCriteriaSeq,put=PutCriteriaSeq))
    long CriteriaSeq[];
    __declspec(property(get=GetCriteriaActiveInd,put=PutCriteriaActiveInd))
    long CriteriaActiveInd[];
    __declspec(property(get=GetCriteriaUpdtCnt,put=PutCriteriaUpdtCnt))
    long CriteriaUpdtCnt[];
    __declspec(property(get=GetResultUnitCdDisp,put=PutResultUnitCdDisp))
    _bstr_t ResultUnitCdDisp[];
    __declspec(property(get=GetResultUnitCdMean,put=PutResultUnitCdMean))
    _bstr_t ResultUnitCdMean[];
    __declspec(property(get=GetOperatorCdDisp,put=PutOperatorCdDisp))
    _bstr_t OperatorCdDisp[];
    __declspec(property(get=GetOperatorCdMean,put=PutOperatorCdMean))
    _bstr_t OperatorCdMean[];
    __declspec(property(get=GetDirtyFlag,put=PutDirtyFlag))
    long DirtyFlag;
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetCriteriaDirtyFlag,put=PutCriteriaDirtyFlag))
    long CriteriaDirtyFlag;
    __declspec(property(get=GetPlanDescription))
    _bstr_t PlanDescription[];
    __declspec(property(get=GetTypeCdDisp,put=PutTypeCdDisp))
    _bstr_t TypeCdDisp;
    __declspec(property(get=GetTypeCdMean,put=PutTypeCdMean))
    _bstr_t TypeCdMean;
    __declspec(property(get=GetCatalogInd,put=PutCatalogInd))
    long CatalogInd;
    __declspec(property(get=GetStatusCd,put=PutStatusCd))
    double StatusCd;
    __declspec(property(get=GetStatusDisp,put=PutStatusDisp))
    _bstr_t StatusDisp;
    __declspec(property(get=GetStatusMean,put=PutStatusMean))
    _bstr_t StatusMean;
    __declspec(property(get=GetTargetTypeCd,put=PutTargetTypeCd))
    double TargetTypeCd;
    __declspec(property(get=GetTargetTypeDisp,put=PutTargetTypeDisp))
    _bstr_t TargetTypeDisp;
    __declspec(property(get=GetTargetTypeMean,put=PutTargetTypeMean))
    _bstr_t TargetTypeMean;
    __declspec(property(get=GetDurationQty,put=PutDurationQty))
    long DurationQty;
    __declspec(property(get=GetDurationUnitCd,put=PutDurationUnitCd))
    double DurationUnitCd;
    __declspec(property(get=GetDurationUnitDisp,put=PutDurationUnitDisp))
    _bstr_t DurationUnitDisp;
    __declspec(property(get=GetDurationUnitMean,put=PutDurationUnitMean))
    _bstr_t DurationUnitMean;
    __declspec(property(get=GetExpandQty,put=PutExpandQty))
    long ExpandQty;
    __declspec(property(get=GetExpandUnitCd,put=PutExpandUnitCd))
    double ExpandUnitCd;
    __declspec(property(get=GetExpandUnitDisp,put=PutExpandUnitDisp))
    _bstr_t ExpandUnitDisp;
    __declspec(property(get=GetExpandUnitMean,put=PutExpandUnitMean))
    _bstr_t ExpandUnitMean;
    __declspec(property(get=GetPersonId,put=PutPersonId))
    double PersonId;
    __declspec(property(get=GetEncntrId,put=PutEncntrId))
    double EncntrId;
    __declspec(property(get=GetActionType,put=PutActionType))
    ACTION_TYPE ActionType;
    __declspec(property(get=GetOutcomeResultCollection))
    IUnknownPtr OutcomeResultCollection;
    __declspec(property(get=GetLastMetInd,put=PutLastMetInd))
    OUTCOME_EVAL LastMetInd;
    __declspec(property(get=GetReferenceTaskId,put=PutReferenceTaskId))
    double ReferenceTaskId;
    __declspec(property(get=GetTaskDescription,put=PutTaskDescription))
    _bstr_t TaskDescription;
    __declspec(property(get=GetActionSeq))
    long ActionSeq[];
    __declspec(property(get=GetActionOutcomeStatusCd))
    double ActionOutcomeStatusCd[];
    __declspec(property(get=GetActionOutcomeStatusDisp))
    _bstr_t ActionOutcomeStatusDisp[];
    __declspec(property(get=GetActionTargetTypeCd))
    double ActionTargetTypeCd[];
    __declspec(property(get=GetActionTargetTypeDisp))
    _bstr_t ActionTargetTypeDisp[];
    __declspec(property(get=GetActionPrsnlName))
    _bstr_t ActionPrsnlName[];
    __declspec(property(get=GetActionOutcomeStatusMean))
    _bstr_t ActionOutcomeStatusMean[];
    __declspec(property(get=GetTargetDurationQty,put=PutTargetDurationQty))
    long TargetDurationQty;
    __declspec(property(get=GetTargetDurationUnitCd,put=PutTargetDurationUnitCd))
    double TargetDurationUnitCd;
    __declspec(property(get=GetTargetDurationUnitCdDisp,put=PutTargetDurationUnitCdDisp))
    _bstr_t TargetDurationUnitCdDisp;
    __declspec(property(get=GetTargetDurationUnitCdMean,put=PutTargetDurationUnitCdMean))
    _bstr_t TargetDurationUnitCdMean;
    __declspec(property(get=GetDetailsLoaded,put=PutDetailsLoaded))
    long DetailsLoaded;
    __declspec(property(get=GetMetNomenclatureId,put=PutMetNomenclatureId))
    double MetNomenclatureId;
    __declspec(property(get=GetComponentId,put=PutComponentId))
    double ComponentId;
    __declspec(property(get=GetStartedInd,put=PutStartedInd))
    long StartedInd;
    __declspec(property(get=GetAdjustStartTimeInd,put=PutAdjustStartTimeInd))
    long AdjustStartTimeInd;
    __declspec(property(get=GetResultLoadStatus,put=PutResultLoadStatus))
    long ResultLoadStatus;
    __declspec(property(get=GetSingleSelectInd,put=PutSingleSelectInd))
    long SingleSelectInd;
    __declspec(property(get=GetHideExpectationInd,put=PutHideExpectationInd))
    long HideExpectationInd;
    __declspec(property(get=GetReferenceContentPtr,put=PutReferenceContentPtr))
    IDispatchPtr ReferenceContentPtr;
    __declspec(property(get=GetRefTextModifiedInd,put=PutRefTextModifiedInd))
    long RefTextModifiedInd;
    __declspec(property(get=GetRefTextReltnId,put=PutRefTextReltnId))
    double RefTextReltnId;
    __declspec(property(get=GetRemoveOCRefTextInd,put=PutRemoveOCRefTextInd))
    long RemoveOCRefTextInd;
    __declspec(property(get=GetActivatedInd,put=PutActivatedInd))
    long ActivatedInd;
    __declspec(property(get=GetUTCStartDtTm,put=PutUTCStartDtTm))
    IDispatchPtr UTCStartDtTm;
    __declspec(property(get=GetUTCEndDtTm,put=PutUTCEndDtTm))
    IDispatchPtr UTCEndDtTm;
    __declspec(property(get=GetUTCLastResultDtTm,put=PutUTCLastResultDtTm))
    IDispatchPtr UTCLastResultDtTm;
    __declspec(property(get=GetUTCMarkDtTm,put=PutUTCMarkDtTm))
    IDispatchPtr UTCMarkDtTm;
    __declspec(property(get=GetUTCActionOutcomeStatusDtTm))
    IDispatchPtr UTCActionOutcomeStatusDtTm[];
    __declspec(property(get=GetUTCActionStartDtTm))
    IDispatchPtr UTCActionStartDtTm[];
    __declspec(property(get=GetUTCActionEndDtTm))
    IDispatchPtr UTCActionEndDtTm[];
    __declspec(property(get=GetUTCActionDtTm))
    IDispatchPtr UTCActionDtTm[];
    __declspec(property(get=GetDynamicLabelId,put=PutDynamicLabelId))
    double DynamicLabelId;
    __declspec(property(get=GetDynamicLabelName,put=PutDynamicLabelName))
    _bstr_t DynamicLabelName;
    __declspec(property(get=GetGenericOutcome,put=PutGenericOutcome))
    IOutcomePtr GenericOutcome;
    __declspec(property(get=GetFormattedDynamicLabelText))
    _bstr_t FormattedDynamicLabelText;
    __declspec(property(get=GetNomenStringFlag,put=PutNomenStringFlag))
    NOMENCLATURE_STRING_TYPE NomenStringFlag;
    __declspec(property(get=GetStartEstimatedInd,put=PutStartEstimatedInd))
    long StartEstimatedInd;
    __declspec(property(get=GetEndEstimatedInd,put=PutEndEstimatedInd))
    long EndEstimatedInd;
    __declspec(property(get=GetFutureInitiateInd,put=PutFutureInitiateInd))
    long FutureInitiateInd;
    __declspec(property(get=GetLastResultEventId,put=PutLastResultEventId))
    double LastResultEventId;
    __declspec(property(get=GetParentDispatch,put=PutParentDispatch))
    IDispatchPtr ParentDispatch;
    __declspec(property(get=GetHasInErrorResult,put=PutHasInErrorResult))
    long HasInErrorResult;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetExpectation ( );
    void PutExpectation (
        _bstr_t pVal );
    double GetTypeCd ( );
    void PutTypeCd (
        double pVal );
    long GetActiveInd ( );
    void PutActiveInd (
        long pVal );
    double GetOutcomeActivityId ( );
    void PutOutcomeActivityId (
        double pVal );
    double GetOutcomeCatalogId ( );
    void PutOutcomeCatalogId (
        double pVal );
    double GetDTACd ( );
    void PutDTACd (
        double pVal );
    double GetEventCd ( );
    void PutEventCd (
        double pVal );
    double GetClassCd ( );
    void PutClassCd (
        double pVal );
    double GetResultTypeCd ( );
    void PutResultTypeCd (
        double pVal );
    _bstr_t GetClassCdDisp ( );
    void PutClassCdDisp (
        _bstr_t pVal );
    _bstr_t GetClassCdMean ( );
    void PutClassCdMean (
        _bstr_t pVal );
    _bstr_t GetResultTypeCdDisp ( );
    void PutResultTypeCdDisp (
        _bstr_t pVal );
    _bstr_t GetResultTypeCdMean ( );
    void PutResultTypeCdMean (
        _bstr_t pVal );
    _bstr_t GetOperandMean ( );
    void PutOperandMean (
        _bstr_t pVal );
    long GetUpdtCnt ( );
    void PutUpdtCnt (
        long pVal );
    long AddOutcomeCriteria ( );
    double GetOutcomeCatCriteriaId (
        int Index );
    void PutOutcomeCatCriteriaId (
        int Index,
        double pVal );
    double GetOutcomeCriteriaId (
        int Index );
    void PutOutcomeCriteriaId (
        int Index,
        double pVal );
    double GetOperatorCd (
        int Index );
    void PutOperatorCd (
        int Index,
        double pVal );
    double GetResultValue (
        int Index );
    void PutResultValue (
        int Index,
        double pVal );
    double GetResultUnitCd (
        int Index );
    void PutResultUnitCd (
        int Index,
        double pVal );
    double GetnomenclatureId (
        int Index );
    void PutnomenclatureId (
        int Index,
        double pVal );
    long GetCriteriaSeq (
        int Index );
    void PutCriteriaSeq (
        int Index,
        long pVal );
    long GetCriteriaActiveInd (
        int Index );
    void PutCriteriaActiveInd (
        int Index,
        long pVal );
    long GetCriteriaUpdtCnt (
        int Index );
    void PutCriteriaUpdtCnt (
        int Index,
        long pVal );
    _bstr_t GetResultUnitCdDisp (
        int Index );
    void PutResultUnitCdDisp (
        int Index,
        _bstr_t pVal );
    _bstr_t GetResultUnitCdMean (
        int Index );
    void PutResultUnitCdMean (
        int Index,
        _bstr_t pVal );
    _bstr_t GetOperatorCdDisp (
        int Index );
    void PutOperatorCdDisp (
        int Index,
        _bstr_t pVal );
    _bstr_t GetOperatorCdMean (
        int Index );
    void PutOperatorCdMean (
        int Index,
        _bstr_t pVal );
    long GetCriteriaCount ( );
    long GetDirtyFlag ( );
    void PutDirtyFlag (
        long pVal );
    HRESULT FormatExpectationString (
        IUnknown * lpAlphaResponses,
        IUnknown * pDataMap );
    _variant_t GetKey ( );
    long GetCriteriaDirtyFlag ( );
    void PutCriteriaDirtyFlag (
        long pVal );
    HRESULT RemoveAllCriteria ( );
    long AddOutcomePlan (
        LONG_PTR lPlanStruct );
    _bstr_t GetPlanDescription (
        int Index );
    long GetPlanCount ( );
    HRESULT RemoveAllPlans ( );
    HRESULT ResetOutcomeData ( );
    _bstr_t GetTypeCdDisp ( );
    void PutTypeCdDisp (
        _bstr_t pVal );
    _bstr_t GetTypeCdMean ( );
    void PutTypeCdMean (
        _bstr_t pVal );
    long GetCatalogInd ( );
    void PutCatalogInd (
        long pVal );
    HRESULT Copy (
        struct IOutcome * pOutcome );
    long IsEqual (
        struct IOutcome * pOutcome );
    double GetStatusCd ( );
    void PutStatusCd (
        double pVal );
    _bstr_t GetStatusDisp ( );
    void PutStatusDisp (
        _bstr_t pVal );
    _bstr_t GetStatusMean ( );
    void PutStatusMean (
        _bstr_t pVal );
    double GetTargetTypeCd ( );
    void PutTargetTypeCd (
        double pVal );
    _bstr_t GetTargetTypeDisp ( );
    void PutTargetTypeDisp (
        _bstr_t pVal );
    _bstr_t GetTargetTypeMean ( );
    void PutTargetTypeMean (
        _bstr_t pVal );
    long GetDurationQty ( );
    void PutDurationQty (
        long pVal );
    double GetDurationUnitCd ( );
    void PutDurationUnitCd (
        double pVal );
    _bstr_t GetDurationUnitDisp ( );
    void PutDurationUnitDisp (
        _bstr_t pVal );
    _bstr_t GetDurationUnitMean ( );
    void PutDurationUnitMean (
        _bstr_t pVal );
    long GetExpandQty ( );
    void PutExpandQty (
        long pVal );
    double GetExpandUnitCd ( );
    void PutExpandUnitCd (
        double pVal );
    _bstr_t GetExpandUnitDisp ( );
    void PutExpandUnitDisp (
        _bstr_t pVal );
    _bstr_t GetExpandUnitMean ( );
    void PutExpandUnitMean (
        _bstr_t pVal );
    double GetPersonId ( );
    void PutPersonId (
        double pVal );
    double GetEncntrId ( );
    void PutEncntrId (
        double pVal );
    ACTION_TYPE GetActionType ( );
    void PutActionType (
        ACTION_TYPE pVal );
    HRESULT AddOutcomeResult (
        struct IOutcomeResult * pOutcomeResult );
    IUnknownPtr GetOutcomeResultCollection ( );
    OUTCOME_EVAL GetLastMetInd ( );
    void PutLastMetInd (
        OUTCOME_EVAL pVal );
    long IsEvaluationAvail ( );
    HRESULT RemoveAllOutcomeResults ( );
    double GetReferenceTaskId ( );
    void PutReferenceTaskId (
        double pVal );
    _bstr_t GetTaskDescription ( );
    void PutTaskDescription (
        _bstr_t pVal );
    HRESULT LoadOutcomeAction ( );
    HRESULT RemoveAllActions ( );
    long GetActionSeq (
        int Index );
    double GetActionOutcomeStatusCd (
        int Index );
    _bstr_t GetActionOutcomeStatusDisp (
        int Index );
    double GetActionTargetTypeCd (
        int Index );
    _bstr_t GetActionTargetTypeDisp (
        int Index );
    _bstr_t GetActionPrsnlName (
        int Index );
    long GetActionCount ( );
    _bstr_t GetActionOutcomeStatusMean (
        int Index );
    long GetTargetDurationQty ( );
    void PutTargetDurationQty (
        long pVal );
    double GetTargetDurationUnitCd ( );
    void PutTargetDurationUnitCd (
        double pVal );
    _bstr_t GetTargetDurationUnitCdDisp ( );
    void PutTargetDurationUnitCdDisp (
        _bstr_t pVal );
    _bstr_t GetTargetDurationUnitCdMean ( );
    void PutTargetDurationUnitCdMean (
        _bstr_t pVal );
    long GetDetailsLoaded ( );
    void PutDetailsLoaded (
        long pVal );
    double GetMetNomenclatureId ( );
    void PutMetNomenclatureId (
        double pVal );
    double GetComponentId ( );
    void PutComponentId (
        double pVal );
    long GetStartedInd ( );
    void PutStartedInd (
        long pVal );
    long GetAdjustStartTimeInd ( );
    void PutAdjustStartTimeInd (
        long pVal );
    long GetResultLoadStatus ( );
    void PutResultLoadStatus (
        long pVal );
    long GetSingleSelectInd ( );
    void PutSingleSelectInd (
        long pVal );
    long GetHideExpectationInd ( );
    void PutHideExpectationInd (
        long pVal );
    IDispatchPtr GetReferenceContentPtr ( );
    void PutReferenceContentPtr (
        IDispatch * ppVal );
    long GetRefTextModifiedInd ( );
    void PutRefTextModifiedInd (
        long pVal );
    double GetRefTextReltnId ( );
    void PutRefTextReltnId (
        double pVal );
    long GetRemoveOCRefTextInd ( );
    void PutRemoveOCRefTextInd (
        long pVal );
    long GetActivatedInd ( );
    void PutActivatedInd (
        long pVal );
    IDispatchPtr GetUTCStartDtTm ( );
    void PutUTCStartDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCEndDtTm ( );
    void PutUTCEndDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCLastResultDtTm ( );
    void PutUTCLastResultDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCMarkDtTm ( );
    void PutUTCMarkDtTm (
        IDispatch * pVal );
    IDispatchPtr GetUTCActionOutcomeStatusDtTm (
        int Index );
    IDispatchPtr GetUTCActionStartDtTm (
        int Index );
    IDispatchPtr GetUTCActionEndDtTm (
        int Index );
    IDispatchPtr GetUTCActionDtTm (
        int Index );
    double GetDynamicLabelId ( );
    void PutDynamicLabelId (
        double pVal );
    _bstr_t GetDynamicLabelName ( );
    void PutDynamicLabelName (
        _bstr_t pVal );
    IOutcomePtr GetGenericOutcome ( );
    void PutGenericOutcome (
        struct IOutcome * pVal );
    _bstr_t GetFormattedDynamicLabelText ( );
    HRESULT AddDynamicLabelOutcome (
        struct IOutcome * pOutcome );
    IDispatchPtr GetDynamicLabelOutcomeCol ( );
    NOMENCLATURE_STRING_TYPE GetNomenStringFlag ( );
    void PutNomenStringFlag (
        NOMENCLATURE_STRING_TYPE pVal );
    long GetStartEstimatedInd ( );
    void PutStartEstimatedInd (
        long pStartEstimatedInd );
    long GetEndEstimatedInd ( );
    void PutEndEstimatedInd (
        long pEndEstimatedInd );
    long GetFutureInitiateInd ( );
    void PutFutureInitiateInd (
        long pFutureInitiateInd );
    double GetLastResultEventId ( );
    void PutLastResultEventId (
        double pVal );
    IDispatchPtr GetParentDispatch ( );
    void PutParentDispatch (
        IDispatch * pVal );
    IOutcomePtr GetDynamicLabelOutcomeByDynamicLabelId (
        double dDynamicLabelId );
    IOutcomeResultPtr GetLastOutcomeResult ( );
    long GetHasInErrorResult ( );
    void PutHasInErrorResult (
        long pVal );
    long GetPlanVersion (
        int iIndex );
    EPlanVersionStatus GetPlanVersionStatus (
        int iIndex );
    HRESULT SetFacilityFlexing (
        LONG_PTR facilityVector );
    _bstr_t GetFlexFacilityDisp ( );
    double GetFlexingFacilityCodeAt (
        int iIndex );
    long GetFlexingCount ( );
    long GetAllFacilityInd ( );
    HRESULT PutAllFacilityInd (
        long bAllFacilityIndVal );
    _bstr_t GetFacilityDisplayAt (
        int iIndex );
    HRESULT GetOutcomeFlexedFacilityCds (
        LONG_PTR facilityVector );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Expectation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Expectation (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActiveInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_OutcomeActivityId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeActivityId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OutcomeCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeCatalogId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DTACd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DTACd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EventCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ClassCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClassCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ResultTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ClassCdDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClassCdDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassCdMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClassCdMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ResultTypeCdDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultTypeCdDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ResultTypeCdMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultTypeCdMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OperandMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OperandMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOutcomeCriteria (
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall get_OutcomeCatCriteriaId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeCatCriteriaId (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OutcomeCriteriaId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeCriteriaId (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OperatorCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OperatorCd (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ResultValue (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultValue (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ResultUnitCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultUnitCd (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_nomenclatureId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_nomenclatureId (
        /*[in]*/ int Index,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CriteriaSeq (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CriteriaSeq (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CriteriaActiveInd (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CriteriaActiveInd (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CriteriaUpdtCnt (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CriteriaUpdtCnt (
        /*[in]*/ int Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResultUnitCdDisp (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultUnitCdDisp (
        /*[in]*/ int Index,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ResultUnitCdMean (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultUnitCdMean (
        /*[in]*/ int Index,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OperatorCdDisp (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OperatorCdDisp (
        /*[in]*/ int Index,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OperatorCdMean (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OperatorCdMean (
        /*[in]*/ int Index,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriteriaCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_DirtyFlag (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DirtyFlag (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_FormatExpectationString (
        /*[in]*/ IUnknown * lpAlphaResponses,
        /*[in]*/ IUnknown * pDataMap ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_CriteriaDirtyFlag (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CriteriaDirtyFlag (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllCriteria ( ) = 0;
      virtual HRESULT __stdcall raw_AddOutcomePlan (
        /*[in]*/ LONG_PTR lPlanStruct,
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall get_PlanDescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPlanCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllPlans ( ) = 0;
      virtual HRESULT __stdcall raw_ResetOutcomeData ( ) = 0;
      virtual HRESULT __stdcall get_TypeCdDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TypeCdDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TypeCdMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TypeCdMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CatalogInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CatalogInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IOutcome * pOutcome ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IOutcome * pOutcome,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StatusDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StatusDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StatusMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StatusMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TargetTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TargetTypeDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetTypeDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TargetTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DurationQty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationQty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DurationUnitMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DurationUnitMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExpandQty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpandQty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ExpandUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpandUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExpandUnitDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpandUnitDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExpandUnitMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpandUnitMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PersonId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PersonId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EncntrId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EncntrId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ ACTION_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ ACTION_TYPE pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOutcomeResult (
        /*[in]*/ struct IOutcomeResult * pOutcomeResult ) = 0;
      virtual HRESULT __stdcall get_OutcomeResultCollection (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_LastMetInd (
        /*[out,retval]*/ OUTCOME_EVAL * pVal ) = 0;
      virtual HRESULT __stdcall put_LastMetInd (
        /*[in]*/ OUTCOME_EVAL pVal ) = 0;
      virtual HRESULT __stdcall raw_IsEvaluationAvail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllOutcomeResults ( ) = 0;
      virtual HRESULT __stdcall get_ReferenceTaskId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceTaskId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TaskDescription (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TaskDescription (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadOutcomeAction ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllActions ( ) = 0;
      virtual HRESULT __stdcall get_ActionSeq (
        /*[in]*/ int Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ActionOutcomeStatusCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ActionOutcomeStatusDisp (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActionTargetTypeCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ActionTargetTypeDisp (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActionPrsnlName (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetActionCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_ActionOutcomeStatusMean (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TargetDurationQty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetDurationQty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TargetDurationUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetDurationUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TargetDurationUnitCdDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetDurationUnitCdDisp (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TargetDurationUnitCdMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetDurationUnitCdMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DetailsLoaded (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DetailsLoaded (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MetNomenclatureId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MetNomenclatureId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ComponentId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ComponentId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StartedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AdjustStartTimeInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AdjustStartTimeInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResultLoadStatus (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultLoadStatus (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SingleSelectInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SingleSelectInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HideExpectationInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HideExpectationInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceContentPtr (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceContentPtr (
        /*[in]*/ IDispatch * ppVal ) = 0;
      virtual HRESULT __stdcall get_RefTextModifiedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefTextModifiedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RefTextReltnId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefTextReltnId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveOCRefTextInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveOCRefTextInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ActivatedInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActivatedInd (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UTCStartDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCStartDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCEndDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCEndDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCLastResultDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCLastResultDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCMarkDtTm (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCMarkDtTm (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCActionOutcomeStatusDtTm (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCActionStartDtTm (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCActionEndDtTm (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall get_UTCActionDtTm (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall get_DynamicLabelId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DynamicLabelId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DynamicLabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DynamicLabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GenericOutcome (
        /*[out,retval]*/ struct IOutcome * * pVal ) = 0;
      virtual HRESULT __stdcall put_GenericOutcome (
        /*[in]*/ struct IOutcome * pVal ) = 0;
      virtual HRESULT __stdcall get_FormattedDynamicLabelText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddDynamicLabelOutcome (
        /*[in]*/ struct IOutcome * pOutcome ) = 0;
      virtual HRESULT __stdcall raw_GetDynamicLabelOutcomeCol (
        /*[out,retval]*/ IDispatch * * ppDynOutcomeCol ) = 0;
      virtual HRESULT __stdcall get_NomenStringFlag (
        /*[out,retval]*/ NOMENCLATURE_STRING_TYPE * pVal ) = 0;
      virtual HRESULT __stdcall put_NomenStringFlag (
        /*[in]*/ NOMENCLATURE_STRING_TYPE pVal ) = 0;
      virtual HRESULT __stdcall get_StartEstimatedInd (
        /*[out,retval]*/ long * pStartEstimatedInd ) = 0;
      virtual HRESULT __stdcall put_StartEstimatedInd (
        /*[in]*/ long pStartEstimatedInd ) = 0;
      virtual HRESULT __stdcall get_EndEstimatedInd (
        /*[out,retval]*/ long * pEndEstimatedInd ) = 0;
      virtual HRESULT __stdcall put_EndEstimatedInd (
        /*[in]*/ long pEndEstimatedInd ) = 0;
      virtual HRESULT __stdcall get_FutureInitiateInd (
        /*[out,retval]*/ long * pFutureInitiateInd ) = 0;
      virtual HRESULT __stdcall put_FutureInitiateInd (
        /*[in]*/ long pFutureInitiateInd ) = 0;
      virtual HRESULT __stdcall get_LastResultEventId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LastResultEventId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParentDispatch (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentDispatch (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDynamicLabelOutcomeByDynamicLabelId (
        /*[in]*/ double dDynamicLabelId,
        /*[out,retval]*/ struct IOutcome * * ppDynamicLabelOutcome ) = 0;
      virtual HRESULT __stdcall raw_GetLastOutcomeResult (
        /*[out,retval]*/ struct IOutcomeResult * * ppOutcomeResult ) = 0;
      virtual HRESULT __stdcall get_HasInErrorResult (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HasInErrorResult (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPlanVersion (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ long * pVersion ) = 0;
      virtual HRESULT __stdcall raw_GetPlanVersionStatus (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ EPlanVersionStatus * pPlanVersionStatus ) = 0;
      virtual HRESULT __stdcall raw_SetFacilityFlexing (
        /*[in]*/ LONG_PTR facilityVector ) = 0;
      virtual HRESULT __stdcall raw_GetFlexFacilityDisp (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFlexingFacilityCodeAt (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFlexingCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllFacilityInd (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_PutAllFacilityInd (
        /*[in]*/ long bAllFacilityIndVal ) = 0;
      virtual HRESULT __stdcall raw_GetFacilityDisplayAt (
        /*[in]*/ int iIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOutcomeFlexedFacilityCds (
        /*[in]*/ LONG_PTR facilityVector ) = 0;
};

struct __declspec(uuid("16c750de-7e3e-44d8-bb44-74d61ce425e8"))
OutcomeLookup;
    // [ default ] interface IOutcomeLookup

struct __declspec(uuid("a9173c14-6f7b-4677-a463-9206164cc7a5"))
IOutcomeLookup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description[];
    __declspec(property(get=GetExpectation))
    _bstr_t Expectation[];
    __declspec(property(get=GetOutcomeCatalogId))
    double OutcomeCatalogId[];
    __declspec(property(get=GetSearchResultCount))
    long SearchResultCount;
    __declspec(property(get=GetOutcomeTypeDisp))
    _bstr_t OutcomeTypeDisp[];
    __declspec(property(put=PutOutcomeSearchInd))
    long OutcomeSearchInd;
    __declspec(property(get=GetOutcomeTypeCd))
    double OutcomeTypeCd[];

    //
    // Wrapper methods for error-handling
    //

    long SearchOutcomes (
        _bstr_t sSearch,
        double task_assay_cd,
        double outcome_class_cd );
    IUnknownPtr SelectOutcome (
        double outcomeCatId,
        long bLoadPlanInfo );
    _bstr_t GetDescription (
        int Index );
    _bstr_t GetExpectation (
        int Index );
    HRESULT LoadOutcomeDetails (
        struct IOutcome * pOutcome,
        long bLoadPlanInfo );
    double GetOutcomeCatalogId (
        int Index );
    HRESULT AddOutcome (
        struct IOutcome * pOutcome );
    long GetSearchResultCount ( );
    IDispatchPtr SelectComponent (
        int Index );
    _bstr_t GetOutcomeTypeDisp (
        int Index );
    void PutOutcomeSearchInd (
        long _arg1 );
    HRESULT LoadOutcomeActDetails (
        struct IOutcome * pOutcome );
    double GetOutcomeTypeCd (
        int Index );
    IUnknownPtr SelectOutcomeByIndex (
        int idx,
        long bLoadPlanInfo );
    HRESULT SyncOutcomeSearchResultVector (
        struct IOutcome * pOutcome,
        long isNew,
        int idx );
    long SearchOutcomesByFilter (
        _bstr_t sSearch,
        OC_SEARCH_FILTER_TYPE filterType );
    long SearchOutcomesByFilterWithFacilityFlexing (
        _bstr_t sSearch,
        OC_SEARCH_FILTER_TYPE filterType,
        double dPatientLocationCd );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SearchOutcomes (
        /*[in]*/ BSTR sSearch,
        /*[in]*/ double task_assay_cd,
        /*[in]*/ double outcome_class_cd,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_SelectOutcome (
        /*[in]*/ double outcomeCatId,
        /*[in]*/ long bLoadPlanInfo,
        /*[out,retval]*/ IUnknown * * ppIOutcome ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Expectation (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadOutcomeDetails (
        /*[in]*/ struct IOutcome * pOutcome,
        /*[in]*/ long bLoadPlanInfo ) = 0;
      virtual HRESULT __stdcall get_OutcomeCatalogId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddOutcome (
        /*[in]*/ struct IOutcome * pOutcome ) = 0;
      virtual HRESULT __stdcall get_SearchResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectComponent (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * ppIComponent ) = 0;
      virtual HRESULT __stdcall get_OutcomeTypeDisp (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutcomeSearchInd (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_LoadOutcomeActDetails (
        struct IOutcome * pOutcome ) = 0;
      virtual HRESULT __stdcall get_OutcomeTypeCd (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectOutcomeByIndex (
        /*[in]*/ int idx,
        /*[in]*/ long bLoadPlanInfo,
        /*[out,retval]*/ IUnknown * * ppIOutcome ) = 0;
      virtual HRESULT __stdcall raw_SyncOutcomeSearchResultVector (
        /*[in]*/ struct IOutcome * pOutcome,
        /*[in]*/ long isNew,
        /*[in]*/ int idx ) = 0;
      virtual HRESULT __stdcall raw_SearchOutcomesByFilter (
        /*[in]*/ BSTR sSearch,
        /*[in]*/ OC_SEARCH_FILTER_TYPE filterType,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_SearchOutcomesByFilterWithFacilityFlexing (
        /*[in]*/ BSTR sSearch,
        /*[in]*/ OC_SEARCH_FILTER_TYPE filterType,
        /*[in]*/ double dPatientLocationCd,
        /*[out,retval]*/ long * pCount ) = 0;
};

struct __declspec(uuid("15274b74-fd86-4c83-8a8e-144e3e7b1b83"))
OutcomeResult;
    // [ default ] interface IOutcomeResult

struct __declspec(uuid("ff2e1bfc-5466-40f6-aedb-7e9178b4b180"))
TaskLookup;
    // [ default ] interface ITaskLookup

struct __declspec(uuid("864fe12f-dd15-431d-ae0b-aeb145990eda"))
ITaskLookup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTaskDescription))
    _bstr_t TaskDescription[];
    __declspec(property(get=GetReferenceTaskId))
    double ReferenceTaskId[];

    //
    // Wrapper methods for error-handling
    //

    long SearchTasks (
        _bstr_t sSearch );
    _bstr_t GetTaskDescription (
        int Index );
    double GetReferenceTaskId (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SearchTasks (
        /*[in]*/ BSTR sSearch,
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_TaskDescription (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceTaskId (
        /*[in]*/ int Index,
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("a430916f-a3d2-4707-922f-91474a20933d"))
Ingredient;
    // interface IProVideObject
    // [ default ] interface IIngredient

struct __declspec(uuid("b3f10542-7d53-4d99-8c89-f6d9929b6f2d"))
Variance;
    // interface IProVideObject
    // [ default ] interface IVariance

struct __declspec(uuid("10cd5ab9-2f1b-4685-9020-ffa604d2fc77"))
ComponentGroup;
    // interface IProVideObject
    // [ default ] interface IGroup

struct __declspec(uuid("f6383c17-a7d8-458f-862e-ab36c1121f49"))
IdMngr;
    // [ default ] interface IIdMngr

struct __declspec(uuid("9b6ca14e-3bba-41a5-bd2a-69f3c093fcfe"))
PlanPrivManager;
    // [ default ] interface IPlanPrivManager

struct __declspec(uuid("dffd161e-9324-48b4-b4af-0017e15cdf68"))
IPlanPrivManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExceptions (
        double dPatientId,
        double dEncounter,
        PLAN_PRIV ePlanPriv );
    PLAN_PRIV_VALUE GetPrivValue (
        double dPatientId,
        double dEncounter,
        PLAN_PRIV ePlanPriv );
    long HasPrivilegeByDisp (
        double dPatientId,
        double dEncounter,
        PLAN_PRIV ePlanPriv,
        IDispatch * pDisp );
    long HasPrivilegeByType (
        double dPatientId,
        double dEncounter,
        PLAN_PRIV ePlanPriv,
        double dPlanTypeCode );
    HRESULT Refresh ( );
    long CanUserUpdatePlans (
        double dPatientId,
        double dEncounterId );
    long DoesUpdatePlansPrivilegeHaveIncludeExceptions (
        double dPatientId,
        double dEncounterId );
    long DoesUpdatePlansPrivilegeHaveExcludeExceptions (
        double dPatientId,
        double dEncounterId );
    _variant_t GetUpdatePlansPrivilegeExceptions (
        double dPatientId,
        double dEncounterId );
    long DoesUserHavePrivilegeToUpdatePhase (
        double dPatientId,
        double dEncounterId,
        IDispatch * pDispatch );
    long DoesUserHavePrivilegeToUpdateComponent (
        double dPatientId,
        double dEncounterId,
        IDispatch * pDispatch );
    long DoesUserHavePrivilegeToAcceptProposals (
        double dPatientId,
        double dEncounterId );
    long DoesUserHavePrivilegeToAcceptReviews (
        double dPatientId,
        double dEncounterId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetExceptions (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounter,
        /*[in]*/ PLAN_PRIV ePlanPriv,
        /*[out,retval]*/ VARIANT * vExceptions ) = 0;
      virtual HRESULT __stdcall raw_GetPrivValue (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounter,
        /*[in]*/ PLAN_PRIV ePlanPriv,
        /*[out,retval]*/ PLAN_PRIV_VALUE * ePrivValue ) = 0;
      virtual HRESULT __stdcall raw_HasPrivilegeByDisp (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounter,
        /*[in]*/ PLAN_PRIV ePlanPriv,
        /*[in]*/ IDispatch * pDisp,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasPrivilegeByType (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounter,
        /*[in]*/ PLAN_PRIV ePlanPriv,
        /*[in]*/ double dPlanTypeCode,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_CanUserUpdatePlans (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pCanUserUpdatePlans ) = 0;
      virtual HRESULT __stdcall raw_DoesUpdatePlansPrivilegeHaveIncludeExceptions (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pDoesPrivilegeHaveIncludeExceptions ) = 0;
      virtual HRESULT __stdcall raw_DoesUpdatePlansPrivilegeHaveExcludeExceptions (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pDoesPrivilegeHaveExcludeExceptions ) = 0;
      virtual HRESULT __stdcall raw_GetUpdatePlansPrivilegeExceptions (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ VARIANT * pExceptions ) = 0;
      virtual HRESULT __stdcall raw_DoesUserHavePrivilegeToUpdatePhase (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pDoesUserHavePrivilegeToUpdatePhase ) = 0;
      virtual HRESULT __stdcall raw_DoesUserHavePrivilegeToUpdateComponent (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pDoesUserHavePrivilegeToUpdateComponent ) = 0;
      virtual HRESULT __stdcall raw_DoesUserHavePrivilegeToAcceptProposals (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pDoesUserHavePrivilegeToAcceptProposals ) = 0;
      virtual HRESULT __stdcall raw_DoesUserHavePrivilegeToAcceptReviews (
        /*[in]*/ double dPatientId,
        /*[in]*/ double dEncounterId,
        /*[out,retval]*/ long * pDoesUserHavePrivilegeToAcceptReviews ) = 0;
};

struct __declspec(uuid("475ac239-427f-4935-9c48-2f882bcdd757"))
SuggestedPlan;
    // interface IProVideObject
    // [ default ] interface ISuggestedPlan

struct __declspec(uuid("807d3756-2890-4953-89f4-24a5969fa99e"))
ISuggestedPlan : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetTaskId,put=PutTaskId))
    double TaskId;
    __declspec(property(get=GetTaskStatusCd,put=PutTaskStatusCd))
    double TaskStatusCd;
    __declspec(property(get=GetTaskUpdateCount,put=PutTaskUpdateCount))
    long TaskUpdateCount;
    __declspec(property(get=GetPlanCatalogId,put=PutPlanCatalogId))
    double PlanCatalogId;
    __declspec(property(get=GetDisplayDescription,put=PutDisplayDescription))
    _bstr_t DisplayDescription;
    __declspec(property(get=GetPathwayTypeCd,put=PutPathwayTypeCd))
    double PathwayTypeCd;
    __declspec(property(get=GetPlanSuggestedDate,put=PutPlanSuggestedDate))
    DATE PlanSuggestedDate;
    __declspec(property(get=GetPlanSuggestedDateTimeZone,put=PutPlanSuggestedDateTimeZone))
    unsigned __int64 PlanSuggestedDateTimeZone;
    __declspec(property(get=GetPlanSuggestedReason,put=PutPlanSuggestedReason))
    _bstr_t PlanSuggestedReason;
    __declspec(property(get=GetPlanEvidenceReltnId,put=PutPlanEvidenceReltnId))
    double PlanEvidenceReltnId;
    __declspec(property(get=GetEvidenceLocator,put=PutEvidenceLocator))
    _bstr_t EvidenceLocator;
    __declspec(property(get=GetEvidenceTypeMean,put=PutEvidenceTypeMean))
    _bstr_t EvidenceTypeMean;
    __declspec(property(get=GetActionReasonCd,put=PutActionReasonCd))
    double ActionReasonCd;
    __declspec(property(get=GetActionReasonComment,put=PutActionReasonComment))
    _bstr_t ActionReasonComment;
    __declspec(property(get=GetActionTypeCd,put=PutActionTypeCd))
    double ActionTypeCd;
    __declspec(property(get=GetRefTextExist,put=PutRefTextExist))
    short RefTextExist;
    __declspec(property(get=GetUTCPlanSuggestedDate,put=PutUTCPlanSuggestedDate))
    IDispatchPtr UTCPlanSuggestedDate;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetKey ( );
    double GetTaskId ( );
    void PutTaskId (
        double pVal );
    double GetTaskStatusCd ( );
    void PutTaskStatusCd (
        double pVal );
    long GetTaskUpdateCount ( );
    void PutTaskUpdateCount (
        long pVal );
    double GetPlanCatalogId ( );
    void PutPlanCatalogId (
        double pVal );
    _bstr_t GetDisplayDescription ( );
    void PutDisplayDescription (
        _bstr_t pVal );
    double GetPathwayTypeCd ( );
    void PutPathwayTypeCd (
        double pVal );
    DATE GetPlanSuggestedDate ( );
    void PutPlanSuggestedDate (
        DATE pVal );
    unsigned __int64 GetPlanSuggestedDateTimeZone ( );
    void PutPlanSuggestedDateTimeZone (
        unsigned __int64 pVal );
    _bstr_t GetPlanSuggestedReason ( );
    void PutPlanSuggestedReason (
        _bstr_t pVal );
    double GetPlanEvidenceReltnId ( );
    void PutPlanEvidenceReltnId (
        double pVal );
    _bstr_t GetEvidenceLocator ( );
    void PutEvidenceLocator (
        _bstr_t pVal );
    _bstr_t GetEvidenceTypeMean ( );
    void PutEvidenceTypeMean (
        _bstr_t pVal );
    double GetActionReasonCd ( );
    void PutActionReasonCd (
        double pVal );
    _bstr_t GetActionReasonComment ( );
    void PutActionReasonComment (
        _bstr_t pVal );
    double GetActionTypeCd ( );
    void PutActionTypeCd (
        double pVal );
    short GetRefTextExist ( );
    void PutRefTextExist (
        short pVal );
    IDispatchPtr GetUTCPlanSuggestedDate ( );
    void PutUTCPlanSuggestedDate (
        IDispatch * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_TaskId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TaskId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TaskStatusCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TaskStatusCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TaskUpdateCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TaskUpdateCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PlanCatalogId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanCatalogId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayDescription (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayDescription (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PathwayTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PathwayTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlanSuggestedDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanSuggestedDate (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_PlanSuggestedDateTimeZone (
        /*[out,retval]*/ unsigned __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanSuggestedDateTimeZone (
        /*[in]*/ unsigned __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_PlanSuggestedReason (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanSuggestedReason (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PlanEvidenceReltnId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanEvidenceReltnId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EvidenceLocator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvidenceLocator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EvidenceTypeMean (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EvidenceTypeMean (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionReasonCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionReasonCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ActionReasonComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionReasonComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionTypeCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionTypeCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RefTextExist (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_RefTextExist (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_UTCPlanSuggestedDate (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_UTCPlanSuggestedDate (
        /*[in]*/ IDispatch * pVal ) = 0;
};

struct __declspec(uuid("33c4ebb4-389f-49fc-b3ba-3e77095fbeca"))
MaintenanceCriterion;
    // [ default ] interface IMaintenanceCriterion

struct __declspec(uuid("3c590c26-907a-423b-81eb-cfbef7c77469"))
IMaintenanceCriterion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlanDescription,put=PutPlanDescription))
    _bstr_t PlanDescription;
    __declspec(property(get=GetPwMaintenanceCriteriaId,put=PutPwMaintenanceCriteriaId))
    double PwMaintenanceCriteriaId;
    __declspec(property(get=GetVersionPwCatId,put=PutVersionPwCatId))
    double VersionPwCatId;
    __declspec(property(get=GetTimeUnitCd,put=PutTimeUnitCd))
    double TimeUnitCd;
    __declspec(property(get=GetTimeQty,put=PutTimeQty))
    long TimeQty;
    __declspec(property(get=GetUpdtCnt,put=PutUpdtCnt))
    long UpdtCnt;
    __declspec(property(get=GetMaintenanceCriterionAction,put=PutMaintenanceCriterionAction))
    EMaintenanceCriterionAction MaintenanceCriterionAction;
    __declspec(property(get=GetMaintenanceCriterionType,put=PutMaintenanceCriterionType))
    EMaintenanceCriterionType MaintenanceCriterionType;
    __declspec(property(get=GetMaintenanceCriterionEncounterType,put=PutMaintenanceCriterionEncounterType))
    EMaintenanceCriterionEncounterType MaintenanceCriterionEncounterType;
    __declspec(property(get=GetMaintenanceCriterionPlanExpirationType,put=PutMaintenanceCriterionPlanExpirationType))
    EMaintenanceCriterionPlanExpirationType MaintenanceCriterionPlanExpirationType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPlanDescription ( );
    void PutPlanDescription (
        _bstr_t pVal );
    double GetPwMaintenanceCriteriaId ( );
    void PutPwMaintenanceCriteriaId (
        double pVal );
    double GetVersionPwCatId ( );
    void PutVersionPwCatId (
        double pVal );
    double GetTimeUnitCd ( );
    void PutTimeUnitCd (
        double pVal );
    long GetTimeQty ( );
    void PutTimeQty (
        long pVal );
    long GetUpdtCnt ( );
    void PutUpdtCnt (
        long pVal );
    EMaintenanceCriterionAction GetMaintenanceCriterionAction ( );
    void PutMaintenanceCriterionAction (
        EMaintenanceCriterionAction pVal );
    EMaintenanceCriterionType GetMaintenanceCriterionType ( );
    void PutMaintenanceCriterionType (
        EMaintenanceCriterionType pVal );
    EMaintenanceCriterionEncounterType GetMaintenanceCriterionEncounterType ( );
    void PutMaintenanceCriterionEncounterType (
        EMaintenanceCriterionEncounterType pVal );
    HRESULT Copy (
        struct IMaintenanceCriterion * pMaintenanceCriterion );
    long IsEqual (
        struct IMaintenanceCriterion * pMaintenanceCriterion );
    EMaintenanceCriterionPlanExpirationType GetMaintenanceCriterionPlanExpirationType ( );
    void PutMaintenanceCriterionPlanExpirationType (
        EMaintenanceCriterionPlanExpirationType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlanDescription (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanDescription (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PwMaintenanceCriteriaId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PwMaintenanceCriteriaId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VersionPwCatId (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionPwCatId (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeUnitCd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeUnitCd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeQty (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeQty (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UpdtCnt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UpdtCnt (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaintenanceCriterionAction (
        /*[out,retval]*/ EMaintenanceCriterionAction * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintenanceCriterionAction (
        /*[in]*/ EMaintenanceCriterionAction pVal ) = 0;
      virtual HRESULT __stdcall get_MaintenanceCriterionType (
        /*[out,retval]*/ EMaintenanceCriterionType * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintenanceCriterionType (
        /*[in]*/ EMaintenanceCriterionType pVal ) = 0;
      virtual HRESULT __stdcall get_MaintenanceCriterionEncounterType (
        /*[out,retval]*/ EMaintenanceCriterionEncounterType * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintenanceCriterionEncounterType (
        /*[in]*/ EMaintenanceCriterionEncounterType pVal ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IMaintenanceCriterion * pMaintenanceCriterion ) = 0;
      virtual HRESULT __stdcall raw_IsEqual (
        /*[in]*/ struct IMaintenanceCriterion * pMaintenanceCriterion,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_MaintenanceCriterionPlanExpirationType (
        /*[out,retval]*/ EMaintenanceCriterionPlanExpirationType * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintenanceCriterionPlanExpirationType (
        /*[in]*/ EMaintenanceCriterionPlanExpirationType pVal ) = 0;
};

struct __declspec(uuid("3ec71d8e-611e-4445-bd80-e476c7352029"))
FolderLookup;
    // [ default ] interface IFolderLookup

struct __declspec(uuid("aa8be575-bc8a-4f48-bfff-ab01328a7d0f"))
IFolderLookup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutPatientId))
    double PatientId;
    __declspec(property(put=PutEncounterId))
    double EncounterId;
    __declspec(property(put=PutVenueTypeCd))
    double VenueTypeCd;
    __declspec(property(put=PutViewPlans))
    long ViewPlans;
    __declspec(property(get=GetInTestPlansFolder))
    LONG_PTR InTestPlansFolder;
    __declspec(property(put=PutViewRegimens))
    long ViewRegimens;
    __declspec(property(get=GetDontShowFavoritePlans,put=PutDontShowFavoritePlans))
    long DontShowFavoritePlans;
    __declspec(property(get=GetFavoritesSortPref))
    long FavoritesSortPref;
    __declspec(property(get=GetPersonalizedPlansFolder))
    LONG_PTR PersonalizedPlansFolder;
    __declspec(property(put=PutViewOrders))
    long ViewOrders;
    __declspec(property(get=GetRootPtr))
    LONG_PTR RootPtr;
    __declspec(property(put=PutEnableInTestPlans))
    long EnableInTestPlans;
    __declspec(property(get=GetPrsnlPlansFolder))
    LONG_PTR PrsnlPlansFolder;
    __declspec(property(get=GetFavoritesPtr))
    LONG_PTR FavoritesPtr;
    __declspec(property(get=GetHomePtr))
    LONG_PTR HomePtr;
    __declspec(property(get=GetHomeRootPtr))
    LONG_PTR HomeRootPtr;
    __declspec(property(put=PutEnablePrsnlPlans))
    long EnablePrsnlPlans;
    __declspec(property(put=PutEnablePersonalizedPlans))
    long EnablePersonalizedPlans;

    //
    // Wrapper methods for error-handling
    //

    void PutPatientId (
        double _arg1 );
    void PutEncounterId (
        double _arg1 );
    void PutVenueTypeCd (
        double _arg1 );
    void PutViewPlans (
        long _arg1 );
    HRESULT LoadDefaultFolders ( );
    long LoadFavoritesWithPrsnlPlans ( );
    long GetDontShowFavoritePlans ( );
    void PutDontShowFavoritePlans (
        long pVal );
    HRESULT ResetEncntrSpecificInfo ( );
    long GetFavoritesSortPref ( );
    HRESULT UpdateFavoriteSortPref (
        long bAlphaSort );
    LONG_PTR GetRootPtr ( );
    LONG_PTR GetFavFolderByAltSelCatId (
        double dAltSelCatId );
    LONG_PTR GetPrsnlPlansFolder ( );
    LONG_PTR GetFavoritesPtr ( );
    LONG_PTR GetHomePtr ( );
    LONG_PTR GetHomeRootPtr ( );
    HRESULT SetFolderAsHome (
        LONG_PTR pVal );
    HRESULT AddHomeFolder (
        LONG_PTR pFolder );
    long IsFolderLoaded (
        LONG_PTR pAsFolder );
    HRESULT ClearChildList (
        LONG_PTR pAsFolder );
    HRESULT SortAllItemsAndChildItems (
        LONG_PTR pAsFolder );
    long RemoveFavorite (
        LONG_PTR pItem );
    long AddFavoriteItem (
        LONG_PTR pItem,
        double dParentAltSelId,
        LONG_PTR pFolder );
    long AddFavoriteOrder (
        LONG_PTR pvOrdObj,
        _bstr_t sFavNickname,
        double dParentAltSelId,
        LONG_PTR pFolder );
    long AddCommonFavorite (
        LONG_PTR orderList,
        _bstr_t sFavNickname,
        double dParentAltSelId,
        LONG_PTR pFolder );
    double AddFolder (
        _bstr_t sDesc,
        LONG_PTR pFolder );
    LONG_PTR ModifyFolderItem (
        LONG_PTR pItem,
        double newParentAltSelCatId,
        _bstr_t sDesc );
    HRESULT ResequenceFolder (
        LONG_PTR lFolder,
        LONG_PTR lAltSelArr );
    HRESULT LoadPrsnlPlansChildren (
        LONG_PTR lLoadArray );
    long GetPrsnlPlansChildren (
        LONG_PTR lLoadArray );
    HRESULT GetChildren (
        LONG_PTR lFolder,
        LONG_PTR lLoadArray );
    long LoadInTestPlans ( );
    HRESULT LoadInTestPlansChildren (
        LONG_PTR lLoadArray );
    long GetInTestPlansChildren (
        LONG_PTR lLoadArray );
    LONG_PTR GetInTestPlansFolder ( );
    void PutViewRegimens (
        long _arg1 );
    long LoadPersonalizedPlans ( );
    HRESULT LoadPersonalizedPlansChildren (
        LONG_PTR lLoadArray );
    long GetPersonalizedPlansChildren (
        LONG_PTR lLoadArray );
    LONG_PTR GetPersonalizedPlansFolder ( );
    void PutViewOrders (
        long _arg1 );
    void PutEnableInTestPlans (
        long _arg1 );
    void PutEnablePrsnlPlans (
        long _arg1 );
    void PutEnablePersonalizedPlans (
        long _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PatientId (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_EncounterId (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_VenueTypeCd (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_ViewPlans (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_LoadDefaultFolders ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFavoritesWithPrsnlPlans (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DontShowFavoritePlans (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DontShowFavoritePlans (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetEncntrSpecificInfo ( ) = 0;
      virtual HRESULT __stdcall get_FavoritesSortPref (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateFavoriteSortPref (
        /*[in]*/ long bAlphaSort ) = 0;
      virtual HRESULT __stdcall get_RootPtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFavFolderByAltSelCatId (
        /*[in]*/ double dAltSelCatId,
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PrsnlPlansFolder (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FavoritesPtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HomePtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HomeRootPtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFolderAsHome (
        /*[in]*/ LONG_PTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AddHomeFolder (
        /*[in]*/ LONG_PTR pFolder ) = 0;
      virtual HRESULT __stdcall raw_IsFolderLoaded (
        /*[in]*/ LONG_PTR pAsFolder,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearChildList (
        /*[in]*/ LONG_PTR pAsFolder ) = 0;
      virtual HRESULT __stdcall raw_SortAllItemsAndChildItems (
        /*[in]*/ LONG_PTR pAsFolder ) = 0;
      virtual HRESULT __stdcall raw_RemoveFavorite (
        /*[in]*/ LONG_PTR pItem,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddFavoriteItem (
        /*[in]*/ LONG_PTR pItem,
        /*[in]*/ double dParentAltSelId,
        /*[in]*/ LONG_PTR pFolder,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddFavoriteOrder (
        /*[in]*/ LONG_PTR pvOrdObj,
        /*[in]*/ BSTR sFavNickname,
        /*[in]*/ double dParentAltSelId,
        /*[in]*/ LONG_PTR pFolder,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddCommonFavorite (
        /*[in]*/ LONG_PTR orderList,
        /*[in]*/ BSTR sFavNickname,
        /*[in]*/ double dParentAltSelId,
        /*[in]*/ LONG_PTR pFolder,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddFolder (
        /*[in]*/ BSTR sDesc,
        /*[in]*/ LONG_PTR pFolder,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyFolderItem (
        /*[in]*/ LONG_PTR pItem,
        /*[in]*/ double newParentAltSelCatId,
        /*[in]*/ BSTR sDesc,
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ResequenceFolder (
        /*[in]*/ LONG_PTR lFolder,
        /*[in]*/ LONG_PTR lAltSelArr ) = 0;
      virtual HRESULT __stdcall raw_LoadPrsnlPlansChildren (
        /*[in]*/ LONG_PTR lLoadArray ) = 0;
      virtual HRESULT __stdcall raw_GetPrsnlPlansChildren (
        /*[in]*/ LONG_PTR lLoadArray,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetChildren (
        /*[in]*/ LONG_PTR lFolder,
        /*[in]*/ LONG_PTR lLoadArray ) = 0;
      virtual HRESULT __stdcall raw_LoadInTestPlans (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadInTestPlansChildren (
        /*[in]*/ LONG_PTR lLoadArray ) = 0;
      virtual HRESULT __stdcall raw_GetInTestPlansChildren (
        LONG_PTR lLoadArray,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_InTestPlansFolder (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewRegimens (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_LoadPersonalizedPlans (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadPersonalizedPlansChildren (
        /*[in]*/ LONG_PTR lLoadArray ) = 0;
      virtual HRESULT __stdcall raw_GetPersonalizedPlansChildren (
        LONG_PTR lLoadArray,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PersonalizedPlansFolder (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewOrders (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall put_EnableInTestPlans (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall put_EnablePrsnlPlans (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall put_EnablePersonalizedPlans (
        /*[in]*/ long _arg1 ) = 0;
};

struct __declspec(uuid("61022344-d447-46cb-8c71-0e4f50153cae"))
OrderLookupEx;
    // [ default ] interface IOrderLookupEx

struct __declspec(uuid("b0a1e52e-0f86-4e62-b0d5-38e7d1bbbc6b"))
IOrderLookupEx : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutPatientId))
    double PatientId;
    __declspec(property(put=PutEncounterId))
    double EncounterId;
    __declspec(property(get=GetOnlyFormularyStatus,put=PutOnlyFormularyStatus))
    long OnlyFormularyStatus;
    __declspec(property(get=GetSearchResultsCount))
    INT_PTRX SearchResultsCount;

    //
    // Wrapper methods for error-handling
    //

    void PutPatientId (
        double _arg1 );
    void PutEncounterId (
        double _arg1 );
    long GetOnlyFormularyStatus ( );
    void PutOnlyFormularyStatus (
        long pVal );
    INT_PTRX GetSearchResultsCount ( );
    LONG_PTR GetSearchResult (
        long Index );
    INT_PTRX Search (
        LONG_PTR lOrderableSearchStruct );
    long IsProposalAllowed (
        LONG_PTR lOrderableSearchStruct );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PatientId (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_EncounterId (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_OnlyFormularyStatus (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OnlyFormularyStatus (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SearchResultsCount (
        /*[out,retval]*/ INT_PTRX * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSearchResult (
        /*[in]*/ long Index,
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ LONG_PTR lOrderableSearchStruct,
        /*[out,retval]*/ INT_PTRX * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsProposalAllowed (
        /*[in]*/ LONG_PTR lOrderableSearchStruct,
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("5526298c-6ddf-4cc8-8bc8-f568bb833251"))
TherapeuticClassLookUp;
    // [ default ] interface ITherapeuticClassLookUp

struct __declspec(uuid("e7dcf036-25da-43ce-b2cf-aacb13b8848a"))
ITherapeuticClassLookUp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutPatientId))
    double PatientId;
    __declspec(property(put=PutEncounterId))
    double EncounterId;
    __declspec(property(get=GetOnlyFormularyStatus,put=PutOnlyFormularyStatus))
    long OnlyFormularyStatus;
    __declspec(property(get=GetRootPtr))
    LONG_PTR RootPtr;

    //
    // Wrapper methods for error-handling
    //

    void PutPatientId (
        double _arg1 );
    void PutEncounterId (
        double _arg1 );
    long GetOnlyFormularyStatus ( );
    void PutOnlyFormularyStatus (
        long pVal );
    LONG_PTR GetRootPtr ( );
    HRESULT GetChildren (
        LONG_PTR lFolder,
        LONG_PTR lLoadArray );
    LONG_PTR Search (
        LONG_PTR lOrderableSearchStruct,
        LONG_PTR lLoadArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PatientId (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall put_EncounterId (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_OnlyFormularyStatus (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OnlyFormularyStatus (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RootPtr (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetChildren (
        /*[in]*/ LONG_PTR lFolder,
        /*[in]*/ LONG_PTR lLoadArray ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ LONG_PTR lOrderableSearchStruct,
        /*[in]*/ LONG_PTR lLoadArray,
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
};

struct __declspec(uuid("4c93da60-983d-11e0-b1a9-0002a5d5c51b"))
PowerPlansXMLTranslator;
    // [ default ] interface IPowerPlansXMLTranslator

struct __declspec(uuid("380b3340-983d-11e0-84a9-0002a5d5c51b"))
IPowerPlansXMLTranslator : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetXML ( );
    HRESULT SetXML (
        _bstr_t bstrXML );
    HRESULT SetNoteRowBackgroundColor (
        long lColor );
    HRESULT SetNoteRowTextColor (
        long lColor );
    long GetNoteBackgroundColor ( );
    long GetNoteTextColor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetXML (
        /*[out,retval]*/ BSTR * bstrXML ) = 0;
      virtual HRESULT __stdcall raw_SetXML (
        /*[in]*/ BSTR bstrXML ) = 0;
      virtual HRESULT __stdcall raw_SetNoteRowBackgroundColor (
        /*[in]*/ long lColor ) = 0;
      virtual HRESULT __stdcall raw_SetNoteRowTextColor (
        /*[in]*/ long lColor ) = 0;
      virtual HRESULT __stdcall raw_GetNoteBackgroundColor (
        /*[out,retval]*/ long * lColor ) = 0;
      virtual HRESULT __stdcall raw_GetNoteTextColor (
        /*[out,retval]*/ long * lColor ) = 0;
};

struct __declspec(uuid("e3dd0b67-f740-489a-9653-09e3339b474f"))
Review;
    // interface IProVideObject
    // [ default ] interface IReview

struct __declspec(uuid("c53ada23-e486-4163-87d3-9957a92a276f"))
PlanProposalManager;
    // [ default ] interface IPlanProposalManager

struct __declspec(uuid("8f6ba384-a4d7-45e1-af71-f21089216bed"))
IPlanProposalManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long IsProposalNecessary (
        LONG_PTR lIsProposalNecessary );
    long CanPlanBeProposed (
        LONG_PTR lCanPlanBeProposedCriteria );
    long GetProposalStatus (
        LONG_PTR lGetProposalStatusCriteria );
    long IsPendingPropose (
        IDispatch * pDispatch );
    long IsPendingAccept (
        IDispatch * pDispatch );
    long IsPendingReject (
        IDispatch * pDispatch );
    long IsPendingSubmit (
        IDispatch * pDispatch );
    long IsPendingWithdraw (
        IDispatch * pDispatch );
    LONG_PTR AcceptPlanProposal (
        LONG_PTR lAcceptPlanProposalCriteria );
    HRESULT LogTimerForProposedPlanAction (
        IDispatch * pDispatch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsProposalNecessary (
        /*[in]*/ LONG_PTR lIsProposalNecessary,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CanPlanBeProposed (
        /*[in]*/ LONG_PTR lCanPlanBeProposedCriteria,
        /*[out,retval]*/ long * pCanPlanBeProposed ) = 0;
      virtual HRESULT __stdcall raw_GetProposalStatus (
        /*[in]*/ LONG_PTR lGetProposalStatusCriteria,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPendingPropose (
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pPendingPropose ) = 0;
      virtual HRESULT __stdcall raw_IsPendingAccept (
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pPendingAccept ) = 0;
      virtual HRESULT __stdcall raw_IsPendingReject (
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pPendingReject ) = 0;
      virtual HRESULT __stdcall raw_IsPendingSubmit (
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pPendingSubmit ) = 0;
      virtual HRESULT __stdcall raw_IsPendingWithdraw (
        /*[in]*/ IDispatch * pDispatch,
        /*[out,retval]*/ long * pPendingWithdraw ) = 0;
      virtual HRESULT __stdcall raw_AcceptPlanProposal (
        /*[in]*/ LONG_PTR lAcceptPlanProposalCriteria,
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LogTimerForProposedPlanAction (
        /*[in]*/ IDispatch * pDispatch ) = 0;
};

struct __declspec(uuid("3284775a-9896-4a45-acf9-8f075428358a"))
PrecomponentOrder;
    // [ default ] interface IPrecomponentOrder

struct __declspec(uuid("f0639b96-cd1e-4e40-a3b9-391f26ae4c0c"))
IPrecomponentOrder : IProVideObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPatientId,put=PutPatientId))
    double PatientId;
    __declspec(property(get=GetProviderId,put=PutProviderId))
    double ProviderId;
    __declspec(property(get=GetorderId,put=PutorderId))
    double orderId;
    __declspec(property(get=GetVersionPlanCatalogId,put=PutVersionPlanCatalogId))
    double VersionPlanCatalogId;
    __declspec(property(get=GetCycleNumber,put=PutCycleNumber))
    long CycleNumber;
    __declspec(property(get=GetComponentUUID,put=PutComponentUUID))
    _bstr_t ComponentUUID;
    __declspec(property(get=GetRegimenId,put=PutRegimenId))
    double RegimenId;

    //
    // Wrapper methods for error-handling
    //

    void PutPatientId (
        double pPatientId );
    double GetPatientId ( );
    void PutProviderId (
        double pProviderId );
    double GetProviderId ( );
    void PutorderId (
        double pOrderId );
    double GetorderId ( );
    void PutVersionPlanCatalogId (
        double pVersionPlanCatalogId );
    double GetVersionPlanCatalogId ( );
    void PutCycleNumber (
        long pCycleNumber );
    long GetCycleNumber ( );
    void PutComponentUUID (
        _bstr_t pComponentUUID );
    _bstr_t GetComponentUUID ( );
    void PutRegimenId (
        double pRegimenId );
    double GetRegimenId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_PatientId (
        /*[in]*/ double pPatientId ) = 0;
      virtual HRESULT __stdcall get_PatientId (
        /*[out,retval]*/ double * pPatientId ) = 0;
      virtual HRESULT __stdcall put_ProviderId (
        /*[in]*/ double pProviderId ) = 0;
      virtual HRESULT __stdcall get_ProviderId (
        /*[out,retval]*/ double * pProviderId ) = 0;
      virtual HRESULT __stdcall put_orderId (
        /*[in]*/ double pOrderId ) = 0;
      virtual HRESULT __stdcall get_orderId (
        /*[out,retval]*/ double * pOrderId ) = 0;
      virtual HRESULT __stdcall put_VersionPlanCatalogId (
        /*[in]*/ double pVersionPlanCatalogId ) = 0;
      virtual HRESULT __stdcall get_VersionPlanCatalogId (
        /*[out,retval]*/ double * pVersionPlanCatalogId ) = 0;
      virtual HRESULT __stdcall put_CycleNumber (
        /*[in]*/ long pCycleNumber ) = 0;
      virtual HRESULT __stdcall get_CycleNumber (
        /*[out,retval]*/ long * pCycleNumber ) = 0;
      virtual HRESULT __stdcall put_ComponentUUID (
        /*[in]*/ BSTR pComponentUUID ) = 0;
      virtual HRESULT __stdcall get_ComponentUUID (
        /*[out,retval]*/ BSTR * pComponentUUID ) = 0;
      virtual HRESULT __stdcall put_RegimenId (
        /*[in]*/ double pRegimenId ) = 0;
      virtual HRESULT __stdcall get_RegimenId (
        /*[out,retval]*/ double * pRegimenId ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_PVCARECOORDCOMLib =
    {0x8baeab86,0x014f,0x42f0,{0x80,0x85,0xbd,0xf6,0x1e,0xff,0xdf,0xb0}};
extern "C" const GUID __declspec(selectany) CLSID_PlanLookUp =
    {0x899ab2a7,0xf462,0x4cb5,{0xbf,0x5f,0xab,0x15,0xa1,0xb8,0x64,0x19}};
extern "C" const GUID __declspec(selectany) IID_IProVideObject =
    {0x7defb4d6,0xc4f0,0x11d2,{0x96,0x83,0x00,0xc0,0xe3,0x10,0x72,0x4c}};
extern "C" const GUID __declspec(selectany) IID_IOrderSentence =
    {0x3301b1bc,0x1352,0x41c5,{0x8a,0x7a,0x14,0x72,0x7c,0x56,0xb5,0xa2}};
extern "C" const GUID __declspec(selectany) IID_IGroup =
    {0x7656ed7c,0x9c4e,0x4be7,{0xbf,0x01,0x1f,0xe6,0xdf,0xfd,0x8a,0xb7}};
extern "C" const GUID __declspec(selectany) IID_IComponent =
    {0xe8e76297,0xba31,0x4c6c,{0xb1,0x34,0xb4,0x73,0x65,0xcb,0x4c,0x28}};
extern "C" const GUID __declspec(selectany) IID_IPlanAction =
    {0x5aae1c68,0xc284,0x490a,{0xa4,0x01,0x1b,0x8f,0x2b,0x26,0xa1,0xbc}};
extern "C" const GUID __declspec(selectany) IID_IReview =
    {0xb5ef98de,0x6e61,0x4254,{0xb5,0x54,0xad,0x68,0x63,0x8c,0xb2,0xa7}};
extern "C" const GUID __declspec(selectany) IID_IPhase =
    {0xc565dbdd,0xd6f4,0x4554,{0x81,0x09,0xfb,0x07,0xbc,0xc1,0x2a,0xe2}};
extern "C" const GUID __declspec(selectany) IID_IPlan =
    {0x72eb3d41,0xe1ea,0x4c64,{0xb1,0xa1,0x16,0xaf,0x8e,0x34,0x4e,0xf0}};
extern "C" const GUID __declspec(selectany) IID_IPlanLookUp =
    {0xfe4e48d9,0xbfe5,0x453a,{0xb7,0x25,0x34,0x16,0x1a,0x39,0x79,0x62}};
extern "C" const GUID __declspec(selectany) CLSID_Plan =
    {0xd6fd9c03,0x4e96,0x483f,{0x93,0xb3,0x0e,0x87,0x63,0x99,0xee,0xff}};
extern "C" const GUID __declspec(selectany) CLSID_Phase =
    {0x0bdfa94a,0xecc6,0x4858,{0xb3,0x56,0x48,0x36,0x55,0xe6,0x5d,0x08}};
extern "C" const GUID __declspec(selectany) IID_IProVideObjectEvent =
    {0x41faebc3,0x1a90,0x11d3,{0x96,0x8c,0x00,0xc0,0xe3,0x10,0x72,0x4c}};
extern "C" const GUID __declspec(selectany) CLSID_Component =
    {0x227aa138,0x29cc,0x4590,{0x9f,0xd5,0x62,0x9d,0xfa,0x78,0x8b,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_OrderSentence =
    {0xc31a9c7b,0xdf6f,0x44df,{0x83,0x6c,0xe4,0xac,0x12,0x2e,0x95,0xa3}};
extern "C" const GUID __declspec(selectany) CLSID_OrderLookUp =
    {0xc91777d7,0xdd5d,0x4523,{0x91,0x4e,0x12,0x83,0x78,0xe5,0x9c,0x52}};
extern "C" const GUID __declspec(selectany) IID_IOrderLookUp =
    {0x60130dd8,0x66eb,0x40b9,{0xb9,0x92,0x62,0xfe,0x28,0x9a,0x08,0x07}};
extern "C" const GUID __declspec(selectany) IID_IIngredient =
    {0xffea43f1,0x366a,0x4de7,{0xb1,0xa9,0x9d,0xb5,0x6a,0x46,0xd9,0x72}};
extern "C" const GUID __declspec(selectany) IID_IVariance =
    {0xd95de9fd,0x42dd,0x445f,{0xa4,0x11,0x89,0x91,0xc7,0xfa,0xe1,0x6e}};
extern "C" const GUID __declspec(selectany) IID_IIdMngr =
    {0x17dc305d,0xfd51,0x4d19,{0x99,0xa7,0xad,0x75,0xaa,0xe5,0x0f,0x72}};
extern "C" const GUID __declspec(selectany) CLSID_ClinCategory =
    {0x81cd5e35,0x76be,0x416f,{0x86,0x35,0xad,0x7c,0x06,0x12,0x93,0x8d}};
extern "C" const GUID __declspec(selectany) IID_IClinCategory =
    {0xabe13c15,0x45e7,0x4958,{0x81,0xef,0x7a,0xfd,0x37,0x4d,0x5c,0xaf}};
extern "C" const GUID __declspec(selectany) CLSID_PlanAction =
    {0x7e2fcda5,0x70ea,0x4e5a,{0x9d,0x6f,0x87,0xba,0xac,0x96,0x81,0xde}};
extern "C" const GUID __declspec(selectany) CLSID_DTALookup =
    {0xc6c7cbcc,0xc85f,0x4fe0,{0xbc,0x10,0xae,0x0e,0xc1,0x77,0xe8,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IDTALookup =
    {0xe1216ba2,0x228b,0x430b,{0xac,0x35,0x5c,0x03,0xba,0xaa,0xec,0x53}};
extern "C" const GUID __declspec(selectany) CLSID_Outcome =
    {0xf075fa40,0xb7e0,0x438a,{0xba,0xf5,0x3c,0x14,0xe4,0x42,0xcb,0x95}};
extern "C" const GUID __declspec(selectany) IID_IOutcomeResult =
    {0x89bbebfb,0xa415,0x4dc8,{0x86,0x6e,0xcc,0x85,0x4b,0x05,0x5c,0x7e}};
extern "C" const GUID __declspec(selectany) IID_IOutcome =
    {0x3390e561,0xab77,0x4361,{0x82,0x27,0x3a,0x31,0x77,0xb0,0x20,0x48}};
extern "C" const GUID __declspec(selectany) CLSID_OutcomeLookup =
    {0x16c750de,0x7e3e,0x44d8,{0xbb,0x44,0x74,0xd6,0x1c,0xe4,0x25,0xe8}};
extern "C" const GUID __declspec(selectany) IID_IOutcomeLookup =
    {0xa9173c14,0x6f7b,0x4677,{0xa4,0x63,0x92,0x06,0x16,0x4c,0xc7,0xa5}};
extern "C" const GUID __declspec(selectany) CLSID_OutcomeResult =
    {0x15274b74,0xfd86,0x4c83,{0x8a,0x8e,0x14,0x4e,0x3e,0x7b,0x1b,0x83}};
extern "C" const GUID __declspec(selectany) CLSID_TaskLookup =
    {0xff2e1bfc,0x5466,0x40f6,{0xae,0xdb,0x7e,0x91,0x78,0xb4,0xb1,0x80}};
extern "C" const GUID __declspec(selectany) IID_ITaskLookup =
    {0x864fe12f,0xdd15,0x431d,{0xae,0x0b,0xae,0xb1,0x45,0x99,0x0e,0xda}};
extern "C" const GUID __declspec(selectany) CLSID_Ingredient =
    {0xa430916f,0xa3d2,0x4707,{0x92,0x2f,0x91,0x47,0x4a,0x20,0x93,0x3d}};
extern "C" const GUID __declspec(selectany) CLSID_Variance =
    {0xb3f10542,0x7d53,0x4d99,{0x8c,0x89,0xf6,0xd9,0x92,0x9b,0x6f,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_ComponentGroup =
    {0x10cd5ab9,0x2f1b,0x4685,{0x90,0x20,0xff,0xa6,0x04,0xd2,0xfc,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_IdMngr =
    {0xf6383c17,0xa7d8,0x458f,{0x86,0x2e,0xab,0x36,0xc1,0x12,0x1f,0x49}};
extern "C" const GUID __declspec(selectany) CLSID_PlanPrivManager =
    {0x9b6ca14e,0x3bba,0x41a5,{0xbd,0x2a,0x69,0xf3,0xc0,0x93,0xfc,0xfe}};
extern "C" const GUID __declspec(selectany) IID_IPlanPrivManager =
    {0xdffd161e,0x9324,0x48b4,{0xb4,0xaf,0x00,0x17,0xe1,0x5c,0xdf,0x68}};
extern "C" const GUID __declspec(selectany) CLSID_SuggestedPlan =
    {0x475ac239,0x427f,0x4935,{0x9c,0x48,0x2f,0x88,0x2b,0xcd,0xd7,0x57}};
extern "C" const GUID __declspec(selectany) IID_ISuggestedPlan =
    {0x807d3756,0x2890,0x4953,{0x89,0xf4,0x24,0xa5,0x96,0x9f,0xa9,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_MaintenanceCriterion =
    {0x33c4ebb4,0x389f,0x49fc,{0xb3,0xba,0x3e,0x77,0x09,0x5f,0xbe,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMaintenanceCriterion =
    {0x3c590c26,0x907a,0x423b,{0x81,0xeb,0xcf,0xbe,0xf7,0xc7,0x74,0x69}};
extern "C" const GUID __declspec(selectany) CLSID_FolderLookup =
    {0x3ec71d8e,0x611e,0x4445,{0xbd,0x80,0xe4,0x76,0xc7,0x35,0x20,0x29}};
extern "C" const GUID __declspec(selectany) IID_IFolderLookup =
    {0xaa8be575,0xbc8a,0x4f48,{0xbf,0xff,0xab,0x01,0x32,0x8a,0x7d,0x0f}};
extern "C" const GUID __declspec(selectany) CLSID_OrderLookupEx =
    {0x61022344,0xd447,0x46cb,{0x8c,0x71,0x0e,0x4f,0x50,0x15,0x3c,0xae}};
extern "C" const GUID __declspec(selectany) IID_IOrderLookupEx =
    {0xb0a1e52e,0x0f86,0x4e62,{0xb0,0xd5,0x38,0xe7,0xd1,0xbb,0xbc,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_TherapeuticClassLookUp =
    {0x5526298c,0x6ddf,0x4cc8,{0x8b,0xc8,0xf5,0x68,0xbb,0x83,0x32,0x51}};
extern "C" const GUID __declspec(selectany) IID_ITherapeuticClassLookUp =
    {0xe7dcf036,0x25da,0x43ce,{0xb2,0xcf,0xaa,0xcb,0x13,0xb8,0x84,0x8a}};
extern "C" const GUID __declspec(selectany) CLSID_PowerPlansXMLTranslator =
    {0x4c93da60,0x983d,0x11e0,{0xb1,0xa9,0x00,0x02,0xa5,0xd5,0xc5,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IPowerPlansXMLTranslator =
    {0x380b3340,0x983d,0x11e0,{0x84,0xa9,0x00,0x02,0xa5,0xd5,0xc5,0x1b}};
extern "C" const GUID __declspec(selectany) CLSID_Review =
    {0xe3dd0b67,0xf740,0x489a,{0x96,0x53,0x09,0xe3,0x33,0x9b,0x47,0x4f}};
extern "C" const GUID __declspec(selectany) CLSID_PlanProposalManager =
    {0xc53ada23,0xe486,0x4163,{0x87,0xd3,0x99,0x57,0xa9,0x2a,0x27,0x6f}};
extern "C" const GUID __declspec(selectany) IID_IPlanProposalManager =
    {0x8f6ba384,0xa4d7,0x45e1,{0xaf,0x71,0xf2,0x10,0x89,0x21,0x6b,0xed}};
extern "C" const GUID __declspec(selectany) CLSID_PrecomponentOrder =
    {0x3284775a,0x9896,0x4a45,{0xac,0xf9,0x8f,0x07,0x54,0x28,0x35,0x8a}};
extern "C" const GUID __declspec(selectany) IID_IPrecomponentOrder =
    {0xf0639b96,0xcd1e,0x4e40,{0xa3,0xb9,0x39,0x1f,0x26,0xae,0x4c,0x0c}};

//
// Function implementation mapping
//

#pragma start_map_region("p:\ml-native\orders\orders_frontend\code\pvorderschedulemanager\src\main\cpp\testrelease\pvcarecoordcom.tli")
__declspec(implementation_key(1)) _variant_t IProVideObject::GetKey ( );
__declspec(implementation_key(2)) VARIANT_BOOL IProVideObject::GetLocked ( );
__declspec(implementation_key(3)) int IProVideObject::CompareObjects ( IUnknown * pObject );
__declspec(implementation_key(4)) VARIANT_BOOL IProVideObject::LockObject ( );
__declspec(implementation_key(5)) HRESULT IProVideObject::UnlockObject ( );
__declspec(implementation_key(6)) HRESULT IProVideObject::ConnectTo ( IUnknown * pUnk, _GUID * iid, unsigned long * pdw );
__declspec(implementation_key(7)) HRESULT IProVideObject::DisconnectFrom ( _GUID * iid, unsigned long dwVal );
__declspec(implementation_key(8)) double IOrderSentence::GetOrderSentenceId ( );
__declspec(implementation_key(9)) void IOrderSentence::PutOrderSentenceId ( double pVal );
__declspec(implementation_key(10)) _bstr_t IOrderSentence::GetOrderSentenceDisplayLine ( );
__declspec(implementation_key(11)) void IOrderSentence::PutOrderSentenceDisplayLine ( _bstr_t pVal );
__declspec(implementation_key(12)) long IOrderSentence::GetSequence ( );
__declspec(implementation_key(13)) void IOrderSentence::PutSequence ( long pVal );
__declspec(implementation_key(14)) _variant_t IOrderSentence::GetValue ( long ldetSeq, DETAIL_TYPE eDetType );
__declspec(implementation_key(15)) void IOrderSentence::PutValue ( long ldetSeq, DETAIL_TYPE eDetType, const _variant_t & pVal );
__declspec(implementation_key(16)) long IOrderSentence::GetDetailCount ( );
__declspec(implementation_key(17)) HRESULT IOrderSentence::Copy ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(18)) long IOrderSentence::IsEqual ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(19)) _bstr_t IOrderSentence::GetComment ( );
__declspec(implementation_key(20)) void IOrderSentence::PutComment ( _bstr_t pVal );
__declspec(implementation_key(21)) double IOrderSentence::GetCommentTextId ( );
__declspec(implementation_key(22)) void IOrderSentence::PutCommentTextId ( double pVal );
__declspec(implementation_key(23)) HRESULT IOrderSentence::ClearDetails ( );
__declspec(implementation_key(24)) HRESULT IOrderSentence::ToolCopy ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(25)) double IOrderSentence::GetParentSynonymId ( );
__declspec(implementation_key(26)) void IOrderSentence::PutParentSynonymId ( double pVal );
__declspec(implementation_key(27)) _bstr_t IOrderSentence::GetRxTypeMean ( );
__declspec(implementation_key(28)) void IOrderSentence::PutRxTypeMean ( _bstr_t pVal );
__declspec(implementation_key(29)) long IOrderSentence::GetNormDoseUnitInd ( );
__declspec(implementation_key(30)) void IOrderSentence::PutNormDoseUnitInd ( long pVal );
__declspec(implementation_key(31)) long IOrderSentence::LookupSeqByMeanId ( double dMeanId );
__declspec(implementation_key(32)) long IOrderSentence::HasNormalizedDoseUnit ( );
__declspec(implementation_key(33)) HRESULT IOrderSentence::CopyCoreOrderDetails ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(34)) HRESULT IOrderSentence::CopyCoreMedOrderDetails ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(35)) HRESULT IOrderSentence::CopyCoreIVOrderDetails ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(36)) long IOrderSentence::IsCoreDetailEqual ( struct IOrderSentence * pOrdSent );
__declspec(implementation_key(37)) HRESULT IOrderSentence::AddReplaceValue ( long lOrderDetailMeaning, DETAIL_TYPE eDetType, const _variant_t & newVal );
__declspec(implementation_key(38)) EPlanOrderSentenceType IOrderSentence::GetPlanOrderSentenceType ( );
__declspec(implementation_key(39)) void IOrderSentence::PutPlanOrderSentenceType ( EPlanOrderSentenceType pVal );
__declspec(implementation_key(40)) long IOrderSentence::AddOrderSentenceFilter ( LONG_PTR pOrdSentFilter );
__declspec(implementation_key(41)) long IOrderSentence::GetOrderSentenceFilterCnt ( );
__declspec(implementation_key(42)) HRESULT IOrderSentence::GetOrderSentenceFilterAt ( int iIndex, LONG_PTR lVal );
__declspec(implementation_key(43)) _bstr_t IOrderSentence::GetOrderSentenceFilterDisplay ( );
__declspec(implementation_key(44)) void IOrderSentence::PutOrderSentenceFilterDisplay ( _bstr_t pVal );
__declspec(implementation_key(45)) long IOrderSentence::GetApplicableToPatientInd ( );
__declspec(implementation_key(46)) void IOrderSentence::PutApplicableToPatientInd ( long pVal );
__declspec(implementation_key(47)) HRESULT IOrderSentence::ClearFilters ( );
__declspec(implementation_key(48)) long IOrderSentence::GetSavedToDatabase ( );
__declspec(implementation_key(49)) void IOrderSentence::PutSavedToDatabase ( long pVal );
__declspec(implementation_key(50)) HRESULT IOrderSentence::GetOrderDetailsVector ( LONG_PTR lOrderDetailsVector );
__declspec(implementation_key(51)) double IGroup::GetGroupId ( );
__declspec(implementation_key(52)) void IGroup::PutGroupId ( double pVal );
__declspec(implementation_key(53)) _bstr_t IGroup::GetGroupTypeMean ( );
__declspec(implementation_key(54)) void IGroup::PutGroupTypeMean ( _bstr_t pVal );
__declspec(implementation_key(55)) long IGroup::MemberCount ( );
__declspec(implementation_key(56)) IDispatchPtr IGroup::GetMemberDispAt ( int Index );
__declspec(implementation_key(57)) void IGroup::PutMemberDispAt ( int Index, IDispatch * ppDisp );
__declspec(implementation_key(58)) long IGroup::GetMemberSeqAt ( int Index );
__declspec(implementation_key(59)) void IGroup::PutMemberSeqAt ( int Index, long pVal );
__declspec(implementation_key(60)) _variant_t IGroup::GetKey ( );
__declspec(implementation_key(61)) int IGroup::AddMember ( );
__declspec(implementation_key(62)) double IGroup::GetActGroupId ( );
__declspec(implementation_key(63)) void IGroup::PutActGroupId ( double pVal );
__declspec(implementation_key(64)) HRESULT IGroup::RemoveAllMembers ( );
__declspec(implementation_key(65)) HRESULT IGroup::Copy ( struct IGroup * pGroup );
__declspec(implementation_key(66)) long IGroup::IsEqual ( struct IGroup * pGroup );
__declspec(implementation_key(67)) HRESULT IGroup::RemoveMemberAt ( int Index );
__declspec(implementation_key(68)) _bstr_t IGroup::GetCPGroupDesc ( );
__declspec(implementation_key(69)) void IGroup::PutCPGroupDesc ( _bstr_t pVal );
__declspec(implementation_key(70)) double IGroup::GetCPGroupSynonymId ( );
__declspec(implementation_key(71)) void IGroup::PutCPGroupSynonymId ( double pVal );
__declspec(implementation_key(72)) HRESULT IGroup::RemoveMember ( IDispatch * pDisp );
__declspec(implementation_key(73)) HRESULT IGroup::AddMemberOrderSent ( IDispatch * pDisp );
__declspec(implementation_key(74)) LONG_PTR IGroup::GetMemberOrderSentCnt ( );
__declspec(implementation_key(75)) _bstr_t IGroup::GetMemberOrderSentDispAt ( int Index );
__declspec(implementation_key(76)) long IGroup::GetMemberIncludedAt ( int Index );
__declspec(implementation_key(77)) void IGroup::PutMemberIncludedAt ( int Index, long pVal );
__declspec(implementation_key(78)) _bstr_t IGroup::GetDescription ( );
__declspec(implementation_key(79)) void IGroup::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(80)) long IGroup::GetMemberUpdtCntAt ( int Index );
__declspec(implementation_key(81)) void IGroup::PutMemberUpdtCntAt ( int Index, long pVal );
__declspec(implementation_key(82)) ACTION_TYPE IGroup::GetMemberActionTypeAt ( int Index );
__declspec(implementation_key(83)) void IGroup::PutMemberActionTypeAt ( int Index, ACTION_TYPE pVal );
__declspec(implementation_key(84)) long IGroup::GetMemberIncludedCount ( );
__declspec(implementation_key(85)) long IGroup::GetMemberAnchorIndAt ( int Index );
__declspec(implementation_key(86)) void IGroup::PutMemberAnchorIndAt ( int Index, long pVal );
__declspec(implementation_key(87)) EComponentLinkingRuleType IGroup::GetLinkingRuleType ( );
__declspec(implementation_key(88)) void IGroup::PutLinkingRuleType ( EComponentLinkingRuleType pVal );
__declspec(implementation_key(89)) long IGroup::GetLinkingRuleQuantity ( );
__declspec(implementation_key(90)) void IGroup::PutLinkingRuleQuantity ( long pVal );
__declspec(implementation_key(91)) HRESULT IGroup::AddAction ( LONG_PTR lAction );
__declspec(implementation_key(92)) HRESULT IGroup::GetComponentGroupActions ( LONG_PTR lCompGroupActionsVector );
__declspec(implementation_key(93)) HRESULT IGroup::GetLinkedCompGroupOverrideReason ( double * pOverrideReasonCd, LONG_PTR lOverrideReasonFreetext );
__declspec(implementation_key(94)) HRESULT IGroup::SetLinkedCompGroupOverrideReason ( double dOverrideReasonCd, LONG_PTR lOverrideReasonFreetext );
__declspec(implementation_key(95)) long IGroup::IsAnchoredLinkedComponentGroup ( );
__declspec(implementation_key(96)) EComponentGroupOverrideReasonSetting IGroup::GetOverrideReasonSetting ( );
__declspec(implementation_key(97)) void IGroup::PutOverrideReasonSetting ( EComponentGroupOverrideReasonSetting pVal );
__declspec(implementation_key(98)) IDispatchPtr IGroup::GetLinkedComponentGroupAnchor ( );
__declspec(implementation_key(99)) HRESULT IGroup::DeleteLastAction ( );
__declspec(implementation_key(100)) HRESULT IGroup::DeleteAllActions ( );
__declspec(implementation_key(101)) HRESULT IGroup::ResequenceMembersFromGroup ( int iRemovedIndex );
__declspec(implementation_key(102)) double IComponent::GetComponentId ( );
__declspec(implementation_key(103)) void IComponent::PutComponentId ( double pVal );
__declspec(implementation_key(104)) double IComponent::GetClinicalCatCd ( );
__declspec(implementation_key(105)) void IComponent::PutClinicalCatCd ( double pVal );
__declspec(implementation_key(106)) double IComponent::GetClinicalSubCatCd ( );
__declspec(implementation_key(107)) void IComponent::PutClinicalSubCatCd ( double pVal );
__declspec(implementation_key(108)) double IComponent::GetComponentTypeCd ( );
__declspec(implementation_key(109)) void IComponent::PutComponentTypeCd ( double pVal );
__declspec(implementation_key(110)) double IComponent::GetSynonymId ( );
__declspec(implementation_key(111)) void IComponent::PutSynonymId ( double pVal );
__declspec(implementation_key(112)) double IComponent::GetCatalogCd ( );
__declspec(implementation_key(113)) void IComponent::PutCatalogCd ( double pVal );
__declspec(implementation_key(114)) double IComponent::GetOeFormatId ( );
__declspec(implementation_key(115)) void IComponent::PutOeFormatId ( double pVal );
__declspec(implementation_key(116)) long IComponent::GetSequence ( );
__declspec(implementation_key(117)) void IComponent::PutSequence ( long pVal );
__declspec(implementation_key(118)) long IComponent::GetLinkToPhase ( );
__declspec(implementation_key(119)) void IComponent::PutLinkToPhase ( long pVal );
__declspec(implementation_key(120)) long IComponent::GetRequired ( );
__declspec(implementation_key(121)) void IComponent::PutRequired ( long pVal );
__declspec(implementation_key(122)) long IComponent::GetIncluded ( );
__declspec(implementation_key(123)) void IComponent::PutIncluded ( long pVal );
__declspec(implementation_key(124)) _bstr_t IComponent::GetComponentTypeDisp ( );
__declspec(implementation_key(125)) void IComponent::PutComponentTypeDisp ( _bstr_t pVal );
__declspec(implementation_key(126)) _bstr_t IComponent::GetMnemonic ( );
__declspec(implementation_key(127)) void IComponent::PutMnemonic ( _bstr_t pVal );
__declspec(implementation_key(128)) IUnknownPtr IComponent::GetSentenceCollection ( );
__declspec(implementation_key(129)) HRESULT IComponent::AddOrderSentence ( IDispatch * lpOrderSent );
__declspec(implementation_key(130)) double IComponent::GetOCSClinCatCd ( );
__declspec(implementation_key(131)) void IComponent::PutOCSClinCatCd ( double pVal );
__declspec(implementation_key(132)) double IComponent::GetCatalogTypeCd ( );
__declspec(implementation_key(133)) void IComponent::PutCatalogTypeCd ( double pVal );
__declspec(implementation_key(134)) double IComponent::GetActivityTypeCd ( );
__declspec(implementation_key(135)) void IComponent::PutActivityTypeCd ( double pVal );
__declspec(implementation_key(136)) long IComponent::GetPersistentInd ( );
__declspec(implementation_key(137)) void IComponent::PutPersistentInd ( long pVal );
__declspec(implementation_key(138)) _bstr_t IComponent::GetNoteText ( );
__declspec(implementation_key(139)) void IComponent::PutNoteText ( _bstr_t pVal );
__declspec(implementation_key(140)) ACTION_TYPE IComponent::GetActionType ( );
__declspec(implementation_key(141)) void IComponent::PutActionType ( ACTION_TYPE pVal );
__declspec(implementation_key(142)) long IComponent::GetOrderSentModified ( );
__declspec(implementation_key(143)) void IComponent::PutOrderSentModified ( long pVal );
__declspec(implementation_key(144)) _bstr_t IComponent::GetComponentTypeMean ( );
__declspec(implementation_key(145)) void IComponent::PutComponentTypeMean ( _bstr_t pVal );
__declspec(implementation_key(146)) double IComponent::GetNoteId ( );
__declspec(implementation_key(147)) void IComponent::PutNoteId ( double pVal );
__declspec(implementation_key(148)) long IComponent::GetNoteUpdtCnt ( );
__declspec(implementation_key(149)) void IComponent::PutNoteUpdtCnt ( long pVal );
__declspec(implementation_key(150)) long IComponent::GetUpdtCnt ( );
__declspec(implementation_key(151)) void IComponent::PutUpdtCnt ( long pVal );
__declspec(implementation_key(152)) double IComponent::GetActCompId ( );
__declspec(implementation_key(153)) void IComponent::PutActCompId ( double pVal );
__declspec(implementation_key(154)) double IComponent::GetParentEntId ( );
__declspec(implementation_key(155)) void IComponent::PutParentEntId ( double pVal );
__declspec(implementation_key(156)) _bstr_t IComponent::GetParentEntName ( );
__declspec(implementation_key(157)) void IComponent::PutParentEntName ( _bstr_t pVal );
__declspec(implementation_key(158)) long IComponent::GetInitiated ( );
__declspec(implementation_key(159)) void IComponent::PutInitiated ( long pVal );
__declspec(implementation_key(160)) double IComponent::GetOrdSentId ( );
__declspec(implementation_key(161)) void IComponent::PutOrdSentId ( double pVal );
__declspec(implementation_key(162)) long IComponent::GetActUpdtCnt ( );
__declspec(implementation_key(163)) void IComponent::PutActUpdtCnt ( long pVal );
__declspec(implementation_key(164)) double IComponent::GetCompStatusCd ( );
__declspec(implementation_key(165)) void IComponent::PutCompStatusCd ( double pVal );
__declspec(implementation_key(166)) long IComponent::GetOrderSentenceExist ( );
__declspec(implementation_key(167)) void IComponent::PutOrderSentenceExist ( long pVal );
__declspec(implementation_key(168)) HRESULT IComponent::RemoveOrderSentence ( struct IOrderSentence * pIOrderSentence );
__declspec(implementation_key(169)) HRESULT IComponent::MoveOrderSentence ( struct IOrderSentence * pIOrderSent, VARIANT_BOOL vbMoveUp );
__declspec(implementation_key(170)) long IComponent::GetIsLastComponent ( );
__declspec(implementation_key(171)) void IComponent::PutIsLastComponent ( long pVal );
__declspec(implementation_key(172)) long IComponent::GetRxMask ( );
__declspec(implementation_key(173)) void IComponent::PutRxMask ( long pVal );
__declspec(implementation_key(174)) LONG_PTR IComponent::GetPvOrderObj ( );
__declspec(implementation_key(175)) void IComponent::PutPvOrderObj ( LONG_PTR pVal );
__declspec(implementation_key(176)) HRESULT IComponent::Copy ( struct IComponent * pComponent );
__declspec(implementation_key(177)) long IComponent::IsEqual ( struct IComponent * pComponent );
__declspec(implementation_key(178)) _variant_t IComponent::GetKey ( );
__declspec(implementation_key(179)) double IComponent::GetRefParentEntId ( );
__declspec(implementation_key(180)) void IComponent::PutRefParentEntId ( double pVal );
__declspec(implementation_key(181)) _bstr_t IComponent::GetRefParentEntName ( );
__declspec(implementation_key(182)) void IComponent::PutRefParentEntName ( _bstr_t pVal );
__declspec(implementation_key(183)) _bstr_t IComponent::GetClinicalCatDisp ( );
__declspec(implementation_key(184)) void IComponent::PutClinicalCatDisp ( _bstr_t pVal );
__declspec(implementation_key(185)) _bstr_t IComponent::GetClinicalCatMean ( );
__declspec(implementation_key(186)) void IComponent::PutClinicalCatMean ( _bstr_t pVal );
__declspec(implementation_key(187)) _bstr_t IComponent::GetClinicalSubCatDisp ( );
__declspec(implementation_key(188)) void IComponent::PutClinicalSubCatDisp ( _bstr_t pVal );
__declspec(implementation_key(189)) _bstr_t IComponent::GetClinicalSubCatMean ( );
__declspec(implementation_key(190)) void IComponent::PutClinicalSubCatMean ( _bstr_t pVal );
__declspec(implementation_key(191)) _bstr_t IComponent::GetOCSClinCatDisp ( );
__declspec(implementation_key(192)) void IComponent::PutOCSClinCatDisp ( _bstr_t pVal );
__declspec(implementation_key(193)) _bstr_t IComponent::GetOCSClinCatMean ( );
__declspec(implementation_key(194)) void IComponent::PutOCSClinCatMean ( _bstr_t pVal );
__declspec(implementation_key(195)) _bstr_t IComponent::GetCatalogDisp ( );
__declspec(implementation_key(196)) void IComponent::PutCatalogDisp ( _bstr_t pVal );
__declspec(implementation_key(197)) _bstr_t IComponent::GetCatalogMean ( );
__declspec(implementation_key(198)) void IComponent::PutCatalogMean ( _bstr_t pVal );
__declspec(implementation_key(199)) _bstr_t IComponent::GetCatalogTypeDisp ( );
__declspec(implementation_key(200)) void IComponent::PutCatalogTypeDisp ( _bstr_t pVal );
__declspec(implementation_key(201)) _bstr_t IComponent::GetCatalogTypeMean ( );
__declspec(implementation_key(202)) void IComponent::PutCatalogTypeMean ( _bstr_t pVal );
__declspec(implementation_key(203)) _bstr_t IComponent::GetActivityTypeDisp ( );
__declspec(implementation_key(204)) void IComponent::PutActivityTypeDisp ( _bstr_t pVal );
__declspec(implementation_key(205)) _bstr_t IComponent::GetActivityTypeMean ( );
__declspec(implementation_key(206)) void IComponent::PutActivityTypeMean ( _bstr_t pVal );
__declspec(implementation_key(207)) _bstr_t IComponent::GetCompStatusDisp ( );
__declspec(implementation_key(208)) void IComponent::PutCompStatusDisp ( _bstr_t pVal );
__declspec(implementation_key(209)) _bstr_t IComponent::GetCompStatusMean ( );
__declspec(implementation_key(210)) void IComponent::PutCompStatusMean ( _bstr_t pVal );
__declspec(implementation_key(211)) _bstr_t IComponent::GetOrderSentDisplayAt ( int Index );
__declspec(implementation_key(212)) double IComponent::GetOrderSentenceIdAt ( int Index );
__declspec(implementation_key(213)) long IComponent::GetOrderSentLoaded ( );
__declspec(implementation_key(214)) void IComponent::PutOrderSentLoaded ( long pVal );
__declspec(implementation_key(215)) long IComponent::GetExistingOrdSentCnt ( );
__declspec(implementation_key(216)) HRESULT IComponent::AddExistingOrderSent ( double dOrdSentId, _bstr_t sSentDisplay );
__declspec(implementation_key(217)) long IComponent::GetCatalogInd ( );
__declspec(implementation_key(218)) void IComponent::PutCatalogInd ( long pVal );
__declspec(implementation_key(219)) IDispatchPtr IComponent::GetDispatch ( );
__declspec(implementation_key(220)) void IComponent::PutDispatch ( IDispatch * pVal );
__declspec(implementation_key(221)) long IComponent::GetDurationQty ( );
__declspec(implementation_key(222)) void IComponent::PutDurationQty ( long pVal );
__declspec(implementation_key(223)) double IComponent::GetDurationUnitCd ( );
__declspec(implementation_key(224)) void IComponent::PutDurationUnitCd ( double pVal );
__declspec(implementation_key(225)) _bstr_t IComponent::GetDurationUnitDisp ( );
__declspec(implementation_key(226)) void IComponent::PutDurationUnitDisp ( _bstr_t pVal );
__declspec(implementation_key(227)) _bstr_t IComponent::GetDurationUnitMean ( );
__declspec(implementation_key(228)) void IComponent::PutDurationUnitMean ( _bstr_t pVal );
__declspec(implementation_key(229)) _bstr_t IComponent::GetOutcomeRangeDisp ( );
__declspec(implementation_key(230)) long IComponent::GetIsFirstComponent ( );
__declspec(implementation_key(231)) void IComponent::PutIsFirstComponent ( long pVal );
__declspec(implementation_key(232)) long IComponent::GetTZInd ( );
__declspec(implementation_key(233)) void IComponent::PutTZInd ( long pVal );
__declspec(implementation_key(234)) double IComponent::GetTZOffsetQty ( );
__declspec(implementation_key(235)) void IComponent::PutTZOffsetQty ( double pVal );
__declspec(implementation_key(236)) double IComponent::GetTZOffsetUnitCd ( );
__declspec(implementation_key(237)) void IComponent::PutTZOffsetUnitCd ( double pVal );
__declspec(implementation_key(238)) _bstr_t IComponent::GetTZOffsetUnitDisp ( );
__declspec(implementation_key(239)) void IComponent::PutTZOffsetUnitDisp ( _bstr_t pVal );
__declspec(implementation_key(240)) _bstr_t IComponent::GetTZOffsetUnitMean ( );
__declspec(implementation_key(241)) void IComponent::PutTZOffsetUnitMean ( _bstr_t pVal );
__declspec(implementation_key(242)) _bstr_t IComponent::GetTZMean ( );
__declspec(implementation_key(243)) void IComponent::PutTZMean ( _bstr_t pVal );
__declspec(implementation_key(244)) long IComponent::GetTZActiveInd ( );
__declspec(implementation_key(245)) void IComponent::PutTZActiveInd ( long pVal );
__declspec(implementation_key(246)) IDispatchPtr IComponent::GetIngredientCollection ( );
__declspec(implementation_key(247)) HRESULT IComponent::AddIngredient ( IDispatch * lpIngredient );
__declspec(implementation_key(248)) short IComponent::GetOrderableTypeFlag ( );
__declspec(implementation_key(249)) void IComponent::PutOrderableTypeFlag ( short pVal );
__declspec(implementation_key(250)) IDispatchPtr IComponent::GetParentDispatch ( );
__declspec(implementation_key(251)) void IComponent::PutParentDispatch ( IDispatch * pVal );
__declspec(implementation_key(252)) double IComponent::GetPathwayId ( );
__declspec(implementation_key(253)) void IComponent::PutPathwayId ( double pVal );
__declspec(implementation_key(254)) long IComponent::GetCleanupOrderInd ( );
__declspec(implementation_key(255)) void IComponent::PutCleanupOrderInd ( long pVal );
__declspec(implementation_key(256)) long IComponent::GetOutcomeNote ( );
__declspec(implementation_key(257)) void IComponent::PutOutcomeNote ( long pVal );
__declspec(implementation_key(258)) _bstr_t IComponent::GetCompLabel ( );
__declspec(implementation_key(259)) void IComponent::PutCompLabel ( _bstr_t pVal );
__declspec(implementation_key(260)) long IComponent::GetParentActiveInd ( );
__declspec(implementation_key(261)) void IComponent::PutParentActiveInd ( long pVal );
__declspec(implementation_key(262)) long IComponent::IsComponentAvailable ( );
__declspec(implementation_key(263)) long IComponent::GetFacilityInd ( );
__declspec(implementation_key(264)) void IComponent::PutFacilityInd ( long pVal );
__declspec(implementation_key(265)) _bstr_t IComponent::GetOutcomeTargetDisp ( );
__declspec(implementation_key(266)) IDispatchPtr IComponent::GetGroupCollection ( );
__declspec(implementation_key(267)) HRESULT IComponent::AddGroup ( struct IGroup * pIGroup );
__declspec(implementation_key(268)) int IComponent::GetGroupCount ( );
__declspec(implementation_key(269)) HRESULT IComponent::RemoveGroup ( struct IGroup * pGroup );
__declspec(implementation_key(270)) long IComponent::GetAllFacilityAccessInd ( );
__declspec(implementation_key(271)) void IComponent::PutAllFacilityAccessInd ( long pVal );
__declspec(implementation_key(272)) _variant_t IComponent::GetFacilityAccessList ( );
__declspec(implementation_key(273)) void IComponent::PutFacilityAccessList ( const _variant_t & pVal );
__declspec(implementation_key(274)) long IComponent::GetFacilityAccessListCount ( );
__declspec(implementation_key(275)) double IComponent::GetStartOffsetUnitCd ( );
__declspec(implementation_key(276)) void IComponent::PutStartOffsetUnitCd ( double pVal );
__declspec(implementation_key(277)) _bstr_t IComponent::GetStartOffsetUnitMean ( );
__declspec(implementation_key(278)) void IComponent::PutStartOffsetUnitMean ( _bstr_t pVal );
__declspec(implementation_key(279)) _bstr_t IComponent::GetStartOffsetUnitDisp ( );
__declspec(implementation_key(280)) void IComponent::PutStartOffsetUnitDisp ( _bstr_t pVal );
__declspec(implementation_key(281)) double IComponent::GetStartOffsetQty ( );
__declspec(implementation_key(282)) void IComponent::PutStartOffsetQty ( double pVal );
__declspec(implementation_key(283)) long IComponent::ValidateStartOffsetWithPhase ( );
__declspec(implementation_key(284)) long IComponent::ValidateStartOffsetQuantity ( double dOffsetQty, long bTZ );
__declspec(implementation_key(285)) long IComponent::ValidateStartOffsetUnit ( double dCodeVal, long bTZ );
__declspec(implementation_key(286)) long IComponent::GetImported ( );
__declspec(implementation_key(287)) void IComponent::PutImported ( long pVal );
__declspec(implementation_key(288)) long IComponent::HasOrderTimedPriority ( );
__declspec(implementation_key(289)) long IComponent::HasOrderOffsetPriority ( );
__declspec(implementation_key(290)) _bstr_t IComponent::GetOrderOffsetPriorityValue ( );
__declspec(implementation_key(291)) _bstr_t IComponent::GetXMLOrderDetail ( );
__declspec(implementation_key(292)) void IComponent::PutXMLOrderDetail ( _bstr_t pVal );
__declspec(implementation_key(293)) long IComponent::GetOrderDetailModifyInd ( );
__declspec(implementation_key(294)) void IComponent::PutOrderDetailModifyInd ( long pVal );
__declspec(implementation_key(295)) double IComponent::GetLongBlobId ( );
__declspec(implementation_key(296)) void IComponent::PutLongBlobId ( double pVal );
__declspec(implementation_key(297)) long IComponent::GetRemoveBlobInd ( );
__declspec(implementation_key(298)) void IComponent::PutRemoveBlobInd ( long pVal );
__declspec(implementation_key(299)) _bstr_t IComponent::GetSubPhaseDisplayDesc ( );
__declspec(implementation_key(300)) void IComponent::PutSubPhaseDisplayDesc ( _bstr_t pVal );
__declspec(implementation_key(301)) _bstr_t IComponent::GetSubPhaseDesc ( );
__declspec(implementation_key(302)) void IComponent::PutSubPhaseDesc ( _bstr_t pVal );
__declspec(implementation_key(303)) IDispatchPtr IComponent::GetSubphaseDispatch ( );
__declspec(implementation_key(304)) void IComponent::PutSubphaseDispatch ( IDispatch * pVal );
__declspec(implementation_key(305)) double IComponent::GetParentPlanCatalogId ( );
__declspec(implementation_key(306)) double IComponent::GetCPGroupNbr ( );
__declspec(implementation_key(307)) void IComponent::PutCPGroupNbr ( double pVal );
__declspec(implementation_key(308)) _bstr_t IComponent::GetCPGroupDesc ( );
__declspec(implementation_key(309)) void IComponent::PutCPGroupDesc ( _bstr_t pVal );
__declspec(implementation_key(310)) long IComponent::GetIsCPGroupMember ( );
__declspec(implementation_key(311)) long IComponent::GetChemoInd ( );
__declspec(implementation_key(312)) void IComponent::PutChemoInd ( long pVal );
__declspec(implementation_key(313)) long IComponent::GetChemoRelatedInd ( );
__declspec(implementation_key(314)) void IComponent::PutChemoRelatedInd ( long pVal );
__declspec(implementation_key(315)) long IComponent::GetCrossPhaseGroupInd ( );
__declspec(implementation_key(316)) void IComponent::PutCrossPhaseGroupInd ( long pVal );
__declspec(implementation_key(317)) IGroupPtr IComponent::GetCPGroupPtr ( );
__declspec(implementation_key(318)) long IComponent::GetInclExclChangeInd ( );
__declspec(implementation_key(319)) void IComponent::PutInclExclChangeInd ( long pVal );
__declspec(implementation_key(320)) long IComponent::GetDxPropagationNeeded ( );
__declspec(implementation_key(321)) void IComponent::PutDxPropagationNeeded ( long pVal );
__declspec(implementation_key(322)) long IComponent::GetProActiveInd ( );
__declspec(implementation_key(323)) void IComponent::PutProActiveInd ( long pVal );
__declspec(implementation_key(324)) _bstr_t IComponent::GetHnaOrderMnemonic ( );
__declspec(implementation_key(325)) void IComponent::PutHnaOrderMnemonic ( _bstr_t pVal );
__declspec(implementation_key(326)) _bstr_t IComponent::GetCKI ( );
__declspec(implementation_key(327)) void IComponent::PutCKI ( _bstr_t pVal );
__declspec(implementation_key(328)) long IComponent::GetRefTextMask ( );
__declspec(implementation_key(329)) void IComponent::PutRefTextMask ( long pVal );
__declspec(implementation_key(330)) long IComponent::IsCompCPPropagationAvail ( );
__declspec(implementation_key(331)) long IComponent::IsGroupCPPropagationAvail ( );
__declspec(implementation_key(332)) long IComponent::IsProActiveEvaluationAllowed ( );
__declspec(implementation_key(333)) PLAN_REF_TEXT IComponent::GetReferenceTextAvailable ( );
__declspec(implementation_key(334)) void IComponent::PutReferenceTextAvailable ( PLAN_REF_TEXT pVal );
__declspec(implementation_key(335)) long IComponent::HasNormalizedDoseUnit ( );
__declspec(implementation_key(336)) long IComponent::HasResolvedNormalizedDoseUnit ( );
__declspec(implementation_key(337)) HRESULT IComponent::RemoveIngredientCollection ( );
__declspec(implementation_key(338)) _bstr_t IComponent::GetDisplayMnemonic ( );
__declspec(implementation_key(339)) long IComponent::GetHighAlertAvail ( );
__declspec(implementation_key(340)) void IComponent::PutHighAlertAvail ( long pVal );
__declspec(implementation_key(341)) long IComponent::GetAutoDisplayHighAlert ( );
__declspec(implementation_key(342)) void IComponent::PutAutoDisplayHighAlert ( long pVal );
__declspec(implementation_key(343)) _bstr_t IComponent::GetHighAlertText ( );
__declspec(implementation_key(344)) void IComponent::PutHighAlertText ( _bstr_t pVal );
__declspec(implementation_key(345)) IDispatchPtr IComponent::GetSourceOrderStartDtTm ( );
__declspec(implementation_key(346)) void IComponent::PutSourceOrderStartDtTm ( IDispatch * pVal );
__declspec(implementation_key(347)) long IComponent::GetIsCopyForward ( );
__declspec(implementation_key(348)) void IComponent::PutIsCopyForward ( long pVal );
__declspec(implementation_key(349)) IDispatchPtr IComponent::GetCopyForwardOrdSent ( );
__declspec(implementation_key(350)) void IComponent::PutCopyForwardOrdSent ( IDispatch * ppVal );
__declspec(implementation_key(351)) double IComponent::GetDoseInformationHistoryBlobId ( );
__declspec(implementation_key(352)) void IComponent::PutDoseInformationHistoryBlobId ( double pVal );
__declspec(implementation_key(353)) _bstr_t IComponent::GetDoseInformationHistory ( );
__declspec(implementation_key(354)) void IComponent::PutDoseInformationHistory ( _bstr_t pVal );
__declspec(implementation_key(355)) long IComponent::HasRoutingInfo ( );
__declspec(implementation_key(356)) long IComponent::IsCopyForwardCompCPGPropagationAvail ( );
__declspec(implementation_key(357)) LONG_PTR IComponent::GetXMLOrderDetailPtr ( );
__declspec(implementation_key(358)) LONG_PTR IComponent::GetDoseInformationHistoryPtr ( );
__declspec(implementation_key(359)) long IComponent::GetSkipped ( );
__declspec(implementation_key(360)) void IComponent::PutSkipped ( long pVal );
__declspec(implementation_key(361)) IDispatchPtr IComponent::GetUserRequestedStartDtTm ( );
__declspec(implementation_key(362)) void IComponent::PutUserRequestedStartDtTm ( IDispatch * pVal );
__declspec(implementation_key(363)) _bstr_t IComponent::GetSystemRequestedStartString ( );
__declspec(implementation_key(364)) void IComponent::PutSystemRequestedStartString ( _bstr_t pVal );
__declspec(implementation_key(365)) long IComponent::IsTaperComponent ( );
__declspec(implementation_key(366)) long IComponent::GetDefaultOrderSentenceInd ( );
__declspec(implementation_key(367)) void IComponent::PutDefaultOrderSentenceInd ( long pVal );
__declspec(implementation_key(368)) EMissingRequiredDetails IComponent::GetMissingRequiredDetails ( );
__declspec(implementation_key(369)) void IComponent::PutMissingRequiredDetails ( EMissingRequiredDetails pVal );
__declspec(implementation_key(370)) LONG_PTR IComponent::GetOrderProposal ( );
__declspec(implementation_key(371)) void IComponent::PutOrderProposal ( LONG_PTR pVal );
__declspec(implementation_key(372)) long IComponent::HasBeenModified ( );
__declspec(implementation_key(373)) double IComponent::GetOldProposalId ( );
__declspec(implementation_key(374)) void IComponent::PutOldProposalId ( double pVal );
__declspec(implementation_key(375)) long IComponent::GetInactivateBlobInd ( );
__declspec(implementation_key(376)) void IComponent::PutInactivateBlobInd ( long pVal );
__declspec(implementation_key(377)) HRESULT IComponent::EvaluateMissingRequiredDetails ( );
__declspec(implementation_key(378)) double IComponent::GetOrderId ( );
__declspec(implementation_key(379)) IDispatchPtr IComponent::GetUpdtDtTm ( );
__declspec(implementation_key(380)) void IComponent::PutUpdtDtTm ( IDispatch * pVal );
__declspec(implementation_key(381)) long IComponent::GetSchedulableInd ( );
__declspec(implementation_key(382)) void IComponent::PutSchedulableInd ( long pVal );
__declspec(implementation_key(383)) long IComponent::CalculateAnchorComponentStartDateTime ( IDispatch * * pAnchorComponentStartDateTime );
__declspec(implementation_key(384)) long IComponent::CanUnlockStartDateTime ( );
__declspec(implementation_key(385)) long IComponent::GetIntermittentInd ( );
__declspec(implementation_key(386)) void IComponent::PutIntermittentInd ( long pVal );
__declspec(implementation_key(387)) long IComponent::GetExcludeOnReset ( );
__declspec(implementation_key(388)) void IComponent::PutExcludeOnReset ( long pVal );
__declspec(implementation_key(389)) long IComponent::GetTolerance ( );
__declspec(implementation_key(390)) void IComponent::PutTolerance ( long pVal );
__declspec(implementation_key(391)) double IComponent::GetToleranceUnitCd ( );
__declspec(implementation_key(392)) void IComponent::PutToleranceUnitCd ( double pVal );
__declspec(implementation_key(393)) _bstr_t IComponent::GetDisplay ( );
__declspec(implementation_key(394)) double IComponent::GetProtocolComponentGroupNbr ( );
__declspec(implementation_key(395)) void IComponent::PutProtocolComponentGroupNbr ( double pVal );
__declspec(implementation_key(396)) long IComponent::GetHasExplodedChildren ( );
__declspec(implementation_key(397)) void IComponent::PutHasExplodedChildren ( long pVal );
__declspec(implementation_key(398)) long IComponent::GetRejectProtocolReviewInd ( );
__declspec(implementation_key(399)) void IComponent::PutRejectProtocolReviewInd ( long pVal );
__declspec(implementation_key(400)) IDispatchPtr IComponent::GetComponentGroupComponentDispatch ( );
__declspec(implementation_key(401)) IDispatchPtr IComponent::GetComponentGroupDispatch ( );
__declspec(implementation_key(402)) long IComponent::IsComponentGroupMember ( );
__declspec(implementation_key(403)) long IComponent::GetIncludedInComponentGroup ( );
__declspec(implementation_key(404)) void IComponent::PutIncludedInComponentGroup ( long pVal );
__declspec(implementation_key(405)) int IComponent::GetComponentGroupMemberIndex ( );
__declspec(implementation_key(406)) void IComponent::PutComponentGroupMemberIndex ( int pVal );
__declspec(implementation_key(407)) long IComponent::GetHasExcludedComponent ( );
__declspec(implementation_key(408)) void IComponent::PutHasExcludedComponent ( long pVal );
__declspec(implementation_key(409)) _bstr_t IComponent::GetDefaultOrderSentenceRxTypeMean ( );
__declspec(implementation_key(410)) long IComponent::GetForceExpand ( );
__declspec(implementation_key(411)) void IComponent::PutForceExpand ( long pVal );
__declspec(implementation_key(412)) long IComponent::GetForceDisplay ( );
__declspec(implementation_key(413)) void IComponent::PutForceDisplay ( long pVal );
__declspec(implementation_key(414)) _bstr_t IComponent::GetUUID ( );
__declspec(implementation_key(415)) void IComponent::PutUUID ( _bstr_t pVal );
__declspec(implementation_key(416)) HRESULT IComponent::AddFacilityToAccessList ( double dFacilityCd );
__declspec(implementation_key(417)) double IComponent::GetAlternateSelectionCategoryId ( );
__declspec(implementation_key(418)) void IComponent::PutAlternateSelectionCategoryId ( double pVal );
__declspec(implementation_key(419)) HRESULT IComponent::PutCanUnlockStartDateTimeCached ( long newVal );
__declspec(implementation_key(420)) long IComponent::GetNoteRowBackgroundColor ( );
__declspec(implementation_key(421)) void IComponent::PutNoteRowBackgroundColor ( long pVal );
__declspec(implementation_key(422)) long IComponent::GetNoteRowTextColor ( );
__declspec(implementation_key(423)) void IComponent::PutNoteRowTextColor ( long pVal );
__declspec(implementation_key(424)) HRESULT IComponent::ApplyComponentModification ( LONG_PTR lComponentModification );
__declspec(implementation_key(425)) long IComponent::IsComponentTimeZeroAcrossTreatmentPeriodsInComponentModifications ( );
__declspec(implementation_key(426)) long IComponent::GetLinkedToPhaseStartDateTime ( );
__declspec(implementation_key(427)) void IComponent::PutLinkedToPhaseStartDateTime ( long pVal );
__declspec(implementation_key(428)) long IComponent::HasComponentOffset ( );
__declspec(implementation_key(429)) short IComponent::GetLockTargetDoseFlag ( );
__declspec(implementation_key(430)) void IComponent::PutLockTargetDoseFlag ( short pVal );
__declspec(implementation_key(431)) long IComponent::IsTimeZero ( );
__declspec(implementation_key(432)) long IComponent::HasTimeZeroOffset ( );
__declspec(implementation_key(433)) long IComponent::IsTimeZeroLinked ( );
__declspec(implementation_key(434)) long IComponent::IsLinkedComponentGroupMember ( );
__declspec(implementation_key(435)) long IComponent::IsAnchorComponent ( );
__declspec(implementation_key(436)) IDispatchPtr IComponent::GetGroupsByTypeMean ( _bstr_t bstrTypeMean );
__declspec(implementation_key(437)) long IComponent::IsDoTComponent ( );
__declspec(implementation_key(438)) _bstr_t IComponent::GetPlainNoteText ( );
__declspec(implementation_key(439)) long IComponent::IsHTMLNote ( );
__declspec(implementation_key(440)) long IComponent::HasPriorityDefaultStartTimeOffsetAsNow ( );
__declspec(implementation_key(441)) _bstr_t IComponent::GetOrderSentFilterDisplayAt ( int Index );
__declspec(implementation_key(442)) HRESULT IComponent::AddExistingOrderSentence ( double dOrdSentId, _bstr_t sSentDisplay, _bstr_t sSentFilterDisplay );
__declspec(implementation_key(443)) double IComponent::GetLastAddedOrderId ( );
__declspec(implementation_key(444)) void IComponent::PutLastAddedOrderId ( double pVal );
__declspec(implementation_key(445)) void IComponent::PutIsCancelDCPendingOnProtocol ( long pVal );
__declspec(implementation_key(446)) long IComponent::GetIsCancelDCPendingOnProtocol ( );
__declspec(implementation_key(447)) long IComponent::GetIsLinkedToPrecomponentOrder ( );
__declspec(implementation_key(448)) void IComponent::PutIsLinkedToPrecomponentOrder ( long pVal );
__declspec(implementation_key(449)) long IComponent::IsDiagnosisAssociationSupressed ( );
__declspec(implementation_key(450)) double IComponent::GetOriginatingEncounterId ( );
__declspec(implementation_key(451)) void IComponent::PutOriginatingEncounterId ( double pVal );
__declspec(implementation_key(452)) long IComponent::GetModifiedTZRelationInd ( );
__declspec(implementation_key(453)) void IComponent::PutModifiedTZRelationInd ( long pVal );
__declspec(implementation_key(454)) HRESULT IComponent::LoadDoseInformationHistory ( );
__declspec(implementation_key(455)) long IComponent::DetermineValidIVSequenceOrder ( );
__declspec(implementation_key(456)) EComponentDiscontinueTypeFlag IComponent::GetDiscontinueTypeFlag ( );
__declspec(implementation_key(457)) void IComponent::PutDiscontinueTypeFlag ( EComponentDiscontinueTypeFlag pVal );
__declspec(implementation_key(458)) long IComponent::GetIsExcludeFromCopyForward ( );
__declspec(implementation_key(459)) void IComponent::PutIsExcludeFromCopyForward ( long pVal );
__declspec(implementation_key(460)) long IComponent::GetExternalActivate ( );
__declspec(implementation_key(461)) void IComponent::PutExternalActivate ( long pVal );
__declspec(implementation_key(462)) LONG_PTR IComponent::GetAuthorizationDetails ( );
__declspec(implementation_key(463)) void IComponent::PutAuthorizationDetails ( LONG_PTR pVal );
__declspec(implementation_key(464)) HRESULT IComponent::UpdateDefaultComponentOrderSentence ( );
__declspec(implementation_key(465)) double IComponent::GetPersonId ( );
__declspec(implementation_key(466)) void IComponent::PutPersonId ( double pVal );
__declspec(implementation_key(467)) HRESULT IComponent::ResetRedactedComponentDetails ( );
__declspec(implementation_key(468)) long IComponent::IsComponentRestricted ( );
__declspec(implementation_key(469)) long IComponent::HasRestrictedDoTOrder ( );
__declspec(implementation_key(470)) HRESULT IComponent::SetHasRestrictedDoTOrder ( long pVal );
__declspec(implementation_key(471)) short IPlanAction::GetActionSequence ( );
__declspec(implementation_key(472)) void IPlanAction::PutActionSequence ( short pVal );
__declspec(implementation_key(473)) double IPlanAction::GetActionCd ( );
__declspec(implementation_key(474)) void IPlanAction::PutActionCd ( double pVal );
__declspec(implementation_key(475)) _bstr_t IPlanAction::GetActionDisplay ( );
__declspec(implementation_key(476)) void IPlanAction::PutActionDisplay ( _bstr_t pVal );
__declspec(implementation_key(477)) double IPlanAction::GetPlanStatusCd ( );
__declspec(implementation_key(478)) void IPlanAction::PutPlanStatusCd ( double pVal );
__declspec(implementation_key(479)) _bstr_t IPlanAction::GetPlanStatusDisplay ( );
__declspec(implementation_key(480)) void IPlanAction::PutPlanStatusDisplay ( _bstr_t pVal );
__declspec(implementation_key(481)) DATE IPlanAction::GetActionDtTm ( );
__declspec(implementation_key(482)) void IPlanAction::PutActionDtTm ( DATE pVal );
__declspec(implementation_key(483)) _bstr_t IPlanAction::GetActionPrsnlName ( );
__declspec(implementation_key(484)) void IPlanAction::PutActionPrsnlName ( _bstr_t pVal );
__declspec(implementation_key(485)) HRESULT IPlanAction::Copy ( struct IPlanAction * pPlanAction );
__declspec(implementation_key(486)) double IPlanAction::GetCommunicationTypeCd ( );
__declspec(implementation_key(487)) void IPlanAction::PutCommunicationTypeCd ( double pVal );
__declspec(implementation_key(488)) _bstr_t IPlanAction::GetProviderName ( );
__declspec(implementation_key(489)) void IPlanAction::PutProviderName ( _bstr_t pVal );
__declspec(implementation_key(490)) double IPlanAction::GetProviderId ( );
__declspec(implementation_key(491)) void IPlanAction::PutProviderId ( double pVal );
__declspec(implementation_key(492)) _bstr_t IPlanAction::GetCommunicationTypeDisplay ( );
__declspec(implementation_key(493)) void IPlanAction::PutCommunicationTypeDisplay ( _bstr_t pVal );
__declspec(implementation_key(494)) _bstr_t IPlanAction::GetActionMean ( );
__declspec(implementation_key(495)) void IPlanAction::PutActionMean ( _bstr_t pVal );
__declspec(implementation_key(496)) IDispatchPtr IPlanAction::GetUTCActionDtTm ( );
__declspec(implementation_key(497)) void IPlanAction::PutUTCActionDtTm ( IDispatch * pVal );
__declspec(implementation_key(498)) _bstr_t IPlanAction::GetActionComment ( );
__declspec(implementation_key(499)) void IPlanAction::PutActionComment ( _bstr_t pVal );
__declspec(implementation_key(500)) double IPlanAction::GetActionPrsnlId ( );
__declspec(implementation_key(501)) void IPlanAction::PutActionPrsnlId ( double pVal );
__declspec(implementation_key(502)) long IPlanAction::GetActionPrsnlPhysInd ( );
__declspec(implementation_key(503)) void IPlanAction::PutActionPrsnlPhysInd ( long pVal );
__declspec(implementation_key(504)) double IPlanAction::GetActionReasonCd ( );
__declspec(implementation_key(505)) void IPlanAction::PutActionReasonCd ( double pVal );
__declspec(implementation_key(506)) _bstr_t IPlanAction::GetActionReasonDisplay ( );
__declspec(implementation_key(507)) void IPlanAction::PutActionReasonDisplay ( _bstr_t pVal );
__declspec(implementation_key(508)) HRESULT IPlanAction::GetPathwayNotifications ( LONG_PTR larrPathwayNotifications );
__declspec(implementation_key(509)) HRESULT IPlanAction::PutPathwayNotifications ( LONG_PTR larrPathwayNotifications );
__declspec(implementation_key(510)) IDispatchPtr IReview::GetReviewDtTm ( );
__declspec(implementation_key(511)) void IReview::PutReviewDtTm ( IDispatch * ppReviewDtTm );
__declspec(implementation_key(512)) void IReview::PutSignedStatus ( EPowerPlanReviewStatus pSignedStatus );
__declspec(implementation_key(513)) EPowerPlanReviewStatus IReview::GetSignedStatus ( );
__declspec(implementation_key(514)) void IReview::PutPendingStatus ( EPowerPlanReviewStatus pPendingStatus );
__declspec(implementation_key(515)) EPowerPlanReviewStatus IReview::GetPendingStatus ( );
__declspec(implementation_key(516)) void IReview::PutType ( EPowerPlanReviewType pType );
__declspec(implementation_key(517)) EPowerPlanReviewType IReview::GetType ( );
__declspec(implementation_key(518)) HRESULT IReview::Copy ( struct IReview * pReview );
__declspec(implementation_key(519)) long IReview::IsEqual ( struct IReview * pIReview );
__declspec(implementation_key(520)) void IReview::PutToPersonnelId ( double pToPersonnelId );
__declspec(implementation_key(521)) double IReview::GetToPersonnelId ( );
__declspec(implementation_key(522)) void IReview::PutToPersonnelName ( _bstr_t pToPersonnelName );
__declspec(implementation_key(523)) _bstr_t IReview::GetToPersonnelName ( );
__declspec(implementation_key(524)) void IReview::PutToPoolId ( double pToPoolId );
__declspec(implementation_key(525)) double IReview::GetToPoolId ( );
__declspec(implementation_key(526)) void IReview::PutToPoolName ( _bstr_t pToPoolName );
__declspec(implementation_key(527)) _bstr_t IReview::GetToPoolName ( );
__declspec(implementation_key(528)) void IReview::PutFromPersonnelId ( double pFromPersonnelId );
__declspec(implementation_key(529)) double IReview::GetFromPersonnelId ( );
__declspec(implementation_key(530)) void IReview::PutFromPersonnelName ( _bstr_t pFromPersonnelName );
__declspec(implementation_key(531)) _bstr_t IReview::GetFromPersonnelName ( );
__declspec(implementation_key(532)) void IReview::PutReasonCd ( double pReasonCd );
__declspec(implementation_key(533)) double IReview::GetReasonCd ( );
__declspec(implementation_key(534)) void IReview::PutReasonComment ( _bstr_t pReasonComment );
__declspec(implementation_key(535)) _bstr_t IReview::GetReasonComment ( );
__declspec(implementation_key(536)) void IReview::PutActionPersonnelId ( double pActionPersonnelId );
__declspec(implementation_key(537)) double IReview::GetActionPersonnelId ( );
__declspec(implementation_key(538)) void IReview::PutActionPersonnelName ( _bstr_t pActionPersonnelName );
__declspec(implementation_key(539)) _bstr_t IReview::GetActionPersonnelName ( );
__declspec(implementation_key(540)) double IPhase::GetPlanCatalogId ( );
__declspec(implementation_key(541)) void IPhase::PutPlanCatalogId ( double pVal );
__declspec(implementation_key(542)) double IPhase::GetDurationUnitCd ( );
__declspec(implementation_key(543)) void IPhase::PutDurationUnitCd ( double pVal );
__declspec(implementation_key(544)) long IPhase::GetDuration ( );
__declspec(implementation_key(545)) void IPhase::PutDuration ( long pVal );
__declspec(implementation_key(546)) _bstr_t IPhase::GetDurationDesc ( );
__declspec(implementation_key(547)) void IPhase::PutDurationDesc ( _bstr_t pVal );
__declspec(implementation_key(548)) _bstr_t IPhase::GetDescription ( );
__declspec(implementation_key(549)) void IPhase::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(550)) long IPhase::GetSequence ( );
__declspec(implementation_key(551)) void IPhase::PutSequence ( long pVal );
__declspec(implementation_key(552)) IUnknownPtr IPhase::GetComponentCollection ( );
__declspec(implementation_key(553)) HRESULT IPhase::AddComponent ( IDispatch * lpComponent );
__declspec(implementation_key(554)) _variant_t IPhase::GetPreceedPhases ( );
__declspec(implementation_key(555)) void IPhase::PutPreceedPhases ( const _variant_t & pVal );
__declspec(implementation_key(556)) _variant_t IPhase::GetSucceedPhases ( );
__declspec(implementation_key(557)) void IPhase::PutSucceedPhases ( const _variant_t & pVal );
__declspec(implementation_key(558)) long IPhase::GetFirstPhase ( );
__declspec(implementation_key(559)) void IPhase::PutFirstPhase ( long pVal );
__declspec(implementation_key(560)) ACTION_TYPE IPhase::GetActionType ( );
__declspec(implementation_key(561)) void IPhase::PutActionType ( ACTION_TYPE pVal );
__declspec(implementation_key(562)) long IPhase::GetUpdtCnt ( );
__declspec(implementation_key(563)) void IPhase::PutUpdtCnt ( long pVal );
__declspec(implementation_key(564)) double IPhase::GetPersonId ( );
__declspec(implementation_key(565)) void IPhase::PutPersonId ( double pVal );
__declspec(implementation_key(566)) double IPhase::GetEncntrId ( );
__declspec(implementation_key(567)) void IPhase::PutEncntrId ( double pVal );
__declspec(implementation_key(568)) double IPhase::GetPlanId ( );
__declspec(implementation_key(569)) void IPhase::PutPlanId ( double pVal );
__declspec(implementation_key(570)) double IPhase::GetPlanStatusCd ( );
__declspec(implementation_key(571)) void IPhase::PutPlanStatusCd ( double pVal );
__declspec(implementation_key(572)) HRESULT IPhase::Resequence ( struct IComponent * pComponent, VARIANT_BOOL bMoveUp );
__declspec(implementation_key(573)) HRESULT IPhase::RemoveComponent ( struct IComponent * pComponent );
__declspec(implementation_key(574)) long IPhase::GetInitiated ( );
__declspec(implementation_key(575)) void IPhase::PutInitiated ( long pVal );
__declspec(implementation_key(576)) DATE IPhase::GetStartDtTm ( );
__declspec(implementation_key(577)) void IPhase::PutStartDtTm ( DATE pVal );
__declspec(implementation_key(578)) DATE IPhase::GetCalcEndDtTm ( );
__declspec(implementation_key(579)) void IPhase::PutCalcEndDtTm ( DATE pVal );
__declspec(implementation_key(580)) long IPhase::GetActUpdtCnt ( );
__declspec(implementation_key(581)) void IPhase::PutActUpdtCnt ( long pVal );
__declspec(implementation_key(582)) double IPhase::GetCalcPlanStatusCd ( );
__declspec(implementation_key(583)) void IPhase::PutCalcPlanStatusCd ( double pVal );
__declspec(implementation_key(584)) IUnknownPtr IPhase::get_RemovedComponentCollection ( );
__declspec(implementation_key(585)) HRESULT IPhase::AddRemovedComponent ( IDispatch * lpComponent );
__declspec(implementation_key(586)) HRESULT IPhase::MoveClinSubCategory ( double dSourceCd, double dDestCd, double dClinicalCatCd );
__declspec(implementation_key(587)) HRESULT IPhase::Copy ( struct IPhase * pPhase );
__declspec(implementation_key(588)) long IPhase::IsEqual ( struct IPhase * pPhase );
__declspec(implementation_key(589)) _variant_t IPhase::GetKey ( );
__declspec(implementation_key(590)) IComponentPtr IPhase::FindOrderComponent ( LONG_PTR hPvOrderObj );
__declspec(implementation_key(591)) PLAN_TYPE IPhase::GetPhaseType ( );
__declspec(implementation_key(592)) void IPhase::PutPhaseType ( PLAN_TYPE pVal );
__declspec(implementation_key(593)) _bstr_t IPhase::GetPlanStatusDisp ( );
__declspec(implementation_key(594)) void IPhase::PutPlanStatusDisp ( _bstr_t pVal );
__declspec(implementation_key(595)) _bstr_t IPhase::GetPlanStatusMean ( );
__declspec(implementation_key(596)) void IPhase::PutPlanStatusMean ( _bstr_t pVal );
__declspec(implementation_key(597)) _bstr_t IPhase::GetCalcPlanStatusDisp ( );
__declspec(implementation_key(598)) void IPhase::PutCalcPlanStatusDisp ( _bstr_t pVal );
__declspec(implementation_key(599)) _bstr_t IPhase::GetCalcPlanStatusMean ( );
__declspec(implementation_key(600)) void IPhase::PutCalcPlanStatusMean ( _bstr_t pVal );
__declspec(implementation_key(601)) _bstr_t IPhase::GetDurationUnitMean ( );
__declspec(implementation_key(602)) void IPhase::PutDurationUnitMean ( _bstr_t pVal );
__declspec(implementation_key(603)) HRESULT IPhase::AddPlanAction ( struct IPlanAction * pPlanAction );
__declspec(implementation_key(604)) IUnknownPtr IPhase::GetActionCollection ( );
__declspec(implementation_key(605)) long IPhase::AreComponentsInitiated ( );
__declspec(implementation_key(606)) long IPhase::IsComponentInPhase ( struct IComponent * pComponent );
__declspec(implementation_key(607)) HRESULT IPhase::RemoveAllPlanActions ( );
__declspec(implementation_key(608)) long IPhase::GetCatalogInd ( );
__declspec(implementation_key(609)) void IPhase::PutCatalogInd ( long pVal );
__declspec(implementation_key(610)) HRESULT IPhase::CalculateEndDtTm ( );
__declspec(implementation_key(611)) _bstr_t IPhase::GetPhaseStatusDisp ( );
__declspec(implementation_key(612)) double IPhase::GetDisplayMethodCd ( );
__declspec(implementation_key(613)) void IPhase::PutDisplayMethodCd ( double pVal );
__declspec(implementation_key(614)) DATE IPhase::GetOrderDtTm ( );
__declspec(implementation_key(615)) void IPhase::PutOrderDtTm ( DATE pVal );
__declspec(implementation_key(616)) _bstr_t IPhase::GetDisplayMethodDisp ( );
__declspec(implementation_key(617)) void IPhase::PutDisplayMethodDisp ( _bstr_t pVal );
__declspec(implementation_key(618)) _bstr_t IPhase::GetDisplayMethodMean ( );
__declspec(implementation_key(619)) void IPhase::PutDisplayMethodMean ( _bstr_t pVal );
__declspec(implementation_key(620)) _variant_t IPhase::GetRemovedReltns ( );
__declspec(implementation_key(621)) void IPhase::PutRemovedReltns ( const _variant_t & pVal );
__declspec(implementation_key(622)) long IPhase::GetReplicatedOriginal ( );
__declspec(implementation_key(623)) void IPhase::PutReplicatedOriginal ( long pVal );
__declspec(implementation_key(624)) long IPhase::GetReplicatedCopy ( );
__declspec(implementation_key(625)) void IPhase::PutReplicatedCopy ( long pVal );
__declspec(implementation_key(626)) HRESULT IPhase::ResetRemovedReltns ( );
__declspec(implementation_key(627)) long IPhase::GetTZExistInd ( );
__declspec(implementation_key(628)) void IPhase::PutTZExistInd ( long pVal );
__declspec(implementation_key(629)) long IPhase::HasOffset ( );
__declspec(implementation_key(630)) HRESULT IPhase::ClearTZLRelationship ( );
__declspec(implementation_key(631)) IComponentPtr IPhase::FindTZComponent ( );
__declspec(implementation_key(632)) short IPhase::GetCompRUpdated ( );
__declspec(implementation_key(633)) void IPhase::PutCompRUpdated ( short pVal );
__declspec(implementation_key(634)) IComponentPtr IPhase::GetEarliestOffsetComponent ( );
__declspec(implementation_key(635)) IComponentPtr IPhase::FindOrderComponentById ( double orderId );
__declspec(implementation_key(636)) IComponentPtr IPhase::FindComponentById ( double compId );
__declspec(implementation_key(637)) IDispatchPtr IPhase::GetParentDispatch ( );
__declspec(implementation_key(638)) void IPhase::PutParentDispatch ( IDispatch * pVal );
__declspec(implementation_key(639)) long IPhase::GetActOutcomesExistInd ( );
__declspec(implementation_key(640)) void IPhase::PutActOutcomesExistInd ( long pVal );
__declspec(implementation_key(641)) double IPhase::GetRefOwnerPersonId ( );
__declspec(implementation_key(642)) void IPhase::PutRefOwnerPersonId ( double pVal );
__declspec(implementation_key(643)) _bstr_t IPhase::GetRefOwnerName ( );
__declspec(implementation_key(644)) void IPhase::PutRefOwnerName ( _bstr_t pVal );
__declspec(implementation_key(645)) DATE IPhase::GetCalcTimeZeroDtTm ( );
__declspec(implementation_key(646)) void IPhase::PutCalcTimeZeroDtTm ( DATE pVal );
__declspec(implementation_key(647)) IDispatchPtr IPhase::GetGroupCollection ( );
__declspec(implementation_key(648)) HRESULT IPhase::AddGroup ( struct IGroup * pIGroup );
__declspec(implementation_key(649)) int IPhase::GetGroupCount ( );
__declspec(implementation_key(650)) short IPhase::GetGroupUpdtFlag ( );
__declspec(implementation_key(651)) void IPhase::PutGroupUpdtFlag ( short pVal );
__declspec(implementation_key(652)) long IPhase::GetStartedInd ( );
__declspec(implementation_key(653)) void IPhase::PutStartedInd ( long pVal );
__declspec(implementation_key(654)) long IPhase::GetStartOffsetExistInd ( );
__declspec(implementation_key(655)) void IPhase::PutStartOffsetExistInd ( long pVal );
__declspec(implementation_key(656)) COMP_LOADING_STATUS IPhase::GetComponentLoaded ( );
__declspec(implementation_key(657)) void IPhase::PutComponentLoaded ( COMP_LOADING_STATUS pVal );
__declspec(implementation_key(658)) long IPhase::GetOrderMatched ( );
__declspec(implementation_key(659)) void IPhase::PutOrderMatched ( long pVal );
__declspec(implementation_key(660)) double IPhase::GetDCReasonCd ( );
__declspec(implementation_key(661)) void IPhase::PutDCReasonCd ( double pVal );
__declspec(implementation_key(662)) long IPhase::GetSubPhaseExistInd ( );
__declspec(implementation_key(663)) void IPhase::PutSubPhaseExistInd ( long pVal );
__declspec(implementation_key(664)) _variant_t IPhase::GetSubPhases ( );
__declspec(implementation_key(665)) void IPhase::PutSubPhases ( const _variant_t & pVal );
__declspec(implementation_key(666)) HRESULT IPhase::RemoveSubPhase ( double dVal );
__declspec(implementation_key(667)) long IPhase::IsDuplicateSubPhase ( double dVal );
__declspec(implementation_key(668)) _bstr_t IPhase::GetLastActionPrsnlName ( );
__declspec(implementation_key(669)) void IPhase::PutLastActionPrsnlName ( _bstr_t pVal );
__declspec(implementation_key(670)) DATE IPhase::GetLastActionDtTm ( );
__declspec(implementation_key(671)) void IPhase::PutLastActionDtTm ( DATE pVal );
__declspec(implementation_key(672)) IDispatchPtr IPhase::GetSubphaseCompDispatch ( );
__declspec(implementation_key(673)) void IPhase::PutSubphaseCompDispatch ( IDispatch * pVal );
__declspec(implementation_key(674)) long IPhase::GetNewSubPhaseExists ( );
__declspec(implementation_key(675)) void IPhase::PutNewSubPhaseExists ( long pVal );
__declspec(implementation_key(676)) _bstr_t IPhase::GetParentPhaseDesc ( );
__declspec(implementation_key(677)) void IPhase::PutParentPhaseDesc ( _bstr_t pVal );
__declspec(implementation_key(678)) long IPhase::GetHideFlexedCompInd ( );
__declspec(implementation_key(679)) void IPhase::PutHideFlexedCompInd ( long pVal );
__declspec(implementation_key(680)) long IPhase::GetNomenReltnCount ( );
__declspec(implementation_key(681)) _bstr_t IPhase::GetDiagnosisDisplay ( );
__declspec(implementation_key(682)) long IPhase::IsADuplicateDiagnosis ( _bstr_t conceptCKI, double nomId );
__declspec(implementation_key(683)) HRESULT IPhase::GetDiagnosisBySeq ( long lSeq, LONG_PTR lVal );
__declspec(implementation_key(684)) HRESULT IPhase::GetDiagnosisByDiagId ( double diagId, LONG_PTR lVal );
__declspec(implementation_key(685)) HRESULT IPhase::AddDiagnosis ( LONG_PTR pVal );
__declspec(implementation_key(686)) HRESULT IPhase::UpdateDiagnosis ( LONG_PTR pVal );
__declspec(implementation_key(687)) HRESULT IPhase::RemoveDiagnosis ( LONG_PTR pVal );
__declspec(implementation_key(688)) long IPhase::GetRemovedNomenReltnCount ( );
__declspec(implementation_key(689)) HRESULT IPhase::GetRemovedDiagnosisAt ( int Index, LONG_PTR pVal );
__declspec(implementation_key(690)) long IPhase::GetChemoInd ( );
__declspec(implementation_key(691)) void IPhase::PutChemoInd ( long pVal );
__declspec(implementation_key(692)) long IPhase::GetChemoRelatedInd ( );
__declspec(implementation_key(693)) void IPhase::PutChemoRelatedInd ( long pVal );
__declspec(implementation_key(694)) HRESULT IPhase::SetSubPhaseCompChemoRelatedInd ( long bInd );
__declspec(implementation_key(695)) HRESULT IPhase::SetSubPhaseCompCPGInd ( long bInd );
__declspec(implementation_key(696)) HRESULT IPhase::RemoveCPGComponentLinks ( );
__declspec(implementation_key(697)) long IPhase::GetFacilityAccessInd ( );
__declspec(implementation_key(698)) void IPhase::PutFacilityAccessInd ( long pVal );
__declspec(implementation_key(699)) long IPhase::GetProActiveOutcomeExistInd ( );
__declspec(implementation_key(700)) void IPhase::PutProActiveOutcomeExistInd ( long pVal );
__declspec(implementation_key(701)) double IPhase::GetTaperGroupOrderId ( );
__declspec(implementation_key(702)) void IPhase::PutTaperGroupOrderId ( double pVal );
__declspec(implementation_key(703)) long IPhase::IsPhasePlanned ( );
__declspec(implementation_key(704)) int IPhase::GetSubphaseNormalizedDoseStatus ( );
__declspec(implementation_key(705)) IDispatchPtr IPhase::GetUTCOrderDtTm ( );
__declspec(implementation_key(706)) void IPhase::PutUTCOrderDtTm ( IDispatch * pVal );
__declspec(implementation_key(707)) IDispatchPtr IPhase::GetUTCStartDtTm ( );
__declspec(implementation_key(708)) void IPhase::PutUTCStartDtTm ( IDispatch * pVal );
__declspec(implementation_key(709)) IDispatchPtr IPhase::GetUTCCalcEndDtTm ( );
__declspec(implementation_key(710)) void IPhase::PutUTCCalcEndDtTm ( IDispatch * pVal );
__declspec(implementation_key(711)) IDispatchPtr IPhase::GetUTCLastActionDtTm ( );
__declspec(implementation_key(712)) void IPhase::PutUTCLastActionDtTm ( IDispatch * pVal );
__declspec(implementation_key(713)) IDispatchPtr IPhase::GetUTCCalcTimeZeroDtTm ( );
__declspec(implementation_key(714)) void IPhase::PutUTCCalcTimeZeroDtTm ( IDispatch * pVal );
__declspec(implementation_key(715)) long IPhase::GetHighAlertAvail ( );
__declspec(implementation_key(716)) void IPhase::PutHighAlertAvail ( long pVal );
__declspec(implementation_key(717)) long IPhase::GetAutoDisplayHighAlert ( );
__declspec(implementation_key(718)) void IPhase::PutAutoDisplayHighAlert ( long pVal );
__declspec(implementation_key(719)) HRESULT IPhase::RemovePhaseDiagnoses ( );
__declspec(implementation_key(720)) HRESULT IPhase::FixDiagnosisSequence ( );
__declspec(implementation_key(721)) long IPhase::GetCopyForwardOriginal ( );
__declspec(implementation_key(722)) void IPhase::PutCopyForwardOriginal ( long pVal );
__declspec(implementation_key(723)) long IPhase::GetCopyForwardCopy ( );
__declspec(implementation_key(724)) void IPhase::PutCopyForwardCopy ( long pVal );
__declspec(implementation_key(725)) HRESULT IPhase::ClearAllSubPhases ( );
__declspec(implementation_key(726)) long IPhase::GetIncluded ( );
__declspec(implementation_key(727)) void IPhase::PutIncluded ( long pVal );
__declspec(implementation_key(728)) long IPhase::AreComponentsSkipped ( );
__declspec(implementation_key(729)) HRESULT IPhase::AddOrderStartDtTmException ( struct IComponent * pComponent );
__declspec(implementation_key(730)) IUnknownPtr IPhase::GetOrderStartDtTmExceptionCollection ( );
__declspec(implementation_key(731)) long IPhase::GetAutoInitiateInd ( );
__declspec(implementation_key(732)) void IPhase::PutAutoInitiateInd ( long pVal );
__declspec(implementation_key(733)) IPhasePtr IPhase::GetParentPhase ( );
__declspec(implementation_key(734)) long IPhase::GetAutoInitiateIndForPhaseAndSubPhase ( );
__declspec(implementation_key(735)) long IPhase::GetComponentCountWithFilters ( COMPONENT_COUNT_FLAG eFlag );
__declspec(implementation_key(736)) long IPhase::GetCheckAlertsOnPlanning ( );
__declspec(implementation_key(737)) void IPhase::PutCheckAlertsOnPlanning ( long pVal );
__declspec(implementation_key(738)) long IPhase::GetCheckAlertsOnUpdates ( );
__declspec(implementation_key(739)) void IPhase::PutCheckAlertsOnUpdates ( long pVal );
__declspec(implementation_key(740)) _bstr_t IPhase::GetAlertsLastCheckedDisplay ( );
__declspec(implementation_key(741)) void IPhase::PutAlertsLastCheckedDisplay ( _bstr_t pVal );
__declspec(implementation_key(742)) long IPhase::HasModifiedSubphase ( );
__declspec(implementation_key(743)) HRESULT IPhase::ResequenceComponents ( );
__declspec(implementation_key(744)) long IPhase::GetOffsetQty ( );
__declspec(implementation_key(745)) void IPhase::PutOffsetQty ( long pVal );
__declspec(implementation_key(746)) double IPhase::GetOffsetUnitCd ( );
__declspec(implementation_key(747)) void IPhase::PutOffsetUnitCd ( double pVal );
__declspec(implementation_key(748)) double IPhase::GetOffsetAnchorPhaseId ( );
__declspec(implementation_key(749)) void IPhase::PutOffsetAnchorPhaseId ( double pVal );
__declspec(implementation_key(750)) HRESULT IPhase::AddOffsetAnchoredPhase ( double newVal );
__declspec(implementation_key(751)) HRESULT IPhase::RemoveOffsetAnchoredPhase ( double oldVal );
__declspec(implementation_key(752)) HRESULT IPhase::ClearOffsetAnchoredPhases ( );
__declspec(implementation_key(753)) HRESULT IPhase::GetOffsetAnchoredPhases ( LONG_PTR lAnchoredPhases );
__declspec(implementation_key(754)) double IPhase::GetDefaultActionInpatientNowCd ( );
__declspec(implementation_key(755)) void IPhase::PutDefaultActionInpatientNowCd ( double pVal );
__declspec(implementation_key(756)) double IPhase::GetDefaultActionInpatientFutureCd ( );
__declspec(implementation_key(757)) void IPhase::PutDefaultActionInpatientFutureCd ( double pVal );
__declspec(implementation_key(758)) double IPhase::GetDefaultActionOutpatientNowCd ( );
__declspec(implementation_key(759)) void IPhase::PutDefaultActionOutpatientNowCd ( double pVal );
__declspec(implementation_key(760)) double IPhase::GetDefaultActionOutpatientFutureCd ( );
__declspec(implementation_key(761)) void IPhase::PutDefaultActionOutpatientFutureCd ( double pVal );
__declspec(implementation_key(762)) long IPhase::GetOptionalInd ( );
__declspec(implementation_key(763)) void IPhase::PutOptionalInd ( long pVal );
__declspec(implementation_key(764)) double IPhase::GetScheduledFacilityCd ( );
__declspec(implementation_key(765)) void IPhase::PutScheduledFacilityCd ( double pVal );
__declspec(implementation_key(766)) double IPhase::GetScheduledNursingUnitCd ( );
__declspec(implementation_key(767)) void IPhase::PutScheduledNursingUnitCd ( double pVal );
__declspec(implementation_key(768)) long IPhase::GetAllowFuturePhaseInd ( );
__declspec(implementation_key(769)) void IPhase::PutAllowFuturePhaseInd ( long pVal );
__declspec(implementation_key(770)) long IPhase::GetStartDateTimeEstimatedInd ( );
__declspec(implementation_key(771)) void IPhase::PutStartDateTimeEstimatedInd ( long pDateTimeEstimatedInd );
__declspec(implementation_key(772)) long IPhase::GetEndDateTimeEstimatedInd ( );
__declspec(implementation_key(773)) void IPhase::PutEndDateTimeEstimatedInd ( long pEndDateTimeEstimatedInd );
__declspec(implementation_key(774)) long IPhase::GetOrderNowInd ( );
__declspec(implementation_key(775)) void IPhase::PutOrderNowInd ( long pOrderNowInd );
__declspec(implementation_key(776)) long IPhase::GetFutureInitiateInd ( );
__declspec(implementation_key(777)) void IPhase::PutFutureInitiateInd ( long pFutureInitiateInd );
__declspec(implementation_key(778)) long IPhase::IsAutoInitiateAvailable ( );
__declspec(implementation_key(779)) long IPhase::GetInactivateOffsetInd ( );
__declspec(implementation_key(780)) void IPhase::PutInactivateOffsetInd ( long pInactivateOffsetInd );
__declspec(implementation_key(781)) long IPhase::AreAllComponentsExcluded ( );
__declspec(implementation_key(782)) long IPhase::GetActivateInd ( );
__declspec(implementation_key(783)) void IPhase::PutActivateInd ( long pActivateInd );
__declspec(implementation_key(784)) long IPhase::CanUnlockStartDateTime ( );
__declspec(implementation_key(785)) double IPhase::GetSucceedPhaseId ( );
__declspec(implementation_key(786)) void IPhase::PutSucceedPhaseId ( double pSucceedKeyId );
__declspec(implementation_key(787)) double IPhase::GetPrecedePhaseId ( );
__declspec(implementation_key(788)) void IPhase::PutPrecedePhaseId ( double pPrecedeKeyId );
__declspec(implementation_key(789)) long IPhase::GetStatus ( );
__declspec(implementation_key(790)) HRESULT IPhase::GetSubPhasesVector ( LONG_PTR lSubphasesVector );
__declspec(implementation_key(791)) HRESULT IPhase::PutSubPhasesVector ( LONG_PTR lSubphasesVector );
__declspec(implementation_key(792)) HRESULT IPhase::AddPendingAction ( struct IPlanAction * pPlanAction );
__declspec(implementation_key(793)) INT_PTRX IPhase::GetPendingActionSize ( );
__declspec(implementation_key(794)) IPlanActionPtr IPhase::GetPendingActionAt ( INT_PTRX iIndex );
__declspec(implementation_key(795)) HRESULT IPhase::AddTreatmentPeriod ( long lPeriodNumber, double dKey );
__declspec(implementation_key(796)) double IPhase::GetTreatmentPeriod ( long lPeriodNumber );
__declspec(implementation_key(797)) HRESULT IPhase::RemoveTreatmentPeriod ( long lPeriodNumber );
__declspec(implementation_key(798)) HRESULT IPhase::GetTreatmentPeriods ( LONG_PTR lTreatmentPeriodsVector );
__declspec(implementation_key(799)) HRESULT IPhase::RemoveTreatmentSchedule ( );
__declspec(implementation_key(800)) HRESULT IPhase::AddTreatmentLinkedComponent ( double dComponentId );
__declspec(implementation_key(801)) long IPhase::IsComponentLinkedToTreatment ( double dComponentId );
__declspec(implementation_key(802)) HRESULT IPhase::RemoveTreatmentLinkedComponent ( double dComponentId );
__declspec(implementation_key(803)) HRESULT IPhase::GetTreatmentLinkedComponents ( LONG_PTR lTreatmentLinkedComponentsVector );
__declspec(implementation_key(804)) _bstr_t IPhase::GetTreatmentPeriodCustomLabel ( );
__declspec(implementation_key(805)) void IPhase::PutTreatmentPeriodCustomLabel ( _bstr_t pVal );
__declspec(implementation_key(806)) long IPhase::HasTreatmentSchedule ( );
__declspec(implementation_key(807)) _bstr_t IPhase::BuildTreatmentScheduleDisplay ( );
__declspec(implementation_key(808)) _bstr_t IPhase::BuildComponentTreatmentScheduleDisplay ( double dComponentId );
__declspec(implementation_key(809)) long IPhase::GetTreatmentPeriodNumber ( );
__declspec(implementation_key(810)) void IPhase::PutTreatmentPeriodNumber ( long pVal );
__declspec(implementation_key(811)) double IPhase::GetProtocolPhaseId ( );
__declspec(implementation_key(812)) void IPhase::PutProtocolPhaseId ( double pVal );
__declspec(implementation_key(813)) IComponentPtr IPhase::FindComponentByProtocolGroupNbr ( double dProtocolGroupNbr );
__declspec(implementation_key(814)) long IPhase::GetGroupedPhasesNotLoaded ( );
__declspec(implementation_key(815)) void IPhase::PutGroupedPhasesNotLoaded ( long pVal );
__declspec(implementation_key(816)) IDispatchPtr IPhase::GetOffsetTimeSpan ( );
__declspec(implementation_key(817)) long IPhase::GetReviewRoutingInd ( );
__declspec(implementation_key(818)) void IPhase::PutReviewRoutingInd ( long pVal );
__declspec(implementation_key(819)) PROTOCOL_REVIEW_STATUS_FLAG IPhase::GetCurrentReviewStatusFlag ( );
__declspec(implementation_key(820)) void IPhase::PutCurrentReviewStatusFlag ( PROTOCOL_REVIEW_STATUS_FLAG pVal );
__declspec(implementation_key(821)) PROTOCOL_REVIEW_STATUS_FLAG IPhase::GetPendingReviewStatusFlag ( );
__declspec(implementation_key(822)) void IPhase::PutPendingReviewStatusFlag ( PROTOCOL_REVIEW_STATUS_FLAG pVal );
__declspec(implementation_key(823)) double IPhase::GetReviewReasonCd ( );
__declspec(implementation_key(824)) void IPhase::PutReviewReasonCd ( double pVal );
__declspec(implementation_key(825)) _bstr_t IPhase::GetReviewComment ( );
__declspec(implementation_key(826)) void IPhase::PutReviewComment ( _bstr_t pVal );
__declspec(implementation_key(827)) long IPhase::GetIsProtocolReviewDirty ( );
__declspec(implementation_key(828)) void IPhase::PutIsProtocolReviewDirty ( long pVal );
__declspec(implementation_key(829)) long IPhase::IsProtocolRoutingForReview ( );
__declspec(implementation_key(830)) _bstr_t IPhase::GetReviewRejectPrsnlName ( );
__declspec(implementation_key(831)) void IPhase::PutReviewRejectPrsnlName ( _bstr_t pVal );
__declspec(implementation_key(832)) long IPhase::IsPendingProtocolReview ( );
__declspec(implementation_key(833)) double IPhase::GetRequestPersonnelId ( );
__declspec(implementation_key(834)) void IPhase::PutRequestPersonnelId ( double pVal );
__declspec(implementation_key(835)) double IPhase::GetToPersonnelId ( );
__declspec(implementation_key(836)) void IPhase::PutToPersonnelId ( double pVal );
__declspec(implementation_key(837)) _bstr_t IPhase::GetRequestNameFullFormatted ( );
__declspec(implementation_key(838)) void IPhase::PutRequestNameFullFormatted ( _bstr_t pVal );
__declspec(implementation_key(839)) _bstr_t IPhase::GetToNameFullFormatted ( );
__declspec(implementation_key(840)) void IPhase::PutToNameFullFormatted ( _bstr_t pVal );
__declspec(implementation_key(841)) IDispatchPtr IPhase::GetUTCReviewDtTm ( );
__declspec(implementation_key(842)) void IPhase::PutUTCReviewDtTm ( IDispatch * pVal );
__declspec(implementation_key(843)) IDispatchPtr IPhase::GetParentPhaseDispatch ( );
__declspec(implementation_key(844)) void IPhase::PutParentPhaseDispatch ( IDispatch * pPhase );
__declspec(implementation_key(845)) _bstr_t IPhase::GetTreatmentPeriodLabels ( );
__declspec(implementation_key(846)) double IPhase::GetPathwayClassCd ( );
__declspec(implementation_key(847)) void IPhase::PutPathwayClassCd ( double pVal );
__declspec(implementation_key(848)) long IPhase::HasComopnentInCPG ( );
__declspec(implementation_key(849)) HRESULT IPhase::InsertComponentAt ( IDispatch * lpComponent, long lIndex );
__declspec(implementation_key(850)) ESubPhaseStyle IPhase::GetSubPhaseStyle ( );
__declspec(implementation_key(851)) void IPhase::PutSubPhaseStyle ( ESubPhaseStyle pVal );
__declspec(implementation_key(852)) long IPhase::IsPhaseLinkedToComfirmedAppointment ( );
__declspec(implementation_key(853)) double IPhase::GetPathwayGroupId ( );
__declspec(implementation_key(854)) void IPhase::PutPathwayGroupId ( double pVal );
__declspec(implementation_key(855)) long IPhase::GetPrimaryPhaseInd ( );
__declspec(implementation_key(856)) void IPhase::PutPrimaryPhaseInd ( long pPrimaryPhaseInd );
__declspec(implementation_key(857)) _bstr_t IPhase::GetDefaultStartTime ( );
__declspec(implementation_key(858)) void IPhase::PutDefaultStartTime ( _bstr_t pDefaultStartTime );
__declspec(implementation_key(859)) EPhaseProcessingStatus IPhase::GetProcessingStatus ( );
__declspec(implementation_key(860)) void IPhase::PutProcessingStatus ( EPhaseProcessingStatus pVal );
__declspec(implementation_key(861)) long IPhase::GetPathwayMissingReasonFlag ( );
__declspec(implementation_key(862)) void IPhase::PutPathwayMissingReasonFlag ( long pVal );
__declspec(implementation_key(863)) long IPhase::SuppressAllActionExceptVoid ( );
__declspec(implementation_key(864)) _bstr_t IPhase::GetParentComponentUUID ( );
__declspec(implementation_key(865)) void IPhase::PutParentComponentUUID ( _bstr_t pVal );
__declspec(implementation_key(866)) double IPhase::GetParentPhaseCatalogId ( );
__declspec(implementation_key(867)) void IPhase::PutParentPhaseCatalogId ( double pVal );
__declspec(implementation_key(868)) HRESULT IPhase::AddSucceedPhase ( double dPhaseId );
__declspec(implementation_key(869)) HRESULT IPhase::AddSubPhase ( double dPhaseId );
__declspec(implementation_key(870)) _bstr_t IPhase::GetUUID ( );
__declspec(implementation_key(871)) void IPhase::PutUUID ( _bstr_t pVal );
__declspec(implementation_key(872)) long IPhase::GetWarnings ( );
__declspec(implementation_key(873)) void IPhase::PutWarnings ( long pVal );
__declspec(implementation_key(874)) long IPhase::GetContainsPersonMismatchInd ( );
__declspec(implementation_key(875)) void IPhase::PutContainsPersonMismatchInd ( long pVal );
__declspec(implementation_key(876)) short IPhase::GetRescheduleReasonAcceptFlag ( );
__declspec(implementation_key(877)) void IPhase::PutRescheduleReasonAcceptFlag ( short pVal );
__declspec(implementation_key(878)) HRESULT IPhase::RemovePendingAction ( struct IPlanAction * pPlanAction );
__declspec(implementation_key(879)) double IPhase::GetSupervisingPhysicianId ( );
__declspec(implementation_key(880)) void IPhase::PutSupervisingPhysicianId ( double pVal );
__declspec(implementation_key(881)) double IPhase::GetProviderId ( );
__declspec(implementation_key(882)) void IPhase::PutProviderId ( double pVal );
__declspec(implementation_key(883)) long IPhase::GetProviderIdSetUsingPrompt ( );
__declspec(implementation_key(884)) void IPhase::PutProviderIdSetUsingPrompt ( long pVal );
__declspec(implementation_key(885)) HRESULT IPhase::MaintainSupervisingPhysicianOnPhase ( );
__declspec(implementation_key(886)) double IPhase::GetSupervisingActPrsnlId ( );
__declspec(implementation_key(887)) void IPhase::PutSupervisingActPrsnlId ( double pVal );
__declspec(implementation_key(888)) HRESULT IPhase::AddDotComponentModification ( LONG_PTR lDotComponentModification );
__declspec(implementation_key(889)) HRESULT IPhase::RemoveDotComponentModification ( double dKey );
__declspec(implementation_key(890)) HRESULT IPhase::GetDotComponentModification ( double dKey, LONG_PTR lDotComponentModification );
__declspec(implementation_key(891)) HRESULT IPhase::RemoveAllDotComponentModifications ( );
__declspec(implementation_key(892)) HRESULT IPhase::GetAllDotComponentModifications ( LONG_PTR lDotComponentModificationVector );
__declspec(implementation_key(893)) HRESULT IPhase::GetDotComponentModificationComponentRelations ( LONG_PTR lComponentRelations );
__declspec(implementation_key(894)) long IPhase::HasDotComponentModifications ( );
__declspec(implementation_key(895)) long IPhase::HasTreatmentPeriodDotComponentModifications ( );
__declspec(implementation_key(896)) long IPhase::ValidateTimeZeroOffsets ( );
__declspec(implementation_key(897)) double IPhase::GetToPoolId ( );
__declspec(implementation_key(898)) void IPhase::PutToPoolId ( double pVal );
__declspec(implementation_key(899)) HRESULT IPhase::RemoveSucceedPhaseId ( double dPhaseId );
__declspec(implementation_key(900)) long IPhase::HasSucceedPhaseId ( double dPhaseId );
__declspec(implementation_key(901)) long IPhase::IsPhaseInProposalStatus ( );
__declspec(implementation_key(902)) long IPhase::GetHoldInd ( );
__declspec(implementation_key(903)) void IPhase::PutHoldInd ( long pVal );
__declspec(implementation_key(904)) long IPhase::GetSkipInd ( );
__declspec(implementation_key(905)) void IPhase::PutSkipInd ( long pVal );
__declspec(implementation_key(906)) long IPhase::IsPhaseInProtocolReview ( );
__declspec(implementation_key(907)) long IPhase::GetResumeInd ( );
__declspec(implementation_key(908)) void IPhase::PutResumeInd ( long pVal );
__declspec(implementation_key(909)) HRESULT IPhase::AddReviewToPhase ( struct IReview * pIReview );
__declspec(implementation_key(910)) IUnknownPtr IPhase::GetReviewCollection ( );
__declspec(implementation_key(911)) long IPhase::HasModifiedTreatmentPeriod ( );
__declspec(implementation_key(912)) long IPhase::GetOpenByDefaultInd ( );
__declspec(implementation_key(913)) void IPhase::PutOpenByDefaultInd ( long pVal );
__declspec(implementation_key(914)) long IPhase::GetAllowActivateAllInd ( );
__declspec(implementation_key(915)) void IPhase::PutAllowActivateAllInd ( long pVal );
__declspec(implementation_key(916)) long IPhase::GetIgnoreSupervisingPhysicianPrompt ( );
__declspec(implementation_key(917)) void IPhase::PutIgnoreSupervisingPhysicianPrompt ( long pVal );
__declspec(implementation_key(918)) void IPhase::PutPhaseDetailStatusCd ( double pVal );
__declspec(implementation_key(919)) double IPhase::GetPhaseDetailStatusCd ( );
__declspec(implementation_key(920)) void IPhase::PutPhaseDetailStatusMean ( _bstr_t pVal );
__declspec(implementation_key(921)) _bstr_t IPhase::GetPhaseDetailStatusMean ( );
__declspec(implementation_key(922)) void IPhase::PutPhaseDetailStatusDisp ( _bstr_t pVal );
__declspec(implementation_key(923)) _bstr_t IPhase::GetPhaseDetailStatusDisp ( );
__declspec(implementation_key(924)) _bstr_t IPhase::GetTreatmentPeriodDetailedStatusDisplay ( struct IPhase * pPhase );
__declspec(implementation_key(925)) long IPhase::GetIsCopySourceTreatmentPeriod ( );
__declspec(implementation_key(926)) void IPhase::PutIsCopySourceTreatmentPeriod ( long pVal );
__declspec(implementation_key(927)) long IPhase::GetIsSourceTreatmentPeriod ( );
__declspec(implementation_key(928)) void IPhase::PutIsSourceTreatmentPeriod ( long pVal );
__declspec(implementation_key(929)) long IPhase::GetIsSucceedTreatmentPeriod ( );
__declspec(implementation_key(930)) void IPhase::PutIsSucceedTreatmentPeriod ( long pVal );
__declspec(implementation_key(931)) double IPhase::GetCopySourceTreatmentPeriodId ( );
__declspec(implementation_key(932)) void IPhase::PutCopySourceTreatmentPeriodId ( double pVal );
__declspec(implementation_key(933)) long IPhase::GetIsFirstTreatmentPeriod ( );
__declspec(implementation_key(934)) void IPhase::PutIsFirstTreatmentPeriod ( long pVal );
__declspec(implementation_key(935)) HRESULT IPhase::ToggleComponentPhaseRelationship ( double dActComponentId );
__declspec(implementation_key(936)) HRESULT IPhase::GetComponentPhaseRelationships ( LONG_PTR lComponentPathwayRelationshipVector );
__declspec(implementation_key(937)) long IPhase::IsComponentRelatedToTreatmentPeriod ( double dActComponentId );
__declspec(implementation_key(938)) HRESULT IPhase::ClearTreatmentLinkedComponents ( );
__declspec(implementation_key(939)) HRESULT IPhase::ClearSucceedPhases ( );
__declspec(implementation_key(940)) HRESULT IPhase::RemoveAllComponentPhaseRelationships ( );
__declspec(implementation_key(941)) long IPhase::IsCopiedTreatmentPeriod ( );
__declspec(implementation_key(942)) long IPhase::IsAdhocTreatmentPeriod ( );
__declspec(implementation_key(943)) long IPhase::GetIsPhaseStartFromAPrecomponentOrder ( );
__declspec(implementation_key(944)) void IPhase::PutIsPhaseStartFromAPrecomponentOrder ( long pVal );
__declspec(implementation_key(945)) long IPhase::IsSigningIntoPendingProtocolReview ( );
__declspec(implementation_key(946)) long IPhase::HasSubphaseWithPendingActionType ( ACTION_TYPE eActionType );
__declspec(implementation_key(947)) HRESULT IPhase::GetLinkedTreatmentPeriods ( struct IComponent * pIProtocolComponent, LONG_PTR lLinkedTreatmentPeriodsVector );
__declspec(implementation_key(948)) long IPhase::GetNextComponentSequence ( );
__declspec(implementation_key(949)) void IPhase::PutNextComponentSequence ( long pVal );
__declspec(implementation_key(950)) HRESULT IPhase::GetLinkedSchedulableComponents ( LONG_PTR lLinkedSchedulableComponents );
__declspec(implementation_key(951)) HRESULT IPhase::GetLinkingSchedulingPhases ( LONG_PTR lLinkingSchedulingPhases );
__declspec(implementation_key(952)) long IPhase::DoesSchedulingLinkageExistWithComponent ( double dComponentId );
__declspec(implementation_key(953)) long IPhase::GetReviewRequiredSignatureCount ( );
__declspec(implementation_key(954)) void IPhase::PutReviewRequiredSignatureCount ( long pVal );
__declspec(implementation_key(955)) long IPhase::GetSelfProtocolReview ( );
__declspec(implementation_key(956)) void IPhase::PutSelfProtocolReview ( long pVal );
__declspec(implementation_key(957)) double IPhase::GetIntermediateReviewRequestPersonnelId ( );
__declspec(implementation_key(958)) void IPhase::PutIntermediateReviewRequestPersonnelId ( double pVal );
__declspec(implementation_key(959)) double IPhase::GetIntermediateReviewToPersonnelId ( );
__declspec(implementation_key(960)) void IPhase::PutIntermediateReviewToPersonnelId ( double pVal );
__declspec(implementation_key(961)) double IPhase::GetIntermediateReviewToPoolId ( );
__declspec(implementation_key(962)) void IPhase::PutIntermediateReviewToPoolId ( double pVal );
__declspec(implementation_key(963)) _bstr_t IPhase::GetIntermediateReviewRequestNameFullFormatted ( );
__declspec(implementation_key(964)) void IPhase::PutIntermediateReviewRequestNameFullFormatted ( _bstr_t pVal );
__declspec(implementation_key(965)) _bstr_t IPhase::GetIntermediateReviewToNameFullFormatted ( );
__declspec(implementation_key(966)) void IPhase::PutIntermediateReviewToNameFullFormatted ( _bstr_t pVal );
__declspec(implementation_key(967)) IDispatchPtr IPhase::GetIntermediateReviewUTCReviewDtTm ( );
__declspec(implementation_key(968)) void IPhase::PutIntermediateReviewUTCReviewDtTm ( IDispatch * pVal );
__declspec(implementation_key(969)) HRESULT IPhase::CopyCurrentProtocolReviewToIntermediateProtocolReview ( );
__declspec(implementation_key(970)) HRESULT IPhase::ClearIntermediateProtocolReview ( );
__declspec(implementation_key(971)) PROTOCOL_REVIEW_STATUS_FLAG IPhase::GetIntermediateReviewStatusFlag ( );
__declspec(implementation_key(972)) void IPhase::PutIntermediateReviewStatusFlag ( PROTOCOL_REVIEW_STATUS_FLAG pVal );
__declspec(implementation_key(973)) IPhasePtr IPhase::GetLastTreatmentPeriod ( );
__declspec(implementation_key(974)) HRESULT IPhase::RemoveMembersFromGroup ( struct IComponent * pComponent );
__declspec(implementation_key(975)) long IPhase::GetLastActionSeq ( );
__declspec(implementation_key(976)) void IPhase::PutLastActionSeq ( long pVal );
__declspec(implementation_key(977)) HRESULT IPhase::UpdateTZIndOnDot ( );
__declspec(implementation_key(978)) long IPhase::GetIgnoreMOEWFromMpageOrderActivateWorkflow ( );
__declspec(implementation_key(979)) void IPhase::PutIgnoreMOEWFromMpageOrderActivateWorkflow ( long pVal );
__declspec(implementation_key(980)) long IPhase::IsPhaseEmpty ( );
__declspec(implementation_key(981)) long IPhase::GetLinkedPhaseInd ( );
__declspec(implementation_key(982)) void IPhase::PutLinkedPhaseInd ( long pVal );
__declspec(implementation_key(983)) long IPhase::GetNeedProtocolReviewAccept ( );
__declspec(implementation_key(984)) void IPhase::PutNeedProtocolReviewAccept ( long pVal );
__declspec(implementation_key(985)) long IPhase::IsPhaseRestricted ( );
__declspec(implementation_key(986)) long IPhase::HasRestrictedComponent ( );
__declspec(implementation_key(987)) HRESULT IPhase::SetHasRestrictedComponent ( long bHasRestrictedComponent );
__declspec(implementation_key(988)) HRESULT IPhase::UpdatePhaseStatusToPlannedPending ( );
__declspec(implementation_key(989)) double IPlan::GetPlanCatalogId ( );
__declspec(implementation_key(990)) void IPlan::PutPlanCatalogId ( double pVal );
__declspec(implementation_key(991)) _bstr_t IPlan::GetDescription ( );
__declspec(implementation_key(992)) void IPlan::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(993)) long IPlan::GetActiveInd ( );
__declspec(implementation_key(994)) void IPlan::PutActiveInd ( long pVal );
__declspec(implementation_key(995)) long IPlan::GetCrossEncntrInd ( );
__declspec(implementation_key(996)) void IPlan::PutCrossEncntrInd ( long pVal );
__declspec(implementation_key(997)) long IPlan::GetRefTextExist ( );
__declspec(implementation_key(998)) _bstr_t IPlan::GetComment ( );
__declspec(implementation_key(999)) void IPlan::PutComment ( _bstr_t pVal );
__declspec(implementation_key(1000)) long IPlan::GetCommentExist ( );
__declspec(implementation_key(1001)) void IPlan::PutCommentExist ( long pVal );
__declspec(implementation_key(1002)) _bstr_t IPlan::GetVersionNum ( );
__declspec(implementation_key(1003)) void IPlan::PutVersionNum ( _bstr_t pVal );
__declspec(implementation_key(1004)) PLAN_TYPE IPlan::GetPlanType ( );
__declspec(implementation_key(1005)) void IPlan::PutPlanType ( PLAN_TYPE pVal );
__declspec(implementation_key(1006)) HRESULT IPlan::AddPhase ( IDispatch * lpPhase );
__declspec(implementation_key(1007)) IUnknownPtr IPlan::GetPhaseCollection ( );
__declspec(implementation_key(1008)) IUnknownPtr IPlan::GetReferenceContentPtr ( );
__declspec(implementation_key(1009)) long IPlan::GetNeedVersioning ( );
__declspec(implementation_key(1010)) void IPlan::PutNeedVersioning ( long pVal );
__declspec(implementation_key(1011)) ACTION_TYPE IPlan::GetActionType ( );
__declspec(implementation_key(1012)) void IPlan::PutActionType ( ACTION_TYPE pVal );
__declspec(implementation_key(1013)) long IPlan::GetRelModified ( );
__declspec(implementation_key(1014)) void IPlan::PutRelModified ( long pVal );
__declspec(implementation_key(1015)) long IPlan::GetUpdtCnt ( );
__declspec(implementation_key(1016)) void IPlan::PutUpdtCnt ( long pVal );
__declspec(implementation_key(1017)) double IPlan::GetCommentTextId ( );
__declspec(implementation_key(1018)) void IPlan::PutCommentTextId ( double pVal );
__declspec(implementation_key(1019)) long IPlan::GetVersion ( );
__declspec(implementation_key(1020)) void IPlan::PutVersion ( long pVal );
__declspec(implementation_key(1021)) long IPlan::GetCommentUpdtCnt ( );
__declspec(implementation_key(1022)) void IPlan::PutCommentUpdtCnt ( long pVal );
__declspec(implementation_key(1023)) long IPlan::GetCommentModified ( );
__declspec(implementation_key(1024)) void IPlan::PutCommentModified ( long pVal );
__declspec(implementation_key(1025)) long IPlan::GetCommentRemoved ( );
__declspec(implementation_key(1026)) void IPlan::PutCommentRemoved ( long pVal );
__declspec(implementation_key(1027)) double IPlan::GetPlanId ( );
__declspec(implementation_key(1028)) void IPlan::PutPlanId ( double pVal );
__declspec(implementation_key(1029)) double IPlan::GetPersonId ( );
__declspec(implementation_key(1030)) void IPlan::PutPersonId ( double pVal );
__declspec(implementation_key(1031)) HRESULT IPlan::RemovePhase ( struct IPhase * pIPhase );
__declspec(implementation_key(1032)) IUnknownPtr IPlan::GetRemovedPhaseCollection ( );
__declspec(implementation_key(1033)) long IPlan::GetCheckRefTextExist ( );
__declspec(implementation_key(1034)) void IPlan::PutCheckRefTextExist ( long pVal );
__declspec(implementation_key(1035)) HRESULT IPlan::AddRemovedPhase ( IDispatch * lpPhase );
__declspec(implementation_key(1036)) HRESULT IPlan::Copy ( struct IPlan * pPlan );
__declspec(implementation_key(1037)) long IPlan::IsEqual ( struct IPlan * pPlan );
__declspec(implementation_key(1038)) _variant_t IPlan::GetKey ( );
__declspec(implementation_key(1039)) IComponentPtr IPlan::FindOrderComponent ( LONG_PTR hPvOrderObj );
__declspec(implementation_key(1040)) IPhasePtr IPlan::FindComponentPhase ( struct IComponent * pComponent );
__declspec(implementation_key(1041)) long IPlan::GetCatalogInd ( );
__declspec(implementation_key(1042)) void IPlan::PutCatalogInd ( long pVal );
__declspec(implementation_key(1043)) double IPlan::GetPlanTypeCd ( );
__declspec(implementation_key(1044)) void IPlan::PutPlanTypeCd ( double pVal );
__declspec(implementation_key(1045)) double IPlan::GetDisplayMethodCd ( );
__declspec(implementation_key(1046)) void IPlan::PutDisplayMethodCd ( double pVal );
__declspec(implementation_key(1047)) _bstr_t IPlan::GetPlanTypeDisp ( );
__declspec(implementation_key(1048)) void IPlan::PutPlanTypeDisp ( _bstr_t pVal );
__declspec(implementation_key(1049)) _bstr_t IPlan::GetPlanTypeMean ( );
__declspec(implementation_key(1050)) void IPlan::PutPlanTypeMean ( _bstr_t pVal );
__declspec(implementation_key(1051)) PLAN_ZONE IPlan::GetPlanZone ( );
__declspec(implementation_key(1052)) void IPlan::PutPlanZone ( PLAN_ZONE pVal );
__declspec(implementation_key(1053)) DATE IPlan::GetSortDtTm ( );
__declspec(implementation_key(1054)) void IPlan::PutSortDtTm ( DATE pVal );
__declspec(implementation_key(1055)) double IPlan::GetPlanClassCd ( );
__declspec(implementation_key(1056)) void IPlan::PutPlanClassCd ( double pVal );
__declspec(implementation_key(1057)) _bstr_t IPlan::GetPlanClassDisp ( );
__declspec(implementation_key(1058)) void IPlan::PutPlanClassDisp ( _bstr_t pVal );
__declspec(implementation_key(1059)) _bstr_t IPlan::GetPlanClassMean ( );
__declspec(implementation_key(1060)) void IPlan::PutPlanClassMean ( _bstr_t pVal );
__declspec(implementation_key(1061)) _bstr_t IPlan::GetDisplayMethodDisp ( );
__declspec(implementation_key(1062)) void IPlan::PutDisplayMethodDisp ( _bstr_t pVal );
__declspec(implementation_key(1063)) _bstr_t IPlan::GetDisplayMethodMean ( );
__declspec(implementation_key(1064)) void IPlan::PutDisplayMethodMean ( _bstr_t pVal );
__declspec(implementation_key(1065)) long IPlan::GetRefTextModified ( );
__declspec(implementation_key(1066)) void IPlan::PutRefTextModified ( long pVal );
__declspec(implementation_key(1067)) double IPlan::GetPlanEvidenceReltnId ( );
__declspec(implementation_key(1068)) void IPlan::PutPlanEvidenceReltnId ( double pVal );
__declspec(implementation_key(1069)) long IPlan::GetNewEvidence ( );
__declspec(implementation_key(1070)) void IPlan::PutNewEvidence ( long pVal );
__declspec(implementation_key(1071)) DATE IPlan::GetBegEffectiveDtTm ( );
__declspec(implementation_key(1072)) void IPlan::PutBegEffectiveDtTm ( DATE pVal );
__declspec(implementation_key(1073)) DATE IPlan::GetEndEffectiveDtTm ( );
__declspec(implementation_key(1074)) void IPlan::PutEndEffectiveDtTm ( DATE pVal );
__declspec(implementation_key(1075)) IComponentPtr IPlan::FindOrderComponentById ( double orderId );
__declspec(implementation_key(1076)) IComponentPtr IPlan::FindComponentById ( double compId );
__declspec(implementation_key(1077)) double IPlan::GetRefOwnerPersonId ( );
__declspec(implementation_key(1078)) void IPlan::PutRefOwnerPersonId ( double pVal );
__declspec(implementation_key(1079)) HRESULT IPlan::SetFacilityFlexing ( const _variant_t & cv, const _variant_t & disp );
__declspec(implementation_key(1080)) _bstr_t IPlan::GetFlexFacilityDisp ( );
__declspec(implementation_key(1081)) double IPlan::GetFlexingFacilityCodeAt ( int idx );
__declspec(implementation_key(1082)) long IPlan::GetFlexingCount ( );
__declspec(implementation_key(1083)) long IPlan::GetAllFacilityInd ( );
__declspec(implementation_key(1084)) void IPlan::PutAllFacilityInd ( long pVal );
__declspec(implementation_key(1085)) _bstr_t IPlan::GetDisplayDescription ( );
__declspec(implementation_key(1086)) void IPlan::PutDisplayDescription ( _bstr_t pVal );
__declspec(implementation_key(1087)) double IPlan::GetVirtualViewPosAt ( int Index );
__declspec(implementation_key(1088)) _bstr_t IPlan::FindZynxEvidenceLocatorByPhaseId ( double id );
__declspec(implementation_key(1089)) _bstr_t IPlan::FindZynxEvidenceLocatorByClinCat ( double clinCatCd, double clinSubCatCd );
__declspec(implementation_key(1090)) _bstr_t IPlan::FindZynxEvidenceLocatorByCompId ( double id );
__declspec(implementation_key(1091)) HRESULT IPlan::AddPwEvidenceReltn ( LONG_PTR pVal );
__declspec(implementation_key(1092)) _bstr_t IPlan::GetFacilityDisplayAt ( int Index );
__declspec(implementation_key(1093)) long IPlan::AddProblemDiagnosis ( IDispatch * lpDisp );
__declspec(implementation_key(1094)) HRESULT IPlan::RemoveProblemDiagnosis ( int Index );
__declspec(implementation_key(1095)) long IPlan::GetProblemDiagChanged ( );
__declspec(implementation_key(1096)) void IPlan::PutProblemDiagChanged ( long pVal );
__declspec(implementation_key(1097)) long IPlan::GetProblemDiagCount ( );
__declspec(implementation_key(1098)) _bstr_t IPlan::GetProblemDiagDisplayAt ( int Index );
__declspec(implementation_key(1099)) double IPlan::GetProblemDiagNomenIdAt ( int Index );
__declspec(implementation_key(1100)) _bstr_t IPlan::GetProblemDiagConceptCKIAt ( int Index );
__declspec(implementation_key(1101)) long IPlan::GetRemoveReftextInd ( );
__declspec(implementation_key(1102)) void IPlan::PutRemoveReftextInd ( long pVal );
__declspec(implementation_key(1103)) _bstr_t IPlan::FindZynxEvidenceLocatorByPhaseClinCat ( double phaseId, double clinCatCd );
__declspec(implementation_key(1104)) _bstr_t IPlan::FindZynxEvidenceLocatorByPhaseClinSubCat ( double phaseId, double clinSubCatCd );
__declspec(implementation_key(1105)) double IPlan::FindReferenceManualByPhaseId ( double phaseId );
__declspec(implementation_key(1106)) IUnknownPtr IPlan::GetPhaseReferenceContentPtr ( double phaseId );
__declspec(implementation_key(1107)) long IPlan::GetPwEvidenceReltn ( PLAN_EVIDENCE_LEVEL level, double dVal, double dClinCat, double dClinSubCat, _bstr_t sType, LONG_PTR lVal );
__declspec(implementation_key(1108)) long IPlan::GetPwEvidenceCount ( );
__declspec(implementation_key(1109)) HRESULT IPlan::GetPwEvidenceAt ( int Index, LONG_PTR lVal );
__declspec(implementation_key(1110)) HRESULT IPlan::RemovePwEvidenceReltn ( LONG_PTR lVal );
__declspec(implementation_key(1111)) HRESULT IPlan::UpdatePwEvidenceReltn ( LONG_PTR lVal );
__declspec(implementation_key(1112)) HRESULT IPlan::CreatRefTextContentPtrs ( );
__declspec(implementation_key(1113)) long IPlan::GetSubPhaseInd ( );
__declspec(implementation_key(1114)) void IPlan::PutSubPhaseInd ( long pVal );
__declspec(implementation_key(1115)) long IPlan::GetHideFlexedCompInd ( );
__declspec(implementation_key(1116)) void IPlan::PutHideFlexedCompInd ( long pVal );
__declspec(implementation_key(1117)) IGroupPtr IPlan::GetCPGroupPtr ( double dGroupNbr );
__declspec(implementation_key(1118)) HRESULT IPlan::AddGroup ( struct IGroup * pIGroup );
__declspec(implementation_key(1119)) IDispatchPtr IPlan::GetGroupCollection ( );
__declspec(implementation_key(1120)) int IPlan::GetGroupCount ( );
__declspec(implementation_key(1121)) HRESULT IPlan::RemoveGroup ( struct IGroup * pGroup );
__declspec(implementation_key(1122)) long IPlan::GetUsingCycleNbr ( );
__declspec(implementation_key(1123)) void IPlan::PutUsingCycleNbr ( long pVal );
__declspec(implementation_key(1124)) long IPlan::GetCycleNbr ( );
__declspec(implementation_key(1125)) void IPlan::PutCycleNbr ( long pVal );
__declspec(implementation_key(1126)) _bstr_t IPlan::GetDefaultViewMean ( );
__declspec(implementation_key(1127)) void IPlan::PutDefaultViewMean ( _bstr_t pVal );
__declspec(implementation_key(1128)) long IPlan::GetPropagateDiagInd ( );
__declspec(implementation_key(1129)) void IPlan::PutPropagateDiagInd ( long pVal );
__declspec(implementation_key(1130)) long IPlan::GetStandardCycleNbr ( );
__declspec(implementation_key(1131)) void IPlan::PutStandardCycleNbr ( long pVal );
__declspec(implementation_key(1132)) long IPlan::GetOrigCycleNbr ( );
__declspec(implementation_key(1133)) void IPlan::PutOrigCycleNbr ( long pVal );
__declspec(implementation_key(1134)) long IPlan::GetChemoRelatedInd ( );
__declspec(implementation_key(1135)) void IPlan::PutChemoRelatedInd ( long pVal );
__declspec(implementation_key(1136)) long IPlan::GetChemoInd ( );
__declspec(implementation_key(1137)) void IPlan::PutChemoInd ( long pVal );
__declspec(implementation_key(1138)) long IPlan::GetProviderPromptInd ( );
__declspec(implementation_key(1139)) void IPlan::PutProviderPromptInd ( long pVal );
__declspec(implementation_key(1140)) double IPlan::GetProviderId ( );
__declspec(implementation_key(1141)) void IPlan::PutProviderId ( double pVal );
__declspec(implementation_key(1142)) double IPlan::GetCommunicationTypeCd ( );
__declspec(implementation_key(1143)) void IPlan::PutCommunicationTypeCd ( double pVal );
__declspec(implementation_key(1144)) IDispatchPtr IPlan::GetUTCSortDtTm ( );
__declspec(implementation_key(1145)) void IPlan::PutUTCSortDtTm ( IDispatch * pVal );
__declspec(implementation_key(1146)) _bstr_t IPlan::BuildRTF ( );
__declspec(implementation_key(1147)) IDispatchPtr IPlan::GetSuggestedPlan ( );
__declspec(implementation_key(1148)) void IPlan::PutSuggestedPlan ( IDispatch * pVal );
__declspec(implementation_key(1149)) long IPlan::GetAllowCopyForwardInd ( );
__declspec(implementation_key(1150)) void IPlan::PutAllowCopyForwardInd ( long pVal );
__declspec(implementation_key(1151)) long IPlan::GetNewestVersion ( );
__declspec(implementation_key(1152)) void IPlan::PutNewestVersion ( long pVal );
__declspec(implementation_key(1153)) double IPlan::GetNewestVersionPathwayCatId ( );
__declspec(implementation_key(1154)) void IPlan::PutNewestVersionPathwayCatId ( double pVal );
__declspec(implementation_key(1155)) long IPlan::GetNewestVersionActiveInd ( );
__declspec(implementation_key(1156)) void IPlan::PutNewestVersionActiveInd ( long pVal );
__declspec(implementation_key(1157)) COMP_LOADING_STATUS IPlan::GetComponentLoaded ( );
__declspec(implementation_key(1158)) HRESULT IPlan::SetEventSetNamesByPhaseId ( double dPhaseId, LONG_PTR lEventSetNames );
__declspec(implementation_key(1159)) HRESULT IPlan::GetEventSetNamesByPhaseId ( double dPhaseId, LONG_PTR * lEventSetNames );
__declspec(implementation_key(1160)) long IPlan::PhaseHasEventSetNames ( double dPhaseId );
__declspec(implementation_key(1161)) IPhasePtr IPlan::GetAutoInitiatePhase ( );
__declspec(implementation_key(1162)) IPhasePtr IPlan::GetCarePlanPhase ( );
__declspec(implementation_key(1163)) HRESULT IPlan::RemoveOldPwEvidenceReltnForCopyPlan ( LONG_PTR lVal );
__declspec(implementation_key(1164)) long IPlan::GetPlanActionLoaded ( );
__declspec(implementation_key(1165)) void IPlan::PutPlanActionLoaded ( long pVal );
__declspec(implementation_key(1166)) long IPlan::GetCycleBeginNbr ( );
__declspec(implementation_key(1167)) void IPlan::PutCycleBeginNbr ( long pVal );
__declspec(implementation_key(1168)) long IPlan::GetCycleEndNbr ( );
__declspec(implementation_key(1169)) void IPlan::PutCycleEndNbr ( long pVal );
__declspec(implementation_key(1170)) double IPlan::GetCycleLabelCd ( );
__declspec(implementation_key(1171)) void IPlan::PutCycleLabelCd ( double pVal );
__declspec(implementation_key(1172)) short IPlan::GetCycleDisplayEndInd ( );
__declspec(implementation_key(1173)) void IPlan::PutCycleDisplayEndInd ( short pVal );
__declspec(implementation_key(1174)) short IPlan::GetCycleLockEndInd ( );
__declspec(implementation_key(1175)) void IPlan::PutCycleLockEndInd ( short pVal );
__declspec(implementation_key(1176)) long IPlan::GetCycleIncrementNbr ( );
__declspec(implementation_key(1177)) void IPlan::PutCycleIncrementNbr ( long pVal );
__declspec(implementation_key(1178)) long IPlan::HasPhaseOffsets ( );
__declspec(implementation_key(1179)) HRESULT IPlan::RemoveAllPhaseOffsets ( );
__declspec(implementation_key(1180)) DEFAULT_VISIT_TYPE_FLAG IPlan::GetDefaultVisitTypeFlag ( );
__declspec(implementation_key(1181)) void IPlan::PutDefaultVisitTypeFlag ( DEFAULT_VISIT_TYPE_FLAG pVal );
__declspec(implementation_key(1182)) long IPlan::GetPromptOnSelectionInd ( );
__declspec(implementation_key(1183)) void IPlan::PutPromptOnSelectionInd ( long pVal );
__declspec(implementation_key(1184)) IPhasePtr IPlan::GetPhaseByKey ( double dPhaseId );
__declspec(implementation_key(1185)) HRESULT IPlan::GetSchedulablePhasesByComponentId ( double dComponentId, LONG_PTR larrPhases );
__declspec(implementation_key(1186)) HRESULT IPlan::GetNonSchedulablePhases ( LONG_PTR larrPhases );
__declspec(implementation_key(1187)) HRESULT IPlan::UpdateSchedulablePhasesForComponent ( IDispatch * pComponent, LONG_PTR larrPhases );
__declspec(implementation_key(1188)) HRESULT IPlan::RemoveCompPathwayRelationsByPhase ( IDispatch * pPhase );
__declspec(implementation_key(1189)) HRESULT IPlan::GetCompPathwayRelations ( LONG_PTR larrCompPathwayRelations );
__declspec(implementation_key(1190)) HRESULT IPlan::SetCompPathwayRelations ( LONG_PTR larrCompPathwayRelations );
__declspec(implementation_key(1191)) long IPlan::GetExpectedCycleNbr ( );
__declspec(implementation_key(1192)) void IPlan::PutExpectedCycleNbr ( long pVal );
__declspec(implementation_key(1193)) long IPlan::HasOrderingDefaults ( );
__declspec(implementation_key(1194)) HRESULT IPlan::AddCompPathwayRelations ( LONG_PTR larrCompPathwayRelations );
__declspec(implementation_key(1195)) IComponentPtr IPlan::GetSchedulableComponentByPhaseId ( double dPhaseId );
__declspec(implementation_key(1196)) HRESULT IPlan::GetSequencedPhaseArray ( LONG_PTR larrPhases );
__declspec(implementation_key(1197)) HRESULT IPlan::GetFakeInitiatePendingPhases ( LONG_PTR larrPhases );
__declspec(implementation_key(1198)) long IPlan::IsPhaseSchedulable ( double dPhaseId );
__declspec(implementation_key(1199)) long IPlan::IsComponentSchedulable ( double dComponentId );
__declspec(implementation_key(1200)) IPhasePtr IPlan::GetEarliestSchedulablePhaseByComponentId ( double dComponentId );
__declspec(implementation_key(1201)) long IPlan::IsComponentLinkedToSpecificPhase ( double dComponentId, double dPhaseId );
__declspec(implementation_key(1202)) HRESULT IPlan::GetSynonyms ( LONG_PTR larrSynonyms );
__declspec(implementation_key(1203)) HRESULT IPlan::SetSynonyms ( LONG_PTR larrSynonyms );
__declspec(implementation_key(1204)) double IPlan::GetPrimarySynonymId ( );
__declspec(implementation_key(1205)) void IPlan::PutPrimarySynonymId ( double pVal );
__declspec(implementation_key(1206)) long IPlan::GetPrimarySynonymModified ( );
__declspec(implementation_key(1207)) void IPlan::PutPrimarySynonymModified ( long pVal );
__declspec(implementation_key(1208)) _bstr_t IPlan::GetCurrentSynonym ( );
__declspec(implementation_key(1209)) void IPlan::PutCurrentSynonym ( _bstr_t pVal );
__declspec(implementation_key(1210)) _bstr_t IPlan::GetSynonymById ( double dSynonymId );
__declspec(implementation_key(1211)) HRESULT IPlan::RemovePhaseByKey ( double dKey );
__declspec(implementation_key(1212)) _bstr_t IPlan::GetTrialPlanDescription ( );
__declspec(implementation_key(1213)) void IPlan::PutTrialPlanDescription ( _bstr_t pVal );
__declspec(implementation_key(1214)) IPhasePtr IPlan::GetFirstPhase ( );
__declspec(implementation_key(1215)) double IPlan::GetEarliestOffsetInMinutes ( struct IPhase * pPhase );
__declspec(implementation_key(1216)) long IPlan::HasProtocolPhase ( );
__declspec(implementation_key(1217)) IUnknownPtr IPlan::GetComponentGroupReferenceContentPtr ( IDispatch * pComponent );
__declspec(implementation_key(1218)) double IPlan::GetRegimenElementId ( );
__declspec(implementation_key(1219)) void IPlan::PutRegimenElementId ( double pVal );
__declspec(implementation_key(1220)) EPlanVersionStatus IPlan::GetVersionStatus ( );
__declspec(implementation_key(1221)) void IPlan::PutVersionStatus ( EPlanVersionStatus pVal );
__declspec(implementation_key(1222)) _bstr_t IPlan::GetUUID ( );
__declspec(implementation_key(1223)) void IPlan::PutUUID ( _bstr_t pVal );
__declspec(implementation_key(1224)) double IPlan::GetCustomizedPlanId ( );
__declspec(implementation_key(1225)) void IPlan::PutCustomizedPlanId ( double pVal );
__declspec(implementation_key(1226)) HRESULT IPlan::GetSchedulableComponentsIdsByPhaseId ( double dPhaseId, LONG_PTR lComponentsIdsVector );
__declspec(implementation_key(1227)) HRESULT IPlan::GetSchedulablePhasesIdsByComponentId ( double dComponentId, LONG_PTR lPhasesIdsVector );
__declspec(implementation_key(1228)) HRESULT IPlan::GetMultipleIncludedComponentsLinkedToOnePhase ( LONG_PTR lComponentsByPhaseMap );
__declspec(implementation_key(1229)) IComponentPtr IPlan::GetConflictingIncludedSchedulableComponent ( struct IComponent * pIComponent );
__declspec(implementation_key(1230)) HRESULT IPlan::SwitchCompPathRelationsIds ( LONG_PTR lIdsMap );
__declspec(implementation_key(1231)) long IPlan::DuplicateProblemDiagnosis ( _bstr_t sCKI );
__declspec(implementation_key(1232)) _bstr_t IPlan::GetPathwayCustomizationPlanName ( );
__declspec(implementation_key(1233)) void IPlan::PutPathwayCustomizationPlanName ( _bstr_t pVal );
__declspec(implementation_key(1234)) _bstr_t IPlan::GetPathwayReferencePlanName ( );
__declspec(implementation_key(1235)) void IPlan::PutPathwayReferencePlanName ( _bstr_t pVal );
__declspec(implementation_key(1236)) int IPlan::ClearSchedulablePhasesForComponent ( IDispatch * pComponent );
__declspec(implementation_key(1237)) long IPlan::IsAnIVSequence ( IV_SEQUENCE_STATUS eSequenceStatus );
__declspec(implementation_key(1238)) HRESULT IPlan::AddReview ( struct IReview * pIReview );
__declspec(implementation_key(1239)) IReviewPtr IPlan::GetReview ( EPowerPlanReviewType powerPlanReviewType );
__declspec(implementation_key(1240)) IUnknownPtr IPlan::GetReviewCollection ( );
__declspec(implementation_key(1241)) long IPlan::GetRestrictedActionsBitmask ( );
__declspec(implementation_key(1242)) void IPlan::PutRestrictedActionsBitmask ( long lRestrictedActionsBitmask );
__declspec(implementation_key(1243)) long IPlan::GetAllowProposal ( );
__declspec(implementation_key(1244)) void IPlan::PutAllowProposal ( long pAllowProposal );
__declspec(implementation_key(1245)) long IPlan::GetOpenByDefaultInd ( );
__declspec(implementation_key(1246)) void IPlan::PutOpenByDefaultInd ( long pVal );
__declspec(implementation_key(1247)) IPhasePtr IPlan::GetPhaseToOpenByDefault ( );
__declspec(implementation_key(1248)) double IPlan::GetVersionPlanCatalogId ( );
__declspec(implementation_key(1249)) void IPlan::PutVersionPlanCatalogId ( double pVal );
__declspec(implementation_key(1250)) HRESULT IPlan::AddAdhocSchedulingLink ( double dActComponentId, double dTreatmentPeriodId );
__declspec(implementation_key(1251)) long IPlan::IsPhaseLinkedToExcludedSchedulableComponents ( IDispatch * pPhaseDispatch );
__declspec(implementation_key(1252)) HRESULT IPlan::GetPhaseLinkedSchedulableComponents ( double dPhaseId, LONG_PTR lLinkedSchedulableComponents );
__declspec(implementation_key(1253)) long IPlan::IsComponentLinkedToSpecificPhaseEx ( double dComponentId, double dPhaseId );
__declspec(implementation_key(1254)) _bstr_t IPlan::GetProviderName ( );
__declspec(implementation_key(1255)) void IPlan::PutProviderName ( _bstr_t pVal );
__declspec(implementation_key(1256)) LONG_PTR IPlan::GetProtocolReviewPhaseIds ( );
__declspec(implementation_key(1257)) long IPlan::GetAllowSaveAsMyFavorite ( );
__declspec(implementation_key(1258)) void IPlan::PutAllowSaveAsMyFavorite ( long pSaveAsMyFavorite );
__declspec(implementation_key(1259)) LONG_PTR IPlan::GetSchedulingLinkedPhaseIdsByComponentIdMap ( );
__declspec(implementation_key(1260)) long IPlan::GetOverrideMRDOnPlanInd ( );
__declspec(implementation_key(1261)) void IPlan::PutOverrideMRDOnPlanInd ( long pOverrideMRDOnPlanInd );
__declspec(implementation_key(1262)) long IPlan::DoesPlanHaveMultiplePhases ( );
__declspec(implementation_key(1263)) HRESULT IPlan::GetLinkedPhaseList ( LONG_PTR lLinkedPhaseList );
__declspec(implementation_key(1264)) int IPlanLookUp::StartSearch ( _bstr_t sSearchString );
__declspec(implementation_key(1265)) double IPlanLookUp::GetPlanCatalogId ( int Index );
__declspec(implementation_key(1266)) _bstr_t IPlanLookUp::GetPlanDescription ( int Index );
__declspec(implementation_key(1267)) _bstr_t IPlanLookUp::GetPlanVersionNum ( int Index );
__declspec(implementation_key(1268)) long IPlanLookUp::GetActiveInd ( int Index );
__declspec(implementation_key(1269)) int IPlanLookUp::GetOldVersionCnt ( int Index );
__declspec(implementation_key(1270)) double IPlanLookUp::GetOldVerCatalogId ( int Index, int verIndex );
__declspec(implementation_key(1271)) _bstr_t IPlanLookUp::GetOldVerDescription ( int Index, int verIndex );
__declspec(implementation_key(1272)) _bstr_t IPlanLookUp::GetOldVersionNum ( int Index, int verIndex );
__declspec(implementation_key(1273)) long IPlanLookUp::GetOldVerActiveInd ( int Index, int verIndex );
__declspec(implementation_key(1274)) IUnknownPtr IPlanLookUp::SelectPlan ( int Index, int verIndex );
__declspec(implementation_key(1275)) HRESULT IPlanLookUp::LoadPlanDetails ( struct IPlan * pPlan );
__declspec(implementation_key(1276)) double IPlanLookUp::GetPlanEvidenceReltnId ( int Index );
__declspec(implementation_key(1277)) HRESULT IPlanLookUp::LoadPhaseDetails ( struct IPhase * pPhase );
__declspec(implementation_key(1278)) int IPlanLookUp::SearchPlansByFacility ( _bstr_t sSearch, double facilityCd );
__declspec(implementation_key(1279)) _bstr_t IPlanLookUp::GetPlanDisplayDescription ( int Index );
__declspec(implementation_key(1280)) _bstr_t IPlanLookUp::GetPlanEvidenceLocator ( int Index );
__declspec(implementation_key(1281)) IUnknownPtr IPlanLookUp::SelectPrsnlPlan ( int Index );
__declspec(implementation_key(1282)) _bstr_t IPlanLookUp::GetPrsnlPlanDescription ( int Index );
__declspec(implementation_key(1283)) HRESULT IPlanLookUp::SearchProblemDiagnosesPlans ( long bProblem, long bDiagnoses, double dPatientId, double dEncounterId );
__declspec(implementation_key(1284)) OUTCOME_ACT_STATUS IPlanLookUp::SynchProblemDxPlans ( );
__declspec(implementation_key(1285)) LONG_PTR IPlanLookUp::GetPlanCountByNomenclatureId ( double nomenclatureId );
__declspec(implementation_key(1286)) HRESULT IPlanLookUp::GetNomenclaturePlanArray ( double nomenclatureId, VARIANT * pPlanArray );
__declspec(implementation_key(1287)) IUnknownPtr IPlanLookUp::SelectPlanByCatId ( double pathwayCatalogId );
__declspec(implementation_key(1288)) long IPlanLookUp::GetVirtualViewOffset ( );
__declspec(implementation_key(1289)) void IPlanLookUp::PutVirtualViewOffset ( long pVal );
__declspec(implementation_key(1290)) double IPlanLookUp::GetfacilityCd ( );
__declspec(implementation_key(1291)) void IPlanLookUp::PutfacilityCd ( double pVal );
__declspec(implementation_key(1292)) int IPlanLookUp::SearchAllPlans ( _bstr_t sSearchString );
__declspec(implementation_key(1293)) IPlanPtr IPlanLookUp::CopyPlan ( int Index, int verIndex );
__declspec(implementation_key(1294)) int IPlanLookUp::SearchPlanPhase ( _bstr_t sSearchString );
__declspec(implementation_key(1295)) double IPlanLookUp::GetPhaseCatalogId ( int planIdx, int phaseIdx );
__declspec(implementation_key(1296)) _bstr_t IPlanLookUp::GetPhaseDescription ( int planIdx, int phaseIdx );
__declspec(implementation_key(1297)) long IPlanLookUp::GetPhaseCount ( int planIdx );
__declspec(implementation_key(1298)) IDispatchPtr IPlanLookUp::CopyComponents ( struct IPlan * pPlan, struct IPhase * pPhase );
__declspec(implementation_key(1299)) int IPlanLookUp::FindParentIndex ( double dPhaseCatId );
__declspec(implementation_key(1300)) int IPlanLookUp::SearchSubPhasePlan ( _bstr_t sSearchString );
__declspec(implementation_key(1301)) long IPlanLookUp::GetAllFacilityAccessInd ( int Index );
__declspec(implementation_key(1302)) _variant_t IPlanLookUp::GetFacilityAccessList ( int Index );
__declspec(implementation_key(1303)) long IPlanLookUp::GetSkipSubPhaseInd ( );
__declspec(implementation_key(1304)) void IPlanLookUp::PutSkipSubPhaseInd ( long pVal );
__declspec(implementation_key(1305)) HRESULT IPlanLookUp::LoadPlanPhase ( struct IPlan * pPlan, struct IPhase * pPhase );
__declspec(implementation_key(1306)) HRESULT IPlanLookUp::QuitAllJobs ( );
__declspec(implementation_key(1307)) HRESULT IPlanLookUp::GetActivePlanCycles ( struct IPlan * pPlan );
__declspec(implementation_key(1308)) int IPlanLookUp::GetLatestCycleIndex ( );
__declspec(implementation_key(1309)) long IPlanLookUp::GetPlanCycleCount ( );
__declspec(implementation_key(1310)) _bstr_t IPlanLookUp::GetLatestCyclePrsnl ( );
__declspec(implementation_key(1311)) DATE IPlanLookUp::GetLatestCycleOrderDtTm ( );
__declspec(implementation_key(1312)) long IPlanLookUp::CheckForDuplicateCycle ( long lCycleNbr );
__declspec(implementation_key(1313)) long IPlanLookUp::GetLatestCycleNbr ( );
__declspec(implementation_key(1314)) LONG_PTR IPlanLookUp::GetSearchResult ( int Index );
__declspec(implementation_key(1315)) long IPlanLookUp::GetSearchResultCount ( );
__declspec(implementation_key(1316)) HRESULT IPlanLookUp::GetPrsnlPlanSearchResult ( int Index, LONG_PTR * pResult );
__declspec(implementation_key(1317)) _variant_t IPlanLookUp::GetProbDxNomenIds ( );
__declspec(implementation_key(1318)) IDispatchPtr IPlanLookUp::GetUTCLatestCycleOrderDtTm ( );
__declspec(implementation_key(1319)) int IPlanLookUp::SearchPlansByFacilityEx2 ( _bstr_t sSearch, unsigned int searchType, double facilityCd, int maxResults, double dPatientId, double dEncounterId, long bSearchCustomizedPlans );
__declspec(implementation_key(1320)) int IPlanLookUp::SearchPrsnlPlansEx ( double dUserId, double dPatientId, double dEncounterId );
__declspec(implementation_key(1321)) long IPlanLookUp::SearchPreviousTreatments ( double dPatientId, double dEncounterId, double dFacilityCd );
__declspec(implementation_key(1322)) HRESULT IPlanLookUp::SearchProbDxPlansEx ( long bProblems, long bDiagnoses, long bPrevTreatments, double dPatientId, double dEncounterId );
__declspec(implementation_key(1323)) short IPlanLookUp::GetFacilityFlexingInd ( );
__declspec(implementation_key(1324)) void IPlanLookUp::PutFacilityFlexingInd ( short pVal );
__declspec(implementation_key(1325)) IUnknownPtr IPlanLookUp::SelectPlanByCatIdWithPatientInfo ( double dPathwayCatalogId, double dPersonId, double dEncounterId );
__declspec(implementation_key(1326)) long IPlanLookUp::GetLatestCycleExpectedNbr ( );
__declspec(implementation_key(1327)) double IPlanLookUp::GetLatestCycleLabelCd ( );
__declspec(implementation_key(1328)) _bstr_t IPlanLookUp::GetLatestCycleProviderName ( );
__declspec(implementation_key(1329)) _bstr_t IPlanLookUp::GetLatestCycleCommunicationType ( );
__declspec(implementation_key(1330)) _bstr_t IPlanLookUp::GetLatestCycleGroupDesc ( );
__declspec(implementation_key(1331)) _bstr_t IPlanLookUp::GetPowerTrialName ( int iIndex );
__declspec(implementation_key(1332)) int IPlanLookUp::StartSearchWithTrials ( _bstr_t sSearchString );
__declspec(implementation_key(1333)) EPlanVersionStatus IPlanLookUp::GetVersionStatus ( int iIndex );
__declspec(implementation_key(1334)) EPlanVersionStatus IPlanLookUp::GetOldVersionStatus ( int iIndex, int iVersionIndex );
__declspec(implementation_key(1335)) long IPlanLookUp::SearchInTestPlans ( double dFacilityCd );
__declspec(implementation_key(1336)) LONG_PTR IPlanLookUp::GetInTestPlanSearchResult ( int Index );
__declspec(implementation_key(1337)) int IPlanLookUp::LoadPlanVersions ( double dPlanCatalogId );
__declspec(implementation_key(1338)) DATE IPlanLookUp::GetBeginEffectiveDate ( int iIndex );
__declspec(implementation_key(1339)) DATE IPlanLookUp::GetEndEffectiveDate ( int iIndex );
__declspec(implementation_key(1340)) long IPlanLookUp::GetUpdtCnt ( int iIndex );
__declspec(implementation_key(1341)) IPlanPtr IPlanLookUp::LoadCatalogPlanWithCustomization ( double dPlanCatalogId, double dCustomizedPlanId, double dLocationCd, long bLoadForPlanTool, long bPrefetchActivityIds, long bReplaceCatalogIds, LONG_PTR lsErrorReport );
__declspec(implementation_key(1342)) IPlanPtr IPlanLookUp::LoadCatalogPlanFromSearchResult ( int iIndex, int iVersionIndex, long bReplaceCatalogIds );
__declspec(implementation_key(1343)) LONG_PTR IPlanLookUp::QueryCustomizedPlans ( LONG_PTR lQueryCustomizedPlansCriteria );
__declspec(implementation_key(1344)) int IPlanLookUp::SearchPersonalizedPlans ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1345)) LONG_PTR IPlanLookUp::GetPersonalizedPlanSearchResult ( int iIndex );
__declspec(implementation_key(1346)) IPlanPtr IPlanLookUp::LoadCatalogPlanUsingPatientDataWithCustomization ( double dPlanCatalogId, double dCustomizedPlanId, double dLocationCd, long bLoadForPlanTool, long bPrefetchActivityIds, long bReplaceCatalogIds, double dPatientId, double dEncounterId, double dProviderPatientRelationCd, LONG_PTR lsErrorReport );
__declspec(implementation_key(1347)) IPlanPtr IPlanLookUp::LoadCatalogPlan ( LONG_PTR lQueryReferencePowerPlansCriteria );
__declspec(implementation_key(1348)) long IPlanLookUp::ReplicatePhaseAndAddToPlan ( struct IPhase * pPhase, struct IPlan * pPlan, double dPatientId, double dEncounterId );
__declspec(implementation_key(1349)) long IPlanLookUp::LoadSubPhaseDetailsAndAddToPlan ( struct IPhase * pSubPhase, struct IPlan * pPlan, double dPatientId, double dEncounterId );
__declspec(implementation_key(1350)) int IPlanLookUp::SearchPersonalizedPlansWithString ( _bstr_t searchStr, int iSearchStringType, double dPatientId, double dEncounterId );
__declspec(implementation_key(1351)) HRESULT IPlanLookUp::SetProblemsList ( IDispatch * pDispatch );
__declspec(implementation_key(1352)) HRESULT IPlanLookUp::SetDiagnosesList ( IDispatch * pDispatch );
__declspec(implementation_key(1353)) long IPlanLookUp::SearchPreviousTreatmentsWithoutLimit ( double dPatientId, double dEncounterId, double dFacilityCd );
__declspec(implementation_key(1354)) LONG_PTR IPlanLookUp::GetComponentIdMap ( );
__declspec(implementation_key(1355)) HRESULT IProVideObjectEvent::Locked ( );
__declspec(implementation_key(1356)) HRESULT IProVideObjectEvent::Unlocked ( );
__declspec(implementation_key(1357)) HRESULT IProVideObjectEvent::Changed ( );
__declspec(implementation_key(1358)) long IOrderLookUp::SearchOrderable ( _bstr_t sSearch );
__declspec(implementation_key(1359)) double IOrderLookUp::GetCatalogCd ( int Index );
__declspec(implementation_key(1360)) _bstr_t IOrderLookUp::GetMnemonic ( int Index );
__declspec(implementation_key(1361)) double IOrderLookUp::GetCatalogTypeCd ( int Index );
__declspec(implementation_key(1362)) double IOrderLookUp::GetSynonymId ( int Index );
__declspec(implementation_key(1363)) short IOrderLookUp::GetOrderTypeFlag ( int Index );
__declspec(implementation_key(1364)) void IOrderLookUp::PutCatTypeCd ( double _arg1 );
__declspec(implementation_key(1365)) void IOrderLookUp::PutActTypeCd ( double _arg1 );
__declspec(implementation_key(1366)) void IOrderLookUp::PutMnemonicTypeCd ( double _arg1 );
__declspec(implementation_key(1367)) IUnknownPtr IOrderLookUp::SelectOrderable ( int Index );
__declspec(implementation_key(1368)) double IOrderLookUp::GetClinCategoryCd ( int Index );
__declspec(implementation_key(1369)) double IOrderLookUp::GetClinSubCategoryCd ( int Index );
__declspec(implementation_key(1370)) void IOrderLookUp::PutClinSubCategoryCd ( int Index, double pVal );
__declspec(implementation_key(1371)) long IOrderLookUp::GetClinSubCatCode ( const _variant_t & newVal );
__declspec(implementation_key(1372)) long IOrderLookUp::GetChildCodeValueCount ( int Index );
__declspec(implementation_key(1373)) double IOrderLookUp::GetChildCodeValue ( int parentIndex, int childIndex );
__declspec(implementation_key(1374)) void IOrderLookUp::PutChildCodeValue ( int parentIndex, int childIndex, double pVal );
__declspec(implementation_key(1375)) _bstr_t IOrderLookUp::GetChildCodeDisplay ( int parentIndex, int childIndex );
__declspec(implementation_key(1376)) void IOrderLookUp::PutChildCodeDisplay ( int parentIndex, int childIndex, _bstr_t pVal );
__declspec(implementation_key(1377)) double IOrderLookUp::GetParentClinCatCd ( int Index );
__declspec(implementation_key(1378)) long IOrderLookUp::GetHasClinSubCat ( long Index );
__declspec(implementation_key(1379)) void IOrderLookUp::PutHasClinSubCat ( long Index, long pVal );
__declspec(implementation_key(1380)) _bstr_t IOrderLookUp::GetVirtualViewAt ( int Index );
__declspec(implementation_key(1381)) long IOrderLookUp::GetAllFacilityAccessInd ( int Index );
__declspec(implementation_key(1382)) _variant_t IOrderLookUp::GetFacilityAccessList ( int Index );
__declspec(implementation_key(1383)) long IOrderLookUp::SearchCareset ( _bstr_t sSearch );
__declspec(implementation_key(1384)) double IOrderLookUp::GetCSCatalogCd ( int Index );
__declspec(implementation_key(1385)) _bstr_t IOrderLookUp::GetCSMnemonic ( int Index );
__declspec(implementation_key(1386)) long IOrderLookUp::LoadCSComponents ( int Index );
__declspec(implementation_key(1387)) double IOrderLookUp::GetCSComponentTypeCd ( int Index, int compIndex );
__declspec(implementation_key(1388)) _bstr_t IOrderLookUp::GetCSComponentMnemonic ( int Index, int compIndex );
__declspec(implementation_key(1389)) double IOrderLookUp::GetCSComponentClinCatCd ( int Index, int compIndex );
__declspec(implementation_key(1390)) void IOrderLookUp::PutCSComponentClinCatCd ( int Index, int compIndex, double pVal );
__declspec(implementation_key(1391)) double IOrderLookUp::GetCSComponentOrdSentId ( int Index, int compIndex );
__declspec(implementation_key(1392)) _bstr_t IOrderLookUp::GetCSComponentOrdSentDisp ( int Index, int compIndex );
__declspec(implementation_key(1393)) double IOrderLookUp::GetCSComponentClinSubCatCd ( int Index, int compIndex );
__declspec(implementation_key(1394)) void IOrderLookUp::PutCSComponentClinSubCatCd ( int Index, int compIndex, double pVal );
__declspec(implementation_key(1395)) long IOrderLookUp::GetCSComponentImported ( int Index, int compIndex );
__declspec(implementation_key(1396)) void IOrderLookUp::PutCSComponentImported ( int Index, int compIndex, long pVal );
__declspec(implementation_key(1397)) int IOrderLookUp::GetCSComponentOrdTypeFlag ( int Index, int compIndex );
__declspec(implementation_key(1398)) _bstr_t IOrderLookUp::GetCSComponentOutLabel ( int Index, int compIndex );
__declspec(implementation_key(1399)) void IOrderLookUp::PutCSComponentOutLabel ( int Index, int compIndex, _bstr_t pVal );
__declspec(implementation_key(1400)) IDispatchPtr IOrderLookUp::SelectCSOrders ( int Index );
__declspec(implementation_key(1401)) _bstr_t IOrderLookUp::GetCSRefText ( int Index );
__declspec(implementation_key(1402)) long IOrderLookUp::SearchPrescription ( _bstr_t sSearch );
__declspec(implementation_key(1403)) IUnknownPtr IOrderLookUp::SelectPrescription ( int Index );
__declspec(implementation_key(1404)) long IOrderLookUp::GetOrderRxMask ( int Index );
__declspec(implementation_key(1405)) short IOrderLookUp::GetIntermittentInd ( int Index );
__declspec(implementation_key(1406)) _bstr_t IIngredient::GetMnemonic ( );
__declspec(implementation_key(1407)) void IIngredient::PutMnemonic ( _bstr_t pVal );
__declspec(implementation_key(1408)) double IIngredient::GetSynonymId ( );
__declspec(implementation_key(1409)) void IIngredient::PutSynonymId ( double pVal );
__declspec(implementation_key(1410)) double IIngredient::GetOrderSentenceId ( );
__declspec(implementation_key(1411)) void IIngredient::PutOrderSentenceId ( double pVal );
__declspec(implementation_key(1412)) _bstr_t IIngredient::GetOrderSentenceDisplay ( );
__declspec(implementation_key(1413)) void IIngredient::PutOrderSentenceDisplay ( _bstr_t pVal );
__declspec(implementation_key(1414)) double IIngredient::GetOeFormatId ( );
__declspec(implementation_key(1415)) void IIngredient::PutOeFormatId ( double pVal );
__declspec(implementation_key(1416)) HRESULT IIngredient::Copy ( struct IIngredient * pIIngredient );
__declspec(implementation_key(1417)) HRESULT IIngredient::IsEqual ( struct IIngredient * pIIngre, long * pBool );
__declspec(implementation_key(1418)) double IIngredient::GetCatalogCd ( );
__declspec(implementation_key(1419)) void IIngredient::PutCatalogCd ( double pVal );
__declspec(implementation_key(1420)) HRESULT IIngredient::RemoveOrderSentence ( );
__declspec(implementation_key(1421)) double IIngredient::GetSentCommentId ( );
__declspec(implementation_key(1422)) void IIngredient::PutSentCommentId ( double pVal );
__declspec(implementation_key(1423)) _bstr_t IIngredient::GetSentComment ( );
__declspec(implementation_key(1424)) void IIngredient::PutSentComment ( _bstr_t pVal );
__declspec(implementation_key(1425)) long IIngredient::GetCompSeq ( );
__declspec(implementation_key(1426)) void IIngredient::PutCompSeq ( long pVal );
__declspec(implementation_key(1427)) HRESULT IIngredient::AddOrderSentence ( struct IOrderSentence * pOrderSent );
__declspec(implementation_key(1428)) IOrderSentencePtr IIngredient::GetOrderSentencePtr ( );
__declspec(implementation_key(1429)) _bstr_t IIngredient::GetXMLDosageInformation ( );
__declspec(implementation_key(1430)) void IIngredient::PutXMLDosageInformation ( _bstr_t pVal );
__declspec(implementation_key(1431)) long IIngredient::IsOrdDetailEqual ( struct IIngredient * pIIngre );
__declspec(implementation_key(1432)) long IVariance::IsEqual ( struct IVariance * pVar );
__declspec(implementation_key(1433)) HRESULT IVariance::Copy ( struct IVariance * pVar );
__declspec(implementation_key(1434)) double IVariance::GetVarianceReltnId ( );
__declspec(implementation_key(1435)) void IVariance::PutVarianceReltnId ( double pVal );
__declspec(implementation_key(1436)) _bstr_t IVariance::GetParentEntityName ( );
__declspec(implementation_key(1437)) void IVariance::PutParentEntityName ( _bstr_t pVal );
__declspec(implementation_key(1438)) double IVariance::GetParentEntityId ( );
__declspec(implementation_key(1439)) void IVariance::PutParentEntityId ( double pVal );
__declspec(implementation_key(1440)) double IVariance::GetEventId ( );
__declspec(implementation_key(1441)) void IVariance::PutEventId ( double pVal );
__declspec(implementation_key(1442)) double IVariance::GetVarianceTypeCd ( );
__declspec(implementation_key(1443)) void IVariance::PutVarianceTypeCd ( double pVal );
__declspec(implementation_key(1444)) _bstr_t IVariance::GetVarianceTypeDisp ( );
__declspec(implementation_key(1445)) void IVariance::PutVarianceTypeDisp ( _bstr_t pVal );
__declspec(implementation_key(1446)) _bstr_t IVariance::GetVarianceTypeMean ( );
__declspec(implementation_key(1447)) void IVariance::PutVarianceTypeMean ( _bstr_t pVal );
__declspec(implementation_key(1448)) double IVariance::GetActionCd ( );
__declspec(implementation_key(1449)) void IVariance::PutActionCd ( double pVal );
__declspec(implementation_key(1450)) _bstr_t IVariance::GetActionDisp ( );
__declspec(implementation_key(1451)) void IVariance::PutActionDisp ( _bstr_t pVal );
__declspec(implementation_key(1452)) _bstr_t IVariance::GetActionMean ( );
__declspec(implementation_key(1453)) void IVariance::PutActionMean ( _bstr_t pVal );
__declspec(implementation_key(1454)) double IVariance::GetActionTextId ( );
__declspec(implementation_key(1455)) void IVariance::PutActionTextId ( double pVal );
__declspec(implementation_key(1456)) _bstr_t IVariance::GetActionText ( );
__declspec(implementation_key(1457)) void IVariance::PutActionText ( _bstr_t pVal );
__declspec(implementation_key(1458)) double IVariance::GetReasonCd ( );
__declspec(implementation_key(1459)) void IVariance::PutReasonCd ( double pVal );
__declspec(implementation_key(1460)) _bstr_t IVariance::GetReasonDisp ( );
__declspec(implementation_key(1461)) void IVariance::PutReasonDisp ( _bstr_t pVal );
__declspec(implementation_key(1462)) _bstr_t IVariance::GetReasonMean ( );
__declspec(implementation_key(1463)) void IVariance::PutReasonMean ( _bstr_t pVal );
__declspec(implementation_key(1464)) double IVariance::GetReasonTextId ( );
__declspec(implementation_key(1465)) void IVariance::PutReasonTextId ( double pVal );
__declspec(implementation_key(1466)) _bstr_t IVariance::GetReasonText ( );
__declspec(implementation_key(1467)) void IVariance::PutReasonText ( _bstr_t pVal );
__declspec(implementation_key(1468)) long IVariance::GetActiveInd ( );
__declspec(implementation_key(1469)) void IVariance::PutActiveInd ( long pVal );
__declspec(implementation_key(1470)) ACTION_TYPE IVariance::GetActionType ( );
__declspec(implementation_key(1471)) void IVariance::PutActionType ( ACTION_TYPE pVal );
__declspec(implementation_key(1472)) long IVariance::GetActionTextUpdtCnt ( );
__declspec(implementation_key(1473)) void IVariance::PutActionTextUpdtCnt ( long pVal );
__declspec(implementation_key(1474)) long IVariance::GetReasonTextUpdtCnt ( );
__declspec(implementation_key(1475)) void IVariance::PutReasonTextUpdtCnt ( long pVal );
__declspec(implementation_key(1476)) long IVariance::GetVarianceUpdtCnt ( );
__declspec(implementation_key(1477)) void IVariance::PutVarianceUpdtCnt ( long pVal );
__declspec(implementation_key(1478)) void IVariance::PutKey ( double _arg1 );
__declspec(implementation_key(1479)) double IVariance::GetNoteTextId ( );
__declspec(implementation_key(1480)) void IVariance::PutNoteTextId ( double pVal );
__declspec(implementation_key(1481)) _bstr_t IVariance::GetNoteText ( );
__declspec(implementation_key(1482)) void IVariance::PutNoteText ( _bstr_t pVal );
__declspec(implementation_key(1483)) long IVariance::GetNoteTextUpdtCnt ( );
__declspec(implementation_key(1484)) void IVariance::PutNoteTextUpdtCnt ( long pVal );
__declspec(implementation_key(1485)) double IVariance::GetPathwayId ( );
__declspec(implementation_key(1486)) void IVariance::PutPathwayId ( double pVal );
__declspec(implementation_key(1487)) long IVariance::GetDirty ( );
__declspec(implementation_key(1488)) void IVariance::PutDirty ( long pVal );
__declspec(implementation_key(1489)) double IVariance::GetChartPrsnlId ( );
__declspec(implementation_key(1490)) void IVariance::PutChartPrsnlId ( double pVal );
__declspec(implementation_key(1491)) double IVariance::GetUnchartPrsnlId ( );
__declspec(implementation_key(1492)) void IVariance::PutUnchartPrsnlId ( double pVal );
__declspec(implementation_key(1493)) DATE IVariance::GetChartDtTm ( );
__declspec(implementation_key(1494)) void IVariance::PutChartDtTm ( DATE pVal );
__declspec(implementation_key(1495)) DATE IVariance::GetUnchartDtTm ( );
__declspec(implementation_key(1496)) void IVariance::PutUnchartDtTm ( DATE pVal );
__declspec(implementation_key(1497)) _bstr_t IVariance::GetChartPrsnlName ( );
__declspec(implementation_key(1498)) void IVariance::PutChartPrsnlName ( _bstr_t pVal );
__declspec(implementation_key(1499)) _bstr_t IVariance::GetUnchartPrsnlName ( );
__declspec(implementation_key(1500)) void IVariance::PutUnchartPrsnlName ( _bstr_t pVal );
__declspec(implementation_key(1501)) IDispatchPtr IVariance::GetUTCChartDtTm ( );
__declspec(implementation_key(1502)) void IVariance::PutUTCChartDtTm ( IDispatch * pVal );
__declspec(implementation_key(1503)) IDispatchPtr IVariance::GetUTCUnchartDtTm ( );
__declspec(implementation_key(1504)) void IVariance::PutUTCUnchartDtTm ( IDispatch * pVal );
__declspec(implementation_key(1505)) double IVariance::GetOutcomeKey ( );
__declspec(implementation_key(1506)) void IVariance::PutOutcomeKey ( double pVal );
__declspec(implementation_key(1507)) _variant_t IIdMngr::GetIDs ( int numIdsNeeded, _bstr_t compTypeMean );
__declspec(implementation_key(1508)) double IIdMngr::GetActivityId ( VARIANT * vIds );
__declspec(implementation_key(1509)) HRESULT IIdMngr::GetIdsList ( int lNumIdsNeeded, _bstr_t sCompTypeMean, LONG_PTR lIdsList );
__declspec(implementation_key(1510)) HRESULT IClinCategory::AddClinSubCat ( double dCodeValue, _bstr_t sDiaply, _bstr_t sDesc, _bstr_t sCDFMean );
__declspec(implementation_key(1511)) long IClinCategory::GetClinSubCatCount ( );
__declspec(implementation_key(1512)) double IClinCategory::GetClinSubCatCode ( int Index );
__declspec(implementation_key(1513)) _bstr_t IClinCategory::GetClinSubCatDisplay ( int Index );
__declspec(implementation_key(1514)) double IClinCategory::GetClinicalCatCode ( );
__declspec(implementation_key(1515)) void IClinCategory::PutClinicalCatCode ( double pVal );
__declspec(implementation_key(1516)) _bstr_t IClinCategory::GetClinCatDisp ( );
__declspec(implementation_key(1517)) void IClinCategory::PutClinCatDisp ( _bstr_t pVal );
__declspec(implementation_key(1518)) HRESULT IClinCategory::RemoveClinSubCat ( );
__declspec(implementation_key(1519)) _bstr_t IClinCategory::GetClinCatMean ( );
__declspec(implementation_key(1520)) void IClinCategory::PutClinCatMean ( _bstr_t pVal );
__declspec(implementation_key(1521)) long IDTALookup::SearchDTA ( _bstr_t sSearch );
__declspec(implementation_key(1522)) void IDTALookup::PutResultTypeFilters ( const _variant_t & _arg1 );
__declspec(implementation_key(1523)) _bstr_t IDTALookup::GetDescription ( int Index );
__declspec(implementation_key(1524)) _bstr_t IDTALookup::GetMnemonic ( int Index );
__declspec(implementation_key(1525)) IUnknownPtr IDTALookup::SelectDTA ( double taskAssayCd );
__declspec(implementation_key(1526)) _variant_t IDTALookup::GetUnitCodes ( double taskAssayCd );
__declspec(implementation_key(1527)) IUnknownPtr IDTALookup::GetDataMap ( double taskAssayCd );
__declspec(implementation_key(1528)) double IDTALookup::GetDTACd ( int Index );
__declspec(implementation_key(1529)) IUnknownPtr IDTALookup::GetAlphaResponses ( double taskAssayCd );
__declspec(implementation_key(1530)) IUnknownPtr IDTALookup::LoadDTADetails ( double taskAssayCd );
__declspec(implementation_key(1531)) HRESULT IDTALookup::RemoveAllDTAs ( );
__declspec(implementation_key(1532)) IDispatchPtr IDTALookup::GetDTA ( double task_assay_cd );
__declspec(implementation_key(1533)) HRESULT IDTALookup::LoadDTAs ( IDispatch * lpDisp );
__declspec(implementation_key(1534)) long IDTALookup::SearchOutcomeDTA ( _bstr_t sSearch );
__declspec(implementation_key(1535)) IUnknownPtr IDTALookup::SelectDTAByIndex ( int idx );
__declspec(implementation_key(1536)) _bstr_t IDTALookup::GetOutcomeDescription ( int Index );
__declspec(implementation_key(1537)) HRESULT IDTALookup::LoadDTAsEx ( IDispatch * lpDisp, long hPatcon );
__declspec(implementation_key(1538)) double IOutcomeResult::GetClinEventId ( );
__declspec(implementation_key(1539)) void IOutcomeResult::PutClinEventId ( double pVal );
__declspec(implementation_key(1540)) double IOutcomeResult::GetEventId ( );
__declspec(implementation_key(1541)) void IOutcomeResult::PutEventId ( double pVal );
__declspec(implementation_key(1542)) DATE IOutcomeResult::GetEventEndDtTm ( );
__declspec(implementation_key(1543)) void IOutcomeResult::PutEventEndDtTm ( DATE pVal );
__declspec(implementation_key(1544)) _bstr_t IOutcomeResult::GetResultVal ( );
__declspec(implementation_key(1545)) void IOutcomeResult::PutResultVal ( _bstr_t pVal );
__declspec(implementation_key(1546)) double IOutcomeResult::GetResultUnitCd ( );
__declspec(implementation_key(1547)) void IOutcomeResult::PutResultUnitCd ( double pVal );
__declspec(implementation_key(1548)) _bstr_t IOutcomeResult::GetResultUnitDisp ( );
__declspec(implementation_key(1549)) void IOutcomeResult::PutResultUnitDisp ( _bstr_t pVal );
__declspec(implementation_key(1550)) long IOutcomeResult::GetMetInd ( );
__declspec(implementation_key(1551)) void IOutcomeResult::PutMetInd ( long pVal );
__declspec(implementation_key(1552)) _variant_t IOutcomeResult::GetKey ( );
__declspec(implementation_key(1553)) HRESULT IOutcomeResult::Copy ( struct IOutcomeResult * pOutcomeResult );
__declspec(implementation_key(1554)) double IOutcomeResult::GetResultStatusCd ( );
__declspec(implementation_key(1555)) void IOutcomeResult::PutResultStatusCd ( double pVal );
__declspec(implementation_key(1556)) DATE IOutcomeResult::GetPerformDtTm ( );
__declspec(implementation_key(1557)) void IOutcomeResult::PutPerformDtTm ( DATE pVal );
__declspec(implementation_key(1558)) _bstr_t IOutcomeResult::GetPerformPrsnlName ( );
__declspec(implementation_key(1559)) void IOutcomeResult::PutPerformPrsnlName ( _bstr_t pVal );
__declspec(implementation_key(1560)) long IOutcomeResult::GetUpdtCnt ( );
__declspec(implementation_key(1561)) void IOutcomeResult::PutUpdtCnt ( long pVal );
__declspec(implementation_key(1562)) double IOutcomeResult::GetEntryModeCd ( );
__declspec(implementation_key(1563)) void IOutcomeResult::PutEntryModeCd ( double pVal );
__declspec(implementation_key(1564)) IDispatchPtr IOutcomeResult::GetParentDispatch ( );
__declspec(implementation_key(1565)) void IOutcomeResult::PutParentDispatch ( IDispatch * pVal );
__declspec(implementation_key(1566)) _bstr_t IOutcomeResult::GetAccessionNbr ( );
__declspec(implementation_key(1567)) void IOutcomeResult::PutAccessionNbr ( _bstr_t pVal );
__declspec(implementation_key(1568)) IDispatchPtr IOutcomeResult::GetUTCPerformDtTm ( );
__declspec(implementation_key(1569)) void IOutcomeResult::PutUTCPerformDtTm ( IDispatch * pVal );
__declspec(implementation_key(1570)) IDispatchPtr IOutcomeResult::GetUTCEventEndDtTm ( );
__declspec(implementation_key(1571)) void IOutcomeResult::PutUTCEventEndDtTm ( IDispatch * pVal );
__declspec(implementation_key(1572)) NOMENCLATURE_STRING_TYPE IOutcomeResult::GetNomenStringFlag ( );
__declspec(implementation_key(1573)) void IOutcomeResult::PutNomenStringFlag ( NOMENCLATURE_STRING_TYPE pVal );
__declspec(implementation_key(1574)) _bstr_t IOutcomeResult::GetPreferredNomenDisp ( );
__declspec(implementation_key(1575)) void IOutcomeResult::PutPreferredNomenDisp ( _bstr_t pVal );
__declspec(implementation_key(1576)) _bstr_t IOutcomeResult::GetFormattedDisplay ( );
__declspec(implementation_key(1577)) _bstr_t IOutcome::GetDescription ( );
__declspec(implementation_key(1578)) void IOutcome::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(1579)) _bstr_t IOutcome::GetExpectation ( );
__declspec(implementation_key(1580)) void IOutcome::PutExpectation ( _bstr_t pVal );
__declspec(implementation_key(1581)) double IOutcome::GetTypeCd ( );
__declspec(implementation_key(1582)) void IOutcome::PutTypeCd ( double pVal );
__declspec(implementation_key(1583)) long IOutcome::GetActiveInd ( );
__declspec(implementation_key(1584)) void IOutcome::PutActiveInd ( long pVal );
__declspec(implementation_key(1585)) double IOutcome::GetOutcomeActivityId ( );
__declspec(implementation_key(1586)) void IOutcome::PutOutcomeActivityId ( double pVal );
__declspec(implementation_key(1587)) double IOutcome::GetOutcomeCatalogId ( );
__declspec(implementation_key(1588)) void IOutcome::PutOutcomeCatalogId ( double pVal );
__declspec(implementation_key(1589)) double IOutcome::GetDTACd ( );
__declspec(implementation_key(1590)) void IOutcome::PutDTACd ( double pVal );
__declspec(implementation_key(1591)) double IOutcome::GetEventCd ( );
__declspec(implementation_key(1592)) void IOutcome::PutEventCd ( double pVal );
__declspec(implementation_key(1593)) double IOutcome::GetClassCd ( );
__declspec(implementation_key(1594)) void IOutcome::PutClassCd ( double pVal );
__declspec(implementation_key(1595)) double IOutcome::GetResultTypeCd ( );
__declspec(implementation_key(1596)) void IOutcome::PutResultTypeCd ( double pVal );
__declspec(implementation_key(1597)) _bstr_t IOutcome::GetClassCdDisp ( );
__declspec(implementation_key(1598)) void IOutcome::PutClassCdDisp ( _bstr_t pVal );
__declspec(implementation_key(1599)) _bstr_t IOutcome::GetClassCdMean ( );
__declspec(implementation_key(1600)) void IOutcome::PutClassCdMean ( _bstr_t pVal );
__declspec(implementation_key(1601)) _bstr_t IOutcome::GetResultTypeCdDisp ( );
__declspec(implementation_key(1602)) void IOutcome::PutResultTypeCdDisp ( _bstr_t pVal );
__declspec(implementation_key(1603)) _bstr_t IOutcome::GetResultTypeCdMean ( );
__declspec(implementation_key(1604)) void IOutcome::PutResultTypeCdMean ( _bstr_t pVal );
__declspec(implementation_key(1605)) _bstr_t IOutcome::GetOperandMean ( );
__declspec(implementation_key(1606)) void IOutcome::PutOperandMean ( _bstr_t pVal );
__declspec(implementation_key(1607)) long IOutcome::GetUpdtCnt ( );
__declspec(implementation_key(1608)) void IOutcome::PutUpdtCnt ( long pVal );
__declspec(implementation_key(1609)) long IOutcome::AddOutcomeCriteria ( );
__declspec(implementation_key(1610)) double IOutcome::GetOutcomeCatCriteriaId ( int Index );
__declspec(implementation_key(1611)) void IOutcome::PutOutcomeCatCriteriaId ( int Index, double pVal );
__declspec(implementation_key(1612)) double IOutcome::GetOutcomeCriteriaId ( int Index );
__declspec(implementation_key(1613)) void IOutcome::PutOutcomeCriteriaId ( int Index, double pVal );
__declspec(implementation_key(1614)) double IOutcome::GetOperatorCd ( int Index );
__declspec(implementation_key(1615)) void IOutcome::PutOperatorCd ( int Index, double pVal );
__declspec(implementation_key(1616)) double IOutcome::GetResultValue ( int Index );
__declspec(implementation_key(1617)) void IOutcome::PutResultValue ( int Index, double pVal );
__declspec(implementation_key(1618)) double IOutcome::GetResultUnitCd ( int Index );
__declspec(implementation_key(1619)) void IOutcome::PutResultUnitCd ( int Index, double pVal );
__declspec(implementation_key(1620)) double IOutcome::GetnomenclatureId ( int Index );
__declspec(implementation_key(1621)) void IOutcome::PutnomenclatureId ( int Index, double pVal );
__declspec(implementation_key(1622)) long IOutcome::GetCriteriaSeq ( int Index );
__declspec(implementation_key(1623)) void IOutcome::PutCriteriaSeq ( int Index, long pVal );
__declspec(implementation_key(1624)) long IOutcome::GetCriteriaActiveInd ( int Index );
__declspec(implementation_key(1625)) void IOutcome::PutCriteriaActiveInd ( int Index, long pVal );
__declspec(implementation_key(1626)) long IOutcome::GetCriteriaUpdtCnt ( int Index );
__declspec(implementation_key(1627)) void IOutcome::PutCriteriaUpdtCnt ( int Index, long pVal );
__declspec(implementation_key(1628)) _bstr_t IOutcome::GetResultUnitCdDisp ( int Index );
__declspec(implementation_key(1629)) void IOutcome::PutResultUnitCdDisp ( int Index, _bstr_t pVal );
__declspec(implementation_key(1630)) _bstr_t IOutcome::GetResultUnitCdMean ( int Index );
__declspec(implementation_key(1631)) void IOutcome::PutResultUnitCdMean ( int Index, _bstr_t pVal );
__declspec(implementation_key(1632)) _bstr_t IOutcome::GetOperatorCdDisp ( int Index );
__declspec(implementation_key(1633)) void IOutcome::PutOperatorCdDisp ( int Index, _bstr_t pVal );
__declspec(implementation_key(1634)) _bstr_t IOutcome::GetOperatorCdMean ( int Index );
__declspec(implementation_key(1635)) void IOutcome::PutOperatorCdMean ( int Index, _bstr_t pVal );
__declspec(implementation_key(1636)) long IOutcome::GetCriteriaCount ( );
__declspec(implementation_key(1637)) long IOutcome::GetDirtyFlag ( );
__declspec(implementation_key(1638)) void IOutcome::PutDirtyFlag ( long pVal );
__declspec(implementation_key(1639)) HRESULT IOutcome::FormatExpectationString ( IUnknown * lpAlphaResponses, IUnknown * pDataMap );
__declspec(implementation_key(1640)) _variant_t IOutcome::GetKey ( );
__declspec(implementation_key(1641)) long IOutcome::GetCriteriaDirtyFlag ( );
__declspec(implementation_key(1642)) void IOutcome::PutCriteriaDirtyFlag ( long pVal );
__declspec(implementation_key(1643)) HRESULT IOutcome::RemoveAllCriteria ( );
__declspec(implementation_key(1644)) long IOutcome::AddOutcomePlan ( LONG_PTR lPlanStruct );
__declspec(implementation_key(1645)) _bstr_t IOutcome::GetPlanDescription ( int Index );
__declspec(implementation_key(1646)) long IOutcome::GetPlanCount ( );
__declspec(implementation_key(1647)) HRESULT IOutcome::RemoveAllPlans ( );
__declspec(implementation_key(1648)) HRESULT IOutcome::ResetOutcomeData ( );
__declspec(implementation_key(1649)) _bstr_t IOutcome::GetTypeCdDisp ( );
__declspec(implementation_key(1650)) void IOutcome::PutTypeCdDisp ( _bstr_t pVal );
__declspec(implementation_key(1651)) _bstr_t IOutcome::GetTypeCdMean ( );
__declspec(implementation_key(1652)) void IOutcome::PutTypeCdMean ( _bstr_t pVal );
__declspec(implementation_key(1653)) long IOutcome::GetCatalogInd ( );
__declspec(implementation_key(1654)) void IOutcome::PutCatalogInd ( long pVal );
__declspec(implementation_key(1655)) HRESULT IOutcome::Copy ( struct IOutcome * pOutcome );
__declspec(implementation_key(1656)) long IOutcome::IsEqual ( struct IOutcome * pOutcome );
__declspec(implementation_key(1657)) double IOutcome::GetStatusCd ( );
__declspec(implementation_key(1658)) void IOutcome::PutStatusCd ( double pVal );
__declspec(implementation_key(1659)) _bstr_t IOutcome::GetStatusDisp ( );
__declspec(implementation_key(1660)) void IOutcome::PutStatusDisp ( _bstr_t pVal );
__declspec(implementation_key(1661)) _bstr_t IOutcome::GetStatusMean ( );
__declspec(implementation_key(1662)) void IOutcome::PutStatusMean ( _bstr_t pVal );
__declspec(implementation_key(1663)) double IOutcome::GetTargetTypeCd ( );
__declspec(implementation_key(1664)) void IOutcome::PutTargetTypeCd ( double pVal );
__declspec(implementation_key(1665)) _bstr_t IOutcome::GetTargetTypeDisp ( );
__declspec(implementation_key(1666)) void IOutcome::PutTargetTypeDisp ( _bstr_t pVal );
__declspec(implementation_key(1667)) _bstr_t IOutcome::GetTargetTypeMean ( );
__declspec(implementation_key(1668)) void IOutcome::PutTargetTypeMean ( _bstr_t pVal );
__declspec(implementation_key(1669)) long IOutcome::GetDurationQty ( );
__declspec(implementation_key(1670)) void IOutcome::PutDurationQty ( long pVal );
__declspec(implementation_key(1671)) double IOutcome::GetDurationUnitCd ( );
__declspec(implementation_key(1672)) void IOutcome::PutDurationUnitCd ( double pVal );
__declspec(implementation_key(1673)) _bstr_t IOutcome::GetDurationUnitDisp ( );
__declspec(implementation_key(1674)) void IOutcome::PutDurationUnitDisp ( _bstr_t pVal );
__declspec(implementation_key(1675)) _bstr_t IOutcome::GetDurationUnitMean ( );
__declspec(implementation_key(1676)) void IOutcome::PutDurationUnitMean ( _bstr_t pVal );
__declspec(implementation_key(1677)) long IOutcome::GetExpandQty ( );
__declspec(implementation_key(1678)) void IOutcome::PutExpandQty ( long pVal );
__declspec(implementation_key(1679)) double IOutcome::GetExpandUnitCd ( );
__declspec(implementation_key(1680)) void IOutcome::PutExpandUnitCd ( double pVal );
__declspec(implementation_key(1681)) _bstr_t IOutcome::GetExpandUnitDisp ( );
__declspec(implementation_key(1682)) void IOutcome::PutExpandUnitDisp ( _bstr_t pVal );
__declspec(implementation_key(1683)) _bstr_t IOutcome::GetExpandUnitMean ( );
__declspec(implementation_key(1684)) void IOutcome::PutExpandUnitMean ( _bstr_t pVal );
__declspec(implementation_key(1685)) double IOutcome::GetPersonId ( );
__declspec(implementation_key(1686)) void IOutcome::PutPersonId ( double pVal );
__declspec(implementation_key(1687)) double IOutcome::GetEncntrId ( );
__declspec(implementation_key(1688)) void IOutcome::PutEncntrId ( double pVal );
__declspec(implementation_key(1689)) ACTION_TYPE IOutcome::GetActionType ( );
__declspec(implementation_key(1690)) void IOutcome::PutActionType ( ACTION_TYPE pVal );
__declspec(implementation_key(1691)) HRESULT IOutcome::AddOutcomeResult ( struct IOutcomeResult * pOutcomeResult );
__declspec(implementation_key(1692)) IUnknownPtr IOutcome::GetOutcomeResultCollection ( );
__declspec(implementation_key(1693)) OUTCOME_EVAL IOutcome::GetLastMetInd ( );
__declspec(implementation_key(1694)) void IOutcome::PutLastMetInd ( OUTCOME_EVAL pVal );
__declspec(implementation_key(1695)) long IOutcome::IsEvaluationAvail ( );
__declspec(implementation_key(1696)) HRESULT IOutcome::RemoveAllOutcomeResults ( );
__declspec(implementation_key(1697)) double IOutcome::GetReferenceTaskId ( );
__declspec(implementation_key(1698)) void IOutcome::PutReferenceTaskId ( double pVal );
__declspec(implementation_key(1699)) _bstr_t IOutcome::GetTaskDescription ( );
__declspec(implementation_key(1700)) void IOutcome::PutTaskDescription ( _bstr_t pVal );
__declspec(implementation_key(1701)) HRESULT IOutcome::LoadOutcomeAction ( );
__declspec(implementation_key(1702)) HRESULT IOutcome::RemoveAllActions ( );
__declspec(implementation_key(1703)) long IOutcome::GetActionSeq ( int Index );
__declspec(implementation_key(1704)) double IOutcome::GetActionOutcomeStatusCd ( int Index );
__declspec(implementation_key(1705)) _bstr_t IOutcome::GetActionOutcomeStatusDisp ( int Index );
__declspec(implementation_key(1706)) double IOutcome::GetActionTargetTypeCd ( int Index );
__declspec(implementation_key(1707)) _bstr_t IOutcome::GetActionTargetTypeDisp ( int Index );
__declspec(implementation_key(1708)) _bstr_t IOutcome::GetActionPrsnlName ( int Index );
__declspec(implementation_key(1709)) long IOutcome::GetActionCount ( );
__declspec(implementation_key(1710)) _bstr_t IOutcome::GetActionOutcomeStatusMean ( int Index );
__declspec(implementation_key(1711)) long IOutcome::GetTargetDurationQty ( );
__declspec(implementation_key(1712)) void IOutcome::PutTargetDurationQty ( long pVal );
__declspec(implementation_key(1713)) double IOutcome::GetTargetDurationUnitCd ( );
__declspec(implementation_key(1714)) void IOutcome::PutTargetDurationUnitCd ( double pVal );
__declspec(implementation_key(1715)) _bstr_t IOutcome::GetTargetDurationUnitCdDisp ( );
__declspec(implementation_key(1716)) void IOutcome::PutTargetDurationUnitCdDisp ( _bstr_t pVal );
__declspec(implementation_key(1717)) _bstr_t IOutcome::GetTargetDurationUnitCdMean ( );
__declspec(implementation_key(1718)) void IOutcome::PutTargetDurationUnitCdMean ( _bstr_t pVal );
__declspec(implementation_key(1719)) long IOutcome::GetDetailsLoaded ( );
__declspec(implementation_key(1720)) void IOutcome::PutDetailsLoaded ( long pVal );
__declspec(implementation_key(1721)) double IOutcome::GetMetNomenclatureId ( );
__declspec(implementation_key(1722)) void IOutcome::PutMetNomenclatureId ( double pVal );
__declspec(implementation_key(1723)) double IOutcome::GetComponentId ( );
__declspec(implementation_key(1724)) void IOutcome::PutComponentId ( double pVal );
__declspec(implementation_key(1725)) long IOutcome::GetStartedInd ( );
__declspec(implementation_key(1726)) void IOutcome::PutStartedInd ( long pVal );
__declspec(implementation_key(1727)) long IOutcome::GetAdjustStartTimeInd ( );
__declspec(implementation_key(1728)) void IOutcome::PutAdjustStartTimeInd ( long pVal );
__declspec(implementation_key(1729)) long IOutcome::GetResultLoadStatus ( );
__declspec(implementation_key(1730)) void IOutcome::PutResultLoadStatus ( long pVal );
__declspec(implementation_key(1731)) long IOutcome::GetSingleSelectInd ( );
__declspec(implementation_key(1732)) void IOutcome::PutSingleSelectInd ( long pVal );
__declspec(implementation_key(1733)) long IOutcome::GetHideExpectationInd ( );
__declspec(implementation_key(1734)) void IOutcome::PutHideExpectationInd ( long pVal );
__declspec(implementation_key(1735)) IDispatchPtr IOutcome::GetReferenceContentPtr ( );
__declspec(implementation_key(1736)) void IOutcome::PutReferenceContentPtr ( IDispatch * ppVal );
__declspec(implementation_key(1737)) long IOutcome::GetRefTextModifiedInd ( );
__declspec(implementation_key(1738)) void IOutcome::PutRefTextModifiedInd ( long pVal );
__declspec(implementation_key(1739)) double IOutcome::GetRefTextReltnId ( );
__declspec(implementation_key(1740)) void IOutcome::PutRefTextReltnId ( double pVal );
__declspec(implementation_key(1741)) long IOutcome::GetRemoveOCRefTextInd ( );
__declspec(implementation_key(1742)) void IOutcome::PutRemoveOCRefTextInd ( long pVal );
__declspec(implementation_key(1743)) long IOutcome::GetActivatedInd ( );
__declspec(implementation_key(1744)) void IOutcome::PutActivatedInd ( long pVal );
__declspec(implementation_key(1745)) IDispatchPtr IOutcome::GetUTCStartDtTm ( );
__declspec(implementation_key(1746)) void IOutcome::PutUTCStartDtTm ( IDispatch * pVal );
__declspec(implementation_key(1747)) IDispatchPtr IOutcome::GetUTCEndDtTm ( );
__declspec(implementation_key(1748)) void IOutcome::PutUTCEndDtTm ( IDispatch * pVal );
__declspec(implementation_key(1749)) IDispatchPtr IOutcome::GetUTCLastResultDtTm ( );
__declspec(implementation_key(1750)) void IOutcome::PutUTCLastResultDtTm ( IDispatch * pVal );
__declspec(implementation_key(1751)) IDispatchPtr IOutcome::GetUTCMarkDtTm ( );
__declspec(implementation_key(1752)) void IOutcome::PutUTCMarkDtTm ( IDispatch * pVal );
__declspec(implementation_key(1753)) IDispatchPtr IOutcome::GetUTCActionOutcomeStatusDtTm ( int Index );
__declspec(implementation_key(1754)) IDispatchPtr IOutcome::GetUTCActionStartDtTm ( int Index );
__declspec(implementation_key(1755)) IDispatchPtr IOutcome::GetUTCActionEndDtTm ( int Index );
__declspec(implementation_key(1756)) IDispatchPtr IOutcome::GetUTCActionDtTm ( int Index );
__declspec(implementation_key(1757)) double IOutcome::GetDynamicLabelId ( );
__declspec(implementation_key(1758)) void IOutcome::PutDynamicLabelId ( double pVal );
__declspec(implementation_key(1759)) _bstr_t IOutcome::GetDynamicLabelName ( );
__declspec(implementation_key(1760)) void IOutcome::PutDynamicLabelName ( _bstr_t pVal );
__declspec(implementation_key(1761)) IOutcomePtr IOutcome::GetGenericOutcome ( );
__declspec(implementation_key(1762)) void IOutcome::PutGenericOutcome ( struct IOutcome * pVal );
__declspec(implementation_key(1763)) _bstr_t IOutcome::GetFormattedDynamicLabelText ( );
__declspec(implementation_key(1764)) HRESULT IOutcome::AddDynamicLabelOutcome ( struct IOutcome * pOutcome );
__declspec(implementation_key(1765)) IDispatchPtr IOutcome::GetDynamicLabelOutcomeCol ( );
__declspec(implementation_key(1766)) NOMENCLATURE_STRING_TYPE IOutcome::GetNomenStringFlag ( );
__declspec(implementation_key(1767)) void IOutcome::PutNomenStringFlag ( NOMENCLATURE_STRING_TYPE pVal );
__declspec(implementation_key(1768)) long IOutcome::GetStartEstimatedInd ( );
__declspec(implementation_key(1769)) void IOutcome::PutStartEstimatedInd ( long pStartEstimatedInd );
__declspec(implementation_key(1770)) long IOutcome::GetEndEstimatedInd ( );
__declspec(implementation_key(1771)) void IOutcome::PutEndEstimatedInd ( long pEndEstimatedInd );
__declspec(implementation_key(1772)) long IOutcome::GetFutureInitiateInd ( );
__declspec(implementation_key(1773)) void IOutcome::PutFutureInitiateInd ( long pFutureInitiateInd );
__declspec(implementation_key(1774)) double IOutcome::GetLastResultEventId ( );
__declspec(implementation_key(1775)) void IOutcome::PutLastResultEventId ( double pVal );
__declspec(implementation_key(1776)) IDispatchPtr IOutcome::GetParentDispatch ( );
__declspec(implementation_key(1777)) void IOutcome::PutParentDispatch ( IDispatch * pVal );
__declspec(implementation_key(1778)) IOutcomePtr IOutcome::GetDynamicLabelOutcomeByDynamicLabelId ( double dDynamicLabelId );
__declspec(implementation_key(1779)) IOutcomeResultPtr IOutcome::GetLastOutcomeResult ( );
__declspec(implementation_key(1780)) long IOutcome::GetHasInErrorResult ( );
__declspec(implementation_key(1781)) void IOutcome::PutHasInErrorResult ( long pVal );
__declspec(implementation_key(1782)) long IOutcome::GetPlanVersion ( int iIndex );
__declspec(implementation_key(1783)) EPlanVersionStatus IOutcome::GetPlanVersionStatus ( int iIndex );
__declspec(implementation_key(1784)) HRESULT IOutcome::SetFacilityFlexing ( LONG_PTR facilityVector );
__declspec(implementation_key(1785)) _bstr_t IOutcome::GetFlexFacilityDisp ( );
__declspec(implementation_key(1786)) double IOutcome::GetFlexingFacilityCodeAt ( int iIndex );
__declspec(implementation_key(1787)) long IOutcome::GetFlexingCount ( );
__declspec(implementation_key(1788)) long IOutcome::GetAllFacilityInd ( );
__declspec(implementation_key(1789)) HRESULT IOutcome::PutAllFacilityInd ( long bAllFacilityIndVal );
__declspec(implementation_key(1790)) _bstr_t IOutcome::GetFacilityDisplayAt ( int iIndex );
__declspec(implementation_key(1791)) HRESULT IOutcome::GetOutcomeFlexedFacilityCds ( LONG_PTR facilityVector );
__declspec(implementation_key(1792)) long IOutcomeLookup::SearchOutcomes ( _bstr_t sSearch, double task_assay_cd, double outcome_class_cd );
__declspec(implementation_key(1793)) IUnknownPtr IOutcomeLookup::SelectOutcome ( double outcomeCatId, long bLoadPlanInfo );
__declspec(implementation_key(1794)) _bstr_t IOutcomeLookup::GetDescription ( int Index );
__declspec(implementation_key(1795)) _bstr_t IOutcomeLookup::GetExpectation ( int Index );
__declspec(implementation_key(1796)) HRESULT IOutcomeLookup::LoadOutcomeDetails ( struct IOutcome * pOutcome, long bLoadPlanInfo );
__declspec(implementation_key(1797)) double IOutcomeLookup::GetOutcomeCatalogId ( int Index );
__declspec(implementation_key(1798)) HRESULT IOutcomeLookup::AddOutcome ( struct IOutcome * pOutcome );
__declspec(implementation_key(1799)) long IOutcomeLookup::GetSearchResultCount ( );
__declspec(implementation_key(1800)) IDispatchPtr IOutcomeLookup::SelectComponent ( int Index );
__declspec(implementation_key(1801)) _bstr_t IOutcomeLookup::GetOutcomeTypeDisp ( int Index );
__declspec(implementation_key(1802)) void IOutcomeLookup::PutOutcomeSearchInd ( long _arg1 );
__declspec(implementation_key(1803)) HRESULT IOutcomeLookup::LoadOutcomeActDetails ( struct IOutcome * pOutcome );
__declspec(implementation_key(1804)) double IOutcomeLookup::GetOutcomeTypeCd ( int Index );
__declspec(implementation_key(1805)) IUnknownPtr IOutcomeLookup::SelectOutcomeByIndex ( int idx, long bLoadPlanInfo );
__declspec(implementation_key(1806)) HRESULT IOutcomeLookup::SyncOutcomeSearchResultVector ( struct IOutcome * pOutcome, long isNew, int idx );
__declspec(implementation_key(1807)) long IOutcomeLookup::SearchOutcomesByFilter ( _bstr_t sSearch, OC_SEARCH_FILTER_TYPE filterType );
__declspec(implementation_key(1808)) long IOutcomeLookup::SearchOutcomesByFilterWithFacilityFlexing ( _bstr_t sSearch, OC_SEARCH_FILTER_TYPE filterType, double dPatientLocationCd );
__declspec(implementation_key(1809)) long ITaskLookup::SearchTasks ( _bstr_t sSearch );
__declspec(implementation_key(1810)) _bstr_t ITaskLookup::GetTaskDescription ( int Index );
__declspec(implementation_key(1811)) double ITaskLookup::GetReferenceTaskId ( int Index );
__declspec(implementation_key(1812)) _variant_t IPlanPrivManager::GetExceptions ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv );
__declspec(implementation_key(1813)) PLAN_PRIV_VALUE IPlanPrivManager::GetPrivValue ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv );
__declspec(implementation_key(1814)) long IPlanPrivManager::HasPrivilegeByDisp ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv, IDispatch * pDisp );
__declspec(implementation_key(1815)) long IPlanPrivManager::HasPrivilegeByType ( double dPatientId, double dEncounter, PLAN_PRIV ePlanPriv, double dPlanTypeCode );
__declspec(implementation_key(1816)) HRESULT IPlanPrivManager::Refresh ( );
__declspec(implementation_key(1817)) long IPlanPrivManager::CanUserUpdatePlans ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1818)) long IPlanPrivManager::DoesUpdatePlansPrivilegeHaveIncludeExceptions ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1819)) long IPlanPrivManager::DoesUpdatePlansPrivilegeHaveExcludeExceptions ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1820)) _variant_t IPlanPrivManager::GetUpdatePlansPrivilegeExceptions ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1821)) long IPlanPrivManager::DoesUserHavePrivilegeToUpdatePhase ( double dPatientId, double dEncounterId, IDispatch * pDispatch );
__declspec(implementation_key(1822)) long IPlanPrivManager::DoesUserHavePrivilegeToUpdateComponent ( double dPatientId, double dEncounterId, IDispatch * pDispatch );
__declspec(implementation_key(1823)) long IPlanPrivManager::DoesUserHavePrivilegeToAcceptProposals ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1824)) long IPlanPrivManager::DoesUserHavePrivilegeToAcceptReviews ( double dPatientId, double dEncounterId );
__declspec(implementation_key(1825)) _variant_t ISuggestedPlan::GetKey ( );
__declspec(implementation_key(1826)) double ISuggestedPlan::GetTaskId ( );
__declspec(implementation_key(1827)) void ISuggestedPlan::PutTaskId ( double pVal );
__declspec(implementation_key(1828)) double ISuggestedPlan::GetTaskStatusCd ( );
__declspec(implementation_key(1829)) void ISuggestedPlan::PutTaskStatusCd ( double pVal );
__declspec(implementation_key(1830)) long ISuggestedPlan::GetTaskUpdateCount ( );
__declspec(implementation_key(1831)) void ISuggestedPlan::PutTaskUpdateCount ( long pVal );
__declspec(implementation_key(1832)) double ISuggestedPlan::GetPlanCatalogId ( );
__declspec(implementation_key(1833)) void ISuggestedPlan::PutPlanCatalogId ( double pVal );
__declspec(implementation_key(1834)) _bstr_t ISuggestedPlan::GetDisplayDescription ( );
__declspec(implementation_key(1835)) void ISuggestedPlan::PutDisplayDescription ( _bstr_t pVal );
__declspec(implementation_key(1836)) double ISuggestedPlan::GetPathwayTypeCd ( );
__declspec(implementation_key(1837)) void ISuggestedPlan::PutPathwayTypeCd ( double pVal );
__declspec(implementation_key(1838)) DATE ISuggestedPlan::GetPlanSuggestedDate ( );
__declspec(implementation_key(1839)) void ISuggestedPlan::PutPlanSuggestedDate ( DATE pVal );
__declspec(implementation_key(1840)) unsigned __int64 ISuggestedPlan::GetPlanSuggestedDateTimeZone ( );
__declspec(implementation_key(1841)) void ISuggestedPlan::PutPlanSuggestedDateTimeZone ( unsigned __int64 pVal );
__declspec(implementation_key(1842)) _bstr_t ISuggestedPlan::GetPlanSuggestedReason ( );
__declspec(implementation_key(1843)) void ISuggestedPlan::PutPlanSuggestedReason ( _bstr_t pVal );
__declspec(implementation_key(1844)) double ISuggestedPlan::GetPlanEvidenceReltnId ( );
__declspec(implementation_key(1845)) void ISuggestedPlan::PutPlanEvidenceReltnId ( double pVal );
__declspec(implementation_key(1846)) _bstr_t ISuggestedPlan::GetEvidenceLocator ( );
__declspec(implementation_key(1847)) void ISuggestedPlan::PutEvidenceLocator ( _bstr_t pVal );
__declspec(implementation_key(1848)) _bstr_t ISuggestedPlan::GetEvidenceTypeMean ( );
__declspec(implementation_key(1849)) void ISuggestedPlan::PutEvidenceTypeMean ( _bstr_t pVal );
__declspec(implementation_key(1850)) double ISuggestedPlan::GetActionReasonCd ( );
__declspec(implementation_key(1851)) void ISuggestedPlan::PutActionReasonCd ( double pVal );
__declspec(implementation_key(1852)) _bstr_t ISuggestedPlan::GetActionReasonComment ( );
__declspec(implementation_key(1853)) void ISuggestedPlan::PutActionReasonComment ( _bstr_t pVal );
__declspec(implementation_key(1854)) double ISuggestedPlan::GetActionTypeCd ( );
__declspec(implementation_key(1855)) void ISuggestedPlan::PutActionTypeCd ( double pVal );
__declspec(implementation_key(1856)) short ISuggestedPlan::GetRefTextExist ( );
__declspec(implementation_key(1857)) void ISuggestedPlan::PutRefTextExist ( short pVal );
__declspec(implementation_key(1858)) IDispatchPtr ISuggestedPlan::GetUTCPlanSuggestedDate ( );
__declspec(implementation_key(1859)) void ISuggestedPlan::PutUTCPlanSuggestedDate ( IDispatch * pVal );
__declspec(implementation_key(1860)) _bstr_t IMaintenanceCriterion::GetPlanDescription ( );
__declspec(implementation_key(1861)) void IMaintenanceCriterion::PutPlanDescription ( _bstr_t pVal );
__declspec(implementation_key(1862)) double IMaintenanceCriterion::GetPwMaintenanceCriteriaId ( );
__declspec(implementation_key(1863)) void IMaintenanceCriterion::PutPwMaintenanceCriteriaId ( double pVal );
__declspec(implementation_key(1864)) double IMaintenanceCriterion::GetVersionPwCatId ( );
__declspec(implementation_key(1865)) void IMaintenanceCriterion::PutVersionPwCatId ( double pVal );
__declspec(implementation_key(1866)) double IMaintenanceCriterion::GetTimeUnitCd ( );
__declspec(implementation_key(1867)) void IMaintenanceCriterion::PutTimeUnitCd ( double pVal );
__declspec(implementation_key(1868)) long IMaintenanceCriterion::GetTimeQty ( );
__declspec(implementation_key(1869)) void IMaintenanceCriterion::PutTimeQty ( long pVal );
__declspec(implementation_key(1870)) long IMaintenanceCriterion::GetUpdtCnt ( );
__declspec(implementation_key(1871)) void IMaintenanceCriterion::PutUpdtCnt ( long pVal );
__declspec(implementation_key(1872)) EMaintenanceCriterionAction IMaintenanceCriterion::GetMaintenanceCriterionAction ( );
__declspec(implementation_key(1873)) void IMaintenanceCriterion::PutMaintenanceCriterionAction ( EMaintenanceCriterionAction pVal );
__declspec(implementation_key(1874)) EMaintenanceCriterionType IMaintenanceCriterion::GetMaintenanceCriterionType ( );
__declspec(implementation_key(1875)) void IMaintenanceCriterion::PutMaintenanceCriterionType ( EMaintenanceCriterionType pVal );
__declspec(implementation_key(1876)) EMaintenanceCriterionEncounterType IMaintenanceCriterion::GetMaintenanceCriterionEncounterType ( );
__declspec(implementation_key(1877)) void IMaintenanceCriterion::PutMaintenanceCriterionEncounterType ( EMaintenanceCriterionEncounterType pVal );
__declspec(implementation_key(1878)) HRESULT IMaintenanceCriterion::Copy ( struct IMaintenanceCriterion * pMaintenanceCriterion );
__declspec(implementation_key(1879)) long IMaintenanceCriterion::IsEqual ( struct IMaintenanceCriterion * pMaintenanceCriterion );
__declspec(implementation_key(1880)) EMaintenanceCriterionPlanExpirationType IMaintenanceCriterion::GetMaintenanceCriterionPlanExpirationType ( );
__declspec(implementation_key(1881)) void IMaintenanceCriterion::PutMaintenanceCriterionPlanExpirationType ( EMaintenanceCriterionPlanExpirationType pVal );
__declspec(implementation_key(1882)) void IFolderLookup::PutPatientId ( double _arg1 );
__declspec(implementation_key(1883)) void IFolderLookup::PutEncounterId ( double _arg1 );
__declspec(implementation_key(1884)) void IFolderLookup::PutVenueTypeCd ( double _arg1 );
__declspec(implementation_key(1885)) void IFolderLookup::PutViewPlans ( long _arg1 );
__declspec(implementation_key(1886)) HRESULT IFolderLookup::LoadDefaultFolders ( );
__declspec(implementation_key(1887)) long IFolderLookup::LoadFavoritesWithPrsnlPlans ( );
__declspec(implementation_key(1888)) long IFolderLookup::GetDontShowFavoritePlans ( );
__declspec(implementation_key(1889)) void IFolderLookup::PutDontShowFavoritePlans ( long pVal );
__declspec(implementation_key(1890)) HRESULT IFolderLookup::ResetEncntrSpecificInfo ( );
__declspec(implementation_key(1891)) long IFolderLookup::GetFavoritesSortPref ( );
__declspec(implementation_key(1892)) HRESULT IFolderLookup::UpdateFavoriteSortPref ( long bAlphaSort );
__declspec(implementation_key(1893)) LONG_PTR IFolderLookup::GetRootPtr ( );
__declspec(implementation_key(1894)) LONG_PTR IFolderLookup::GetFavFolderByAltSelCatId ( double dAltSelCatId );
__declspec(implementation_key(1895)) LONG_PTR IFolderLookup::GetPrsnlPlansFolder ( );
__declspec(implementation_key(1896)) LONG_PTR IFolderLookup::GetFavoritesPtr ( );
__declspec(implementation_key(1897)) LONG_PTR IFolderLookup::GetHomePtr ( );
__declspec(implementation_key(1898)) LONG_PTR IFolderLookup::GetHomeRootPtr ( );
__declspec(implementation_key(1899)) HRESULT IFolderLookup::SetFolderAsHome ( LONG_PTR pVal );
__declspec(implementation_key(1900)) HRESULT IFolderLookup::AddHomeFolder ( LONG_PTR pFolder );
__declspec(implementation_key(1901)) long IFolderLookup::IsFolderLoaded ( LONG_PTR pAsFolder );
__declspec(implementation_key(1902)) HRESULT IFolderLookup::ClearChildList ( LONG_PTR pAsFolder );
__declspec(implementation_key(1903)) HRESULT IFolderLookup::SortAllItemsAndChildItems ( LONG_PTR pAsFolder );
__declspec(implementation_key(1904)) long IFolderLookup::RemoveFavorite ( LONG_PTR pItem );
__declspec(implementation_key(1905)) long IFolderLookup::AddFavoriteItem ( LONG_PTR pItem, double dParentAltSelId, LONG_PTR pFolder );
__declspec(implementation_key(1906)) long IFolderLookup::AddFavoriteOrder ( LONG_PTR pvOrdObj, _bstr_t sFavNickname, double dParentAltSelId, LONG_PTR pFolder );
__declspec(implementation_key(1907)) long IFolderLookup::AddCommonFavorite ( LONG_PTR orderList, _bstr_t sFavNickname, double dParentAltSelId, LONG_PTR pFolder );
__declspec(implementation_key(1908)) double IFolderLookup::AddFolder ( _bstr_t sDesc, LONG_PTR pFolder );
__declspec(implementation_key(1909)) LONG_PTR IFolderLookup::ModifyFolderItem ( LONG_PTR pItem, double newParentAltSelCatId, _bstr_t sDesc );
__declspec(implementation_key(1910)) HRESULT IFolderLookup::ResequenceFolder ( LONG_PTR lFolder, LONG_PTR lAltSelArr );
__declspec(implementation_key(1911)) HRESULT IFolderLookup::LoadPrsnlPlansChildren ( LONG_PTR lLoadArray );
__declspec(implementation_key(1912)) long IFolderLookup::GetPrsnlPlansChildren ( LONG_PTR lLoadArray );
__declspec(implementation_key(1913)) HRESULT IFolderLookup::GetChildren ( LONG_PTR lFolder, LONG_PTR lLoadArray );
__declspec(implementation_key(1914)) long IFolderLookup::LoadInTestPlans ( );
__declspec(implementation_key(1915)) HRESULT IFolderLookup::LoadInTestPlansChildren ( LONG_PTR lLoadArray );
__declspec(implementation_key(1916)) long IFolderLookup::GetInTestPlansChildren ( LONG_PTR lLoadArray );
__declspec(implementation_key(1917)) LONG_PTR IFolderLookup::GetInTestPlansFolder ( );
__declspec(implementation_key(1918)) void IFolderLookup::PutViewRegimens ( long _arg1 );
__declspec(implementation_key(1919)) long IFolderLookup::LoadPersonalizedPlans ( );
__declspec(implementation_key(1920)) HRESULT IFolderLookup::LoadPersonalizedPlansChildren ( LONG_PTR lLoadArray );
__declspec(implementation_key(1921)) long IFolderLookup::GetPersonalizedPlansChildren ( LONG_PTR lLoadArray );
__declspec(implementation_key(1922)) LONG_PTR IFolderLookup::GetPersonalizedPlansFolder ( );
__declspec(implementation_key(1923)) void IFolderLookup::PutViewOrders ( long _arg1 );
__declspec(implementation_key(1924)) void IFolderLookup::PutEnableInTestPlans ( long _arg1 );
__declspec(implementation_key(1925)) void IFolderLookup::PutEnablePrsnlPlans ( long _arg1 );
__declspec(implementation_key(1926)) void IFolderLookup::PutEnablePersonalizedPlans ( long _arg1 );
__declspec(implementation_key(1927)) void IOrderLookupEx::PutPatientId ( double _arg1 );
__declspec(implementation_key(1928)) void IOrderLookupEx::PutEncounterId ( double _arg1 );
__declspec(implementation_key(1929)) long IOrderLookupEx::GetOnlyFormularyStatus ( );
__declspec(implementation_key(1930)) void IOrderLookupEx::PutOnlyFormularyStatus ( long pVal );
__declspec(implementation_key(1931)) INT_PTRX IOrderLookupEx::GetSearchResultsCount ( );
__declspec(implementation_key(1932)) LONG_PTR IOrderLookupEx::GetSearchResult ( long Index );
__declspec(implementation_key(1933)) INT_PTRX IOrderLookupEx::Search ( LONG_PTR lOrderableSearchStruct );
__declspec(implementation_key(1934)) long IOrderLookupEx::IsProposalAllowed ( LONG_PTR lOrderableSearchStruct );
__declspec(implementation_key(1935)) void ITherapeuticClassLookUp::PutPatientId ( double _arg1 );
__declspec(implementation_key(1936)) void ITherapeuticClassLookUp::PutEncounterId ( double _arg1 );
__declspec(implementation_key(1937)) long ITherapeuticClassLookUp::GetOnlyFormularyStatus ( );
__declspec(implementation_key(1938)) void ITherapeuticClassLookUp::PutOnlyFormularyStatus ( long pVal );
__declspec(implementation_key(1939)) LONG_PTR ITherapeuticClassLookUp::GetRootPtr ( );
__declspec(implementation_key(1940)) HRESULT ITherapeuticClassLookUp::GetChildren ( LONG_PTR lFolder, LONG_PTR lLoadArray );
__declspec(implementation_key(1941)) LONG_PTR ITherapeuticClassLookUp::Search ( LONG_PTR lOrderableSearchStruct, LONG_PTR lLoadArray );
__declspec(implementation_key(1942)) _bstr_t IPowerPlansXMLTranslator::GetXML ( );
__declspec(implementation_key(1943)) HRESULT IPowerPlansXMLTranslator::SetXML ( _bstr_t bstrXML );
__declspec(implementation_key(1944)) HRESULT IPowerPlansXMLTranslator::SetNoteRowBackgroundColor ( long lColor );
__declspec(implementation_key(1945)) HRESULT IPowerPlansXMLTranslator::SetNoteRowTextColor ( long lColor );
__declspec(implementation_key(1946)) long IPowerPlansXMLTranslator::GetNoteBackgroundColor ( );
__declspec(implementation_key(1947)) long IPowerPlansXMLTranslator::GetNoteTextColor ( );
__declspec(implementation_key(1948)) long IPlanProposalManager::IsProposalNecessary ( LONG_PTR lIsProposalNecessary );
__declspec(implementation_key(1949)) long IPlanProposalManager::CanPlanBeProposed ( LONG_PTR lCanPlanBeProposedCriteria );
__declspec(implementation_key(1950)) long IPlanProposalManager::GetProposalStatus ( LONG_PTR lGetProposalStatusCriteria );
__declspec(implementation_key(1951)) long IPlanProposalManager::IsPendingPropose ( IDispatch * pDispatch );
__declspec(implementation_key(1952)) long IPlanProposalManager::IsPendingAccept ( IDispatch * pDispatch );
__declspec(implementation_key(1953)) long IPlanProposalManager::IsPendingReject ( IDispatch * pDispatch );
__declspec(implementation_key(1954)) long IPlanProposalManager::IsPendingSubmit ( IDispatch * pDispatch );
__declspec(implementation_key(1955)) long IPlanProposalManager::IsPendingWithdraw ( IDispatch * pDispatch );
__declspec(implementation_key(1956)) LONG_PTR IPlanProposalManager::AcceptPlanProposal ( LONG_PTR lAcceptPlanProposalCriteria );
__declspec(implementation_key(1957)) HRESULT IPlanProposalManager::LogTimerForProposedPlanAction ( IDispatch * pDispatch );
__declspec(implementation_key(1958)) void IPrecomponentOrder::PutPatientId ( double pPatientId );
__declspec(implementation_key(1959)) double IPrecomponentOrder::GetPatientId ( );
__declspec(implementation_key(1960)) void IPrecomponentOrder::PutProviderId ( double pProviderId );
__declspec(implementation_key(1961)) double IPrecomponentOrder::GetProviderId ( );
__declspec(implementation_key(1962)) void IPrecomponentOrder::PutorderId ( double pOrderId );
__declspec(implementation_key(1963)) double IPrecomponentOrder::GetorderId ( );
__declspec(implementation_key(1964)) void IPrecomponentOrder::PutVersionPlanCatalogId ( double pVersionPlanCatalogId );
__declspec(implementation_key(1965)) double IPrecomponentOrder::GetVersionPlanCatalogId ( );
__declspec(implementation_key(1966)) void IPrecomponentOrder::PutCycleNumber ( long pCycleNumber );
__declspec(implementation_key(1967)) long IPrecomponentOrder::GetCycleNumber ( );
__declspec(implementation_key(1968)) void IPrecomponentOrder::PutComponentUUID ( _bstr_t pComponentUUID );
__declspec(implementation_key(1969)) _bstr_t IPrecomponentOrder::GetComponentUUID ( );
__declspec(implementation_key(1970)) void IPrecomponentOrder::PutRegimenId ( double pRegimenId );
__declspec(implementation_key(1971)) double IPrecomponentOrder::GetRegimenId ( );
#pragma stop_map_region

#pragma pack(pop)
